<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Email.Net</name>
    </assembly>
    <members>
        <member name="T:Email.Net.Common.MessageParts.PartUtils">
            <summary>
            Helper methods to work with message parts
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageParts.PartUtils.IsMessagePart(Email.Net.Common.ContentType)">
            <summary>
            Checks if part is a message part
            </summary>
            <param name="contentType">A content type of the part to check</param>
            <returns>true if part is a message part</returns>
        </member>
        <member name="M:Email.Net.Common.MessageParts.PartUtils.IsMultipart(Email.Net.Common.ContentType)">
            <summary>
            Checks if part is a multipart
            </summary>
            <param name="contentType">A content type of the part to check</param>
            <returns>true if part is a multipart</returns>
        </member>
        <member name="M:Email.Net.Common.MessageParts.PartUtils.IsTextPart(Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition)">
            <summary>
            Determines whether part with given ContentType and ContentDisposition is textpart
            </summary>
            <param name="contentType">ContentType of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <returns>True, if part with given ContentType and ContentDisposition is TextPart, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.MessageParts.PartUtils.ExtractOriginalFilename(Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition)">
            <summary>
            Extraxts the filename of an attached file from MIME headers
            </summary>
            <param name="contentType">ContentType of the message part</param>
            <param name="contentDisposition">ContentDisposition of the message part</param>
            <returns>Filename</returns>
        </member>
        <member name="T:Email.Net.Common.StructuredMessage">
            <summary>
            The base class for a message with a structure of the subparts
            </summary>
        </member>
        <member name="T:Email.Net.Common.MailMessage">
            <summary>
             A base class of the mail message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessage._header">
            <summary>
            A MIME-header of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessage._attachments">
            <summary>
            A collection of the message attachments 
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessage._text">
            <summary>
            A text of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessage._plainText">
            <summary>
            A plain text of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessage._textContentType">
            <summary>
            A type of the message text (plain or html)
            </summary>
        </member>
        <member name="M:Email.Net.Common.MailMessage.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="P:Email.Net.Common.MailMessage.From">
            <summary>
            Gets and sets the source (<b>From</b>) address of the message
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.To">
            <summary>
            Specifies the destination e-mail addresses collection of the message
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.CarbonCopies">
            <summary>
            Specifies the carbon copies - the addresses to send a copy of the message to
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.BlindedCarbonCopies">
            <summary>
            Specifies the blinded carbon copies - the addresses to send a blind copy of the message to
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.Subject">
            <summary>
            Gets and sets the subject of the message
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.Date">
            <summary>
            Gets and sets the timestamp of the message (In UTC)
            </summary>
        </member>
        <member name="P:Email.Net.Common.MailMessage.Attachments">
            <summary>
            Gets the collection of the attachments
            </summary>
        </member>
        <member name="P:Email.Net.Common.MailMessage.Text">
            <summary>
            Gets and sets the main text content of the message (for plain-text messages the plain-text itself, for 
            HTML-messages it contains the provided HTML)
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.PlainText">
            <summary>
            Gets and sets a plain-text equivalent of <see cref="P:Email.Net.Common.MailMessage.Text"/>
            </summary>
            <remarks>
            This text should be set, if the main <see cref="P:Email.Net.Common.MailMessage.Text"/> of the message is in HTML or another complicated 
            format. This text should be in a plain-text format. <b>plain/text</b> qualifier will be used for header 
            content type of the message.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MailMessage.TextContentType">
            <summary>
            Gets and sets the type of the text in the <see cref="P:Email.Net.Common.MailMessage.Text"/> property 
            </summary>
            <remarks>If the type is HTML, <see cref="P:Email.Net.Common.MailMessage.PlainText"/> field should be set </remarks> 
        </member>
        <member name="P:Email.Net.Common.MailMessage.Header">
            <summary>
            A MIME-header of the message received from the server
            </summary>
        </member>
        <member name="F:Email.Net.Common.StructuredMessage._rootPart">
            <summary>
            the child part of the given message
            </summary>
        </member>
        <member name="M:Email.Net.Common.StructuredMessage.FillText">
            <summary>
            Populates <see cref="P:Email.Net.Common.MailMessage.Text"/> and 
            <see cref="P:Email.Net.Common.MailMessage.PlainText"/> properties 
            and sets <see cref="P:Email.Net.Common.MailMessage.TextContentType"/> property 
            of the message
            </summary>
        </member>
        <member name="M:Email.Net.Common.StructuredMessage.GetPlainText(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Returns a plain text of the message
            </summary>
            <param name="node">A message part to start from</param>
            <returns>A text or null</returns>
        </member>
        <member name="M:Email.Net.Common.StructuredMessage.GetHtmlText(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Returns a html text of the message
            </summary>
            <param name="node">A message part to start from</param>
            <returns>A text or null</returns>
        </member>
        <member name="P:Email.Net.Common.StructuredMessage.RootPart">
            <summary>
            Gets the child part of the given message
            </summary>
        </member>
        <member name="T:Email.Net.Common.BoundaryChecker">
            <summary>
             Provides a functionality to check line of message for a boundary
            </summary>
        </member>
        <member name="M:Email.Net.Common.BoundaryChecker.CheckBoundary(System.Byte[],System.String)">
            <summary>
            Check whether the given line is boundary and returns boundary type
            </summary>
            <param name="line">Line to check</param>
            <param name="boundary">Boundary to compare</param>
            <returns>Type of the boundary</returns>
        </member>
        <member name="T:Email.Net.Common.Collections.AttachmentCollection">
            <summary>
            Collection of attachments
            </summary>
        </member>
        <member name="F:Email.Net.Common.Collections.AttachmentCollection._attachments">
            <summary>
            Internal collection list of attachments
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.AttachmentCollection.Add(Email.Net.Common.MessageParts.Attachment)">
            <summary>
            Adds the specified <paramref name="attachment"/> to the collection
            </summary>
            <param name="attachment">Attachment to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.AttachmentCollection.AddRange(System.Collections.Generic.IEnumerable{Email.Net.Common.MessageParts.Attachment})">
            <summary>
            /// Adds a collection (a range of attachments) into the given one
            </summary>
            <param name="attachments">Collection to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.AttachmentCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.AttachmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Email.Net.Common.Collections.AttachmentCollection.Count">
            <summary>
            Gets the quantity of attachments in the collection
            </summary>
        </member>
        <member name="P:Email.Net.Common.Collections.AttachmentCollection.Item(System.Int32)">
            <summary>
            Gets and sets an attachment by its index in the collection
            </summary>
            <param name="index">Index specifying the attachment</param>
            <returns>Specified attachment</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when <paramref name="index"/> is outside the bounds of 
            the collection</exception>
            <exception cref="T:System.ArgumentNullException">
            Value cannot be null
            </exception>
        </member>
        <member name="T:Email.Net.Common.Collections.AttributesDictionary">
            <summary>
            Attribute dictionary class
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010</modify>
        </member>
        <member name="M:Email.Net.Common.Collections.AttributesDictionary.Add(System.String,System.String)">
            <summary>
            Add attribute to dictionary
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.AttributesDictionary.SmartAdd(System.String,System.String)">
            <summary>
            "Smart" add attribute to dictionary (with checking of exists attribute with this key)
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <returns>returs true if attribute successfuly added</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.AttributesDictionary.ContainsKey(System.String)">
            <summary>
            Check exists of attribute this key
            </summary>
            <param name="key">key</param>
            <returns>true is attribute exsist</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Collections.AttributesDictionary.Item(System.String)">
            <summary>
            Getattribute value by key
            </summary>
            <param name="key">key</param>
            <returns>value of attribute</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Common.Collections.DictionaryExtenders">
            <summary>
            Additional methods for <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>19.05.2010</modify>
        </member>
        <member name="M:Email.Net.Common.Collections.DictionaryExtenders.SmartAdd(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Smart addition to the dictionary (doesn’t add an item if the dictionary already contains an item with the 
            same key)
            </summary>
            <param name="dic">Dictionary which the item &lt;<paramref name="key"/>, <paramref name="value"/>&gt; is 
            being added to</param>
            <param name="key">Key of the item being added</param>
            <param name="value">Value of the item being added</param>
            <returns><b>true</b> if the item was added successfully; and <b>false</b>, if not</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.DictionaryExtenders.SmartAdd(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Smart addition to the dictionary (doesn’t add an item if the dictionary already contains an item with the 
            same key)
            </summary>
            <param name="dic">Dictionary which items of another dictionary are being added to</param>
            <param name="value">Dictionary which items of are being added</param>
            <returns><b>true</b> if all the items of dictionary <paramref name="value"/> were added successfully; 
            <b>false</b>, if not</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Common.Collections.EmailAddressCollection">
            <summary>
            Represents a collection of e-mail addresses
            </summary>
        </member>
        <member name="F:Email.Net.Common.Collections.EmailAddressCollection._collection">
            <summary>
            An internal storage for the e-mail addresses in the collection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.Init">
            <summary>
            Initializes an empty collection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.Collections.EmailAddressCollection"/> object with an empty collection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.#ctor(System.Collections.Generic.IEnumerable{Email.Net.Common.EmailAddress})">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.Collections.EmailAddressCollection"/> object with the specified collection
            </summary>
            <param name="source">Collection that will be copied into the being created object</param>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.Add(Email.Net.Common.EmailAddress)">
            <summary>
            Adds a new address into collection
            </summary>
            <param name="address">Address to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.AddRange(System.Collections.Generic.IEnumerable{Email.Net.Common.EmailAddress})">
            <summary>
            Adds a collection (a range of addresses) into the given one
            </summary>
            <param name="addresses">Collection of the addresses to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.EmailAddressCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Email.Net.Common.Collections.EmailAddressCollection.Item(System.Int32)">
            <summary>
            Gets and sets an address by its index in the collection
            </summary>
            <param name="Index">Index specifying the address</param>
            <returns>Specified address</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when <paramref name="Index"/> is outside the bounds of 
            the collection</exception>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Collections.EmailAddressCollection.Count">
            <summary>
            Gets the count of items (addresses) in the collection
            </summary>
        </member>
        <member name="F:Email.Net.Common.Collections.ExtraHeadersDictionary._innerDictionary">
            <summary>
            An inner dictionary to store key-value pairs
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.#ctor">
            <summary>
             Creates a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.Add(System.String,System.String)">
            <summary>
            Add new header
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <exception cref="T:System.ArgumentException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.
                            </param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.SmartAdd(System.String,System.String)">
            <summary>
            "Smart" adding new header (with checking of exists header this this key)
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <returns>return true on successfull adding</returns>
            <exception cref="T:System.ArgumentException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
            -or- <paramref name="arrayIndex"/> is equal to or greater than the length 
            of <paramref name="array"/>. 
            -or- The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> 
            is greater than the available space from <paramref name="arrayIndex"/> to the 
            end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Email.Net.Common.Collections.ExtraHeadersDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:Email.Net.Common.Collections.ExtraHeadersDictionary.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="P:Email.Net.Common.Collections.ExtraHeadersDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Email.Net.Common.Collections.ExtraHeadersDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Email.Net.Common.Collections.ExtraHeadersDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Email.Net.Common.Collections.ExtraHeadersDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Email.Net.Common.Collections.PartCollection">
            <summary>
            Collection of message parts (which implement interface <see cref="T:Email.Net.Common.MessageParts.IPart"/>)
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>19.05.2010</modify>
        </member>
        <member name="F:Email.Net.Common.Collections.PartCollection._collection">
            <summary>
            List of message parts
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.Init">
            <summary>
            Initializes the object creating an empty list of message parts
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.#ctor">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Common.Collections.PartCollection"/> with an empty collection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.#ctor(System.Collections.Generic.IEnumerable{Email.Net.Common.MessageParts.IPart})">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Common.Collections.PartCollection"/> with the specified collection 
            <paramref name="source"/>
            </summary>
            <param name="source">Collection that will be copied into the being created object</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.Add(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Adds a message part into collection
            </summary>
            <param name="part">Message part to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.AddRange(System.Collections.Generic.IEnumerable{Email.Net.Common.MessageParts.IPart})">
            <summary>
            Adds a collection (a range of message parts) into the given one
            </summary>
            <param name="parts">Collection to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.PartCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Email.Net.Common.Collections.PartCollection.Item(System.Int32)">
            <summary>
            Gets and sets a message part by its index in the collection
            </summary>
            <param name="Index">Index specifying the message part</param>
            <returns>Specified message part</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when <paramref name="Index"/> is outside the bounds of 
            the collection</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Collections.PartCollection.Count">
            <summary>
            Gets the count of items (message parts) in the collection
            </summary>
        </member>
        <member name="T:Email.Net.Common.Collections.Rfc822MessageCollection">
            <summary>
            Collection of messages (<see cref="T:Email.Net.Common.Rfc822Message"/>)
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>28.05.2010</modify>
        </member>
        <member name="F:Email.Net.Common.Collections.Rfc822MessageCollection._collection">
            <summary>
            List of message parts
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.Init">
            <summary>
            Initializes the object creating an empty list of message parts
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.#ctor">
            <summary>
            Initializes a new object with an empty collection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.#ctor(System.Collections.Generic.IEnumerable{Email.Net.Common.Rfc822Message})">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Common.Collections.Rfc822MessageCollection"/> with the specified collection 
            <paramref name="source"/>
            </summary>
            <param name="source">Collection that will be copied into the being created object</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.Add(Email.Net.Common.Rfc822Message)">
            <summary>
            Adds a message into collection
            </summary>
            <param name="part">Message to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.AddRange(System.Collections.Generic.IEnumerable{Email.Net.Common.Rfc822Message})">
            <summary>
            Adds a collection (a range of message) into the given one
            </summary>
            <param name="parts">Collection to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Email.Net.Common.Collections.Rfc822MessageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Email.Net.Common.Collections.Rfc822MessageCollection.Item(System.Int32)">
            <summary>
            Gets and sets a message by its index in the collection
            </summary>
            <param name="index">Index specifying the message</param>
            <returns>Specified message</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when <paramref name="index"/> is outside the bounds of 
            the collection</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Collections.Rfc822MessageCollection.Count">
            <summary>
            Gets the count of items (message) in the collection
            </summary>
        </member>
        <member name="T:Email.Net.Common.Configurations.CodeConfigurationProvider">
            <summary>
            Class provides the configuration parameters defined directly in the code
            </summary>
        </member>
        <member name="T:Email.Net.Common.Configurations.IConfigurationProvider">
            <summary>
            Interface for a configuration provider
            that provides condifuration parameters to the mail client classes
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.Host">
            <summary>
            Hostname to connect to
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.Port">
            <summary>
            TCP-port to use
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.SSLInteractionType">
            <summary>
            Specifies using TLS/SSL during the connection
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.AuthenticationType">
            <summary>
            Type of authentication to use
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.ProxyHost">
            <summary>
            Hostname of the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.ProxyPort">
            <summary>
            TCP port of the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.ProxyType">
            <summary>
            Type of the proxy server to use
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.ProxyUser">
            <summary>
            Username to authenticate on the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.ProxyPassword">
            <summary>
            Password to authenticate in the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.SendTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while sending packets to the server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.ReceiveTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while receiving packets from the server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.IConfigurationProvider.AttachmentDirectory">
            <summary>
            Directory for the attachments
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultTimeout">
            <summary>
            Specifies a default timeout value in milliseconds for network operations
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultProxyHost">
            <summary>
            Specifies a default proxy hostname
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultProxyPort">
            <summary>
            Specifies a default proxy port number
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultProxyType">
            <summary>
            Specifies a default proxy type
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultInteractionType">
            <summary>
            Specifies a default way of using SSL
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultAuthenticationType">
            <summary>
            Specifies a default type of the authentication
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider.DefaultAttachmentDirectory">
            <summary>
            Specifies a default filesystem path for saving attachments
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._host">
            <summary>
            A hostname for <see cref="P:Email.Net.Common.Configurations.CodeConfigurationProvider.Host"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._port">
            <summary>
            TCP port to use
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._sslInteractionType">
            <summary>
            Specifies using TLS/SSL during the connection
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._authenticationType">
            <summary>
            Type of authentication to use
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._sendTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while sending packets to the server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._receiveTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while receiving packets from the server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._attachmentDirectory">
            <summary>
            Directory for the attachments
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._proxyPort">
            <summary>
            TCP port of the proxy server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._proxyType">
            <summary>
            Type of the proxy server to use
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._proxyHost">
            <summary>
            An internal field for <see cref="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyHost"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._proxyUser">
            <summary>
            An internal field for <see cref="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyUser"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.CodeConfigurationProvider._proxyPassword">
            <summary>
            An internal field for <see cref="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyPassword"/> property
            </summary>
        </member>
        <member name="M:Email.Net.Common.Configurations.CodeConfigurationProvider.#ctor(System.String,System.UInt16,Email.Net.Common.Configurations.EInteractionType,Email.Net.Common.Configurations.EAuthenticationType,System.Int32,System.Int32)">
            <summary>
            Constructor initializing internal data structures
            </summary>
            <param name="host">The host name of the server</param>
            <param name="port">Number of the TCP port to connect to</param>
            <param name="interactionType">Specifies the way of using SSL during the connection process</param>
            <param name="authenticationType">Authentication mechanism to use</param>
            <param name="sendTimeOut">Specifies a timeout for sending operations</param>
            <param name="recieveTimeOut">Specifies a timeout for receiving operations</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Neither sendTimeOut nor receiveTimeOut can be negative</exception>
        </member>
        <member name="M:Email.Net.Common.Configurations.CodeConfigurationProvider.#ctor(System.String,System.UInt16,Email.Net.Common.Configurations.EInteractionType,Email.Net.Common.Configurations.EAuthenticationType)">
            <summary>
            Constructor initializing internal data structures
            </summary>
            <param name="host">The host name of the server</param>
            <param name="port">Number of the TCP port to connect to</param>
            <param name="interactionType">Specifies the way of using SSL during the connection process</param>
            <param name="authenticationType">Authentication mechanism to use</param>
        </member>
        <member name="M:Email.Net.Common.Configurations.CodeConfigurationProvider.#ctor(System.String,System.UInt16)">
            <summary>
            Constructor initializing internal data structures
            </summary>
            <param name="host">The host name of the server</param>
            <param name="port">Number of the TCP port to connect to</param>
        </member>
        <member name="M:Email.Net.Common.Configurations.CodeConfigurationProvider.Init(System.String,System.UInt16,Email.Net.Common.Configurations.EInteractionType,Email.Net.Common.Configurations.EAuthenticationType,System.Int32,System.Int32)">
            <summary>
            Initializes internal data structures themselves
            </summary>
            <param name="host">The host name of the server</param>
            <param name="port">Number of the TCP port to connect to</param>
            <param name="interactionType">Specifies the way of using SSL during the connection process</param>
            <param name="authenticationType">Authentication mechanism to use</param>
            <param name="sendTimeOut">Specifies a timeout for sending operations</param>
            <param name="receiveTimeOut">Specifies a timeout for receiving operations</param>
            <exception cref="T:System.ArgumentNullException">The host parameter cannot be null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Neither sendTimeOut nor receiveTimeOut can be negative</exception>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.Host">
            <summary>
            Hostname to connect to
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.Port">
            <summary>
            TCP port to use
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.SSLInteractionType">
            <summary>
            Specifies using TLS/SSL during the connection
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.AuthenticationType">
            <summary>
            Type of authentication to use
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.SendTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while sending packets to the server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ReceiveTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while receiving packets from the server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.AttachmentDirectory">
            <summary>
            Directory for the attachments
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyHost">
            <summary>
            Hostname of the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyPort">
            <summary>
            TCP port of the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyType">
            <summary>
            Type of the proxy server to use
            </summary>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyUser">
            <summary>
            Username to authenticate to the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.Configurations.CodeConfigurationProvider.ProxyPassword">
            <summary>
            Password to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="T:Email.Net.Common.Configurations.EAuthenticationType">
            <summary>
            Enumerates authentication types
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EAuthenticationType.None">
            <summary>
            No autentification
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EAuthenticationType.Auto">
            <summary>
            Chosen automatically
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EAuthenticationType.Plain">
            <summary>
            Use PLAIN mechanism of authentication
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EAuthenticationType.CramMD5">
            <summary>
            Use CRAM-MD5 mechanism of authentication
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EAuthenticationType.DigestMD5">
            <summary>
            Use DIGEST-MD5 method of authentication
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EAuthenticationType.Login">
            <summary>
            Use LOGIN method of authentication
            </summary>
        </member>
        <member name="T:Email.Net.Common.Configurations.EInteractionType">
            <summary>
            Enumerates ways of using SSL/TLS during the interaction with server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EInteractionType.Plain">
            <summary>
            With a plain-text
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EInteractionType.SSLPort">
            <summary>
            Initialize SSL when starting a connection
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EInteractionType.StartTLS">
            <summary>
            Switch to SSL during a connection
            </summary>
        </member>
        <member name="T:Email.Net.Common.Configurations.EProxyType">
            <summary>
            Enumerates proxy-server types
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EProxyType.No">
            <summary>
            Without a proxy-server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EProxyType.SOCKS5">
            <summary>
            SOCKS5 proxy-server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EProxyType.SOCKS4">
            <summary>
            SOCKS4 proxy-server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Configurations.EProxyType.HTTP">
            <summary>
            HTTP proxy-server
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.BaseConnection">
            <summary>
            Abstract base class for connections. Provides basic common functionality for interacting with servers through 
            a network connection
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.IConnection">
            <summary>
            Base interface for connections
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.Open">
            <summary>
            Establishes the underlying connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.SendLine(System.String)">
            <summary>
            Sends a text line to the server using the underlying connection
            </summary>
            <param name="textLine">Line to send</param>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.ReceiveLine">
            <summary>
            Recieves a text line (up to the first end-line character) from the server using the underlying connection
            </summary>
            <returns>Received text line up to the first end-line character excluding it</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.ReceiveBytes(System.UInt64)">
            <summary>
            Receives given number of bytes from connection and return array of bytes
            </summary>
            <param name="count">Number of bytes to receive</param>
            <returns>Array of received bytes</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.ReceiveBytes">
            <summary>
            Receives bytes from connection to the end of line
            </summary>
            <returns>Array of received bytes</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.Close">
            <summary>
            Closes the underlying connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.SwitchToSslChannel">
            <summary>
            Establishes an SSL connection using the existing opened underlying connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.Available">
            <summary>
            Get the anount of data that has been recieved from the network
            and is available to read
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnection.CanRead(System.Int32)">
            <summary>
            Determines whether data to read exist
            </summary>
            <param name="delay">Delay in microseconds</param>
            <returns>True, if socket contains data, otherwise - false</returns>
        </member>
        <member name="P:Email.Net.Common.Connections.IConnection.State">
            <summary>
            State of the connection
            </summary>
        </member>
        <member name="P:Email.Net.Common.Connections.IConnection.ConfigurationProvider">
            <summary>
            Provider of configuration to use
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.BaseConnection._stream">
            <summary>
            A <see cref="T:System.IO.Stream"/> object to use
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.BaseConnection._configurationProvider">
            <summary>
            Configuration provider to use 
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.BaseConnection._state">
            <summary>
            State of the connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.CanRead(System.Int32)">
            <summary>
            Determines whether data to read exist
            </summary>
            <param name="delay">Delay in microseconds</param>
            <returns>True, if socket contains data, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.Open">
            <summary>
            Opens a connection and instantiates an internal stream
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.Available">
            <summary>
            Get the anount of data that has been recieved from the network
            and is available to read
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.SendLine(System.String)">
            <summary>
            Sends the provided text line to a server using ASCII encoding. The endline symbol will be added by this 
            method automatically
            </summary>
            <param name="textLine">Line to send</param>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.ReceiveLine">
            <summary>
            Receives bytes from a server until an end-line symbol occurs. It is assumed that the received byte stream is 
            in ASCII encoding
            </summary>
            <returns>Received text line up to the first end-line character excluding it</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.ReceiveBytes(System.UInt64)">
            <summary>
            Receives given number of bytes from connection and return array of bytes
            </summary>
            <param name="count">Number of bytes to receive</param>
            <returns>Array of received bytes</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.ReceiveBytes">
            <summary>
            Receives bytes from connection to the end of line
            </summary>
            <returns>Array of received bytes</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.Close">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.SwitchToSslChannel">
            <summary>
            Initiates an SSL tunnel using the existing connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.DefaultRemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            A stub method for the starting ssl process
            </summary>
            <param name="sender">An object that contains state information for this validation</param>
            <param name="certificate">The certificate used to authenticate the remote party</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate</param>
            <returns>True, if the incoming certificate is valid</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.BaseConnection.Dispose">
            <summary>
            Closes the opened connection and disposes the given object
            </summary>
        </member>
        <member name="P:Email.Net.Common.Connections.BaseConnection.ConfigurationProvider">
            <summary>
            Configuration provider to use 
            </summary>
        </member>
        <member name="P:Email.Net.Common.Connections.BaseConnection.State">
            <summary>
            State of the connection
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.ConnectionFactory">
            <summary>
            This class implements pattern Abstract Factory for obtaining connection objects
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.IConnectionFactory">
            <summary>
            An interface for the Abstract Factory pattern implementation for obtaining connection objects
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.IConnectionFactory.GetConnection(Email.Net.Common.Configurations.IConfigurationProvider)">
            <summary>
            Returns an object, that implements <seealso cref="T:Email.Net.Common.Connections.IConnection"/>, according to the settings provided with configurationProvider
            </summary>
            <param name="configurationProvider">Settings for connection</param>
            <returns>A connection object</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.ConnectionFactory.GetConnection(Email.Net.Common.Configurations.IConfigurationProvider)">
            <summary>
            Returns an object, that implements <seealso cref="T:Email.Net.Common.Connections.IConnection"/>, according to the settings provided with configurationProvider
            </summary>
            <param name="configurationProvider">Settings for connection</param>
            <returns>A connection object</returns>
        </member>
        <member name="T:Email.Net.Common.Connections.DirectConnection">
            <summary>
            Encapsulates a direct connection (without proxy servers etc.)
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.DirectConnection._client">
            <summary>
            A <see cref="T:System.Net.Sockets.TcpClient"/> object to use
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.DirectConnection.#ctor(Email.Net.Common.Configurations.IConfigurationProvider)">
            <summary>
            Initializes a new object of DirectConnection class using the provided configuration
            </summary>
            <param name="configurationProvider">Provider of the configuration, that supplies parameters of connection</param>
        </member>
        <member name="M:Email.Net.Common.Connections.DirectConnection.CanRead(System.Int32)">
            <summary>
            Determines whether data to read exist
            </summary>
            <param name="delay">Delay in microseconds</param>
            <returns>True, if socket contains data, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.DirectConnection.Open">
            <summary>
            Opens connection with the server specified by Host and Port parameters of the being used configuration 
            provider
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.DirectConnection.Close">
            <summary>
            Closes the opened connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.DirectConnection.Available">
            <summary>
            Get the anount of data that has been recieved from the network
            and is available to read
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="P:Email.Net.Common.Connections.DirectConnection.ConfigurationProvider">
            <summary>
            Returns the configuration provider being used currently
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.HttpProxyConnection">
            <summary>
            /// <summary>
            Encapsulates a connection that uses a HTTP proxy
            </summary>
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.InvalidProxyTypeMessage">
            <summary>
            A message to use for the exception if the UseProxy field is not valid
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.NullUserIDMessage">
            <summary>
            A message to use when throwing an exception if the userID field of the IConfigurationProvider object is null
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.AccessDenidedByHttpProxyMessage">
            <summary>
            A message to use for the exception if the proxy server denied access to the requested server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.ProxyErrorMessage">
            <summary>
            A message to use for the exception if proxy return bad response
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.BufferSize">
            <summary>
            Size of the temporary buffers
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.ProxyAuthenticationRequiredCode">
            <summary>
            code for Proxy Authentication Requred response 
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.ProxyUnauthorizedCode">
            <summary>
            code for Proxy Unauthorize reponse
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.ProxyOKCode">
            <summary>
            code for OK response
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection.DefaultEncoding">
            <summary>
            Default encoding
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection._socket">
            <summary>
            A socket to use for exchanging data with a proxy
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.HttpProxyConnection._isHTTP1_1">
            <summary>
            flag, which indicate using http 1.1
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.HttpProxyConnection.#ctor(Email.Net.Common.Configurations.IConfigurationProvider)">
            <summary>
            Initializes a new connection object with the provided parameters
            </summary>
            <param name="configurationProvider">Provider of configuration to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the parameters is null</exception>
        </member>
        <member name="M:Email.Net.Common.Connections.HttpProxyConnection.CanRead(System.Int32)">
            <summary>
            Determines whether data to read exist
            </summary>
            <param name="delay">Delay in microseconds</param>
            <returns>True, if socket contains data, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.HttpProxyConnection.Open">
            <summary>
            Opens a connection and instantiates an internal stream
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.HttpProxyConnection.Close">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.HttpProxyConnection.Available">
            <summary>
            Get the anount of data that has been recieved from the network
            and is available to read
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.HttpProxyConnection.SwitchToSslChannel">
            <summary>
            Initiates an SSL tunnel using the existing connection
            </summary>
        </member>
        <member name="P:Email.Net.Common.Connections.HttpProxyConnection.HTTP1_1">
            <summary>
            Get or set flag, which indicate using http 1.1
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.Socks4ProxyConnection">
            <summary>
            Encapsulates a connection that uses a SOCKS4 proxy
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.NullUserIDMessage">
            <summary>
            A message to use when throwing an exception if the userID field of the IConfigurationProvider object is null
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.InvalidProxyTypeMessage">
            <summary>
            A message to use for the exception if the UseProxy field is not valid
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.IPv6NotSupportedMessage">
            <summary>
            A message to use for the exception if a user tried to use IPv6 that is not supported
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.InvalidResponseLengthMessage">
            <summary>
            A message to use for the exception if the recieved message from proxy has invalid length
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.InvalidSocks4ResponseMessage">
            <summary>
            A message to use for the exception if the recieved message from proxy is not properly formatted
            </summary>		
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.AccessDeniedBySocks4ProxyMessage">
            <summary>
            A message to use for the exception if the proxy server denied access to the requested server
            </summary>		
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection.BufferSize">
            <summary>
            Size of the temporary buffers
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks4ProxyConnection._socket">
            <summary>
            A socket to use for exchanging data with a proxy
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks4ProxyConnection.#ctor(Email.Net.Common.Configurations.IConfigurationProvider)">
            <summary>
            Initializes a new connection object with the provided parameters
            </summary>
            <param name="configurationProvider">Provider of configuration to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown when one of the parameters is null</exception>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks4ProxyConnection.CanRead(System.Int32)">
            <summary>
            Determines whether data to read exist
            </summary>
            <param name="delay">Delay in microseconds</param>
            <returns>True, if socket contains data, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks4ProxyConnection.Open">
            <summary>
            Opens a connection with the proxy server, performs authentication process, and starts relaying to the 
            specified host
            </summary>
            <exception cref="T:System.InvalidOperationException">The configurationProvider specifies either not to use proxy or 
            an invalid type of proxy</exception>
            <exception cref="T:System.ArgumentNullException">Neither ProxyUsername nor ProxyPassword can be null</exception>
            <exception cref="T:Email.Net.Common.Exceptions.ConnectionException">An error happened during the interaction with a proxy server</exception>
            <exception cref="T:System.NotSupportedException">IPv6-only hosts isn't supported by SOCKS4 proxies</exception>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks4ProxyConnection.Close">
            <summary>
            Closes the given connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks4ProxyConnection.Available">
            <summary>
            Get the anount of data that has been recieved from the network
            and is available to read
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="P:Email.Net.Common.Connections.Socks4ProxyConnection.CredentialsEncoding">
            <summary>
            Returns encoding to use for transferring credentials to the proxy server
            </summary>
        </member>
        <member name="T:Email.Net.Common.Connections.Socks5ProxyConnection">
            <summary>
            Encapsulates a connection that uses SOCKS5 proxy
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.NullProxyUsernameMessage">
            <summary>
            A message to use when throwing an exception if the proxyUsername field is null
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.NullProxyPasswordMessage">
            <summary>
            A message to use for the exception if the proxyPassword field is null
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.InvalidUseProxyValueMessage">
            <summary>
            A message to use for the exception if the UseProxy field is not valid
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.InvalidProxyTypeMessage">
            <summary>
            A message to use for the exception if a type of the proxy is not valid
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.AuthorizationMethodNotSupportedMessage">
            <summary>
            A message to use for the exception if the implemented authorization methods are not supported by the server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.InvalidResponseMessage">
            <summary>
            A message to use for the exception if the recieved message from proxy is not properly formatted
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.InvalidCredentialsMessage">
            <summary>
            A message to use for the exception if the provided credentials was not accepted by the server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.IpV6NotSupportedMessage">
            <summary>
            A message to use for the exception if a user tried to use IPv6 that is not supported
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection.BufferSize">
            <summary>
            Size of the temporary buffers
            </summary>
        </member>
        <member name="F:Email.Net.Common.Connections.Socks5ProxyConnection._socket">
            <summary>
            A socket to use for exchanging data with a proxy
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks5ProxyConnection.#ctor(Email.Net.Common.Configurations.IConfigurationProvider)">
            <summary>
            Initializes a new SOCKS5 proxy connection object
            </summary>
            <param name="configurationProvider">Provider of configuration</param>
            <exception cref="T:System.ArgumentNullException">One of the parameter is null</exception>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks5ProxyConnection.CanRead(System.Int32)">
            <summary>
            Determines whether data to read exist
            </summary>
            <param name="delay">Delay in microseconds</param>
            <returns>True, if socket contains data, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks5ProxyConnection.Open">
            <summary>
            Opens the connection with the server, performing a required interaction with the proxy server
            </summary>
            <exception cref="T:Email.Net.Common.Exceptions.ConnectionException">Thrown out when any error during the interaction with the proxy server 
            occurs</exception>
            <exception cref="T:System.ArgumentNullException">Neither ProxyUsername nor ProxyPassword can be null</exception>
            <exception cref="T:System.InvalidOperationException">The configurationProvider specifies either not to use proxy or 
            an invalid type of proxy</exception>
            <exception cref="T:Email.Net.Common.Exceptions.ConnectionException">An error happened during the interaction with a proxy server</exception>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks5ProxyConnection.Close">
            <summary>
            Closes the connection
            </summary>
        </member>
        <member name="M:Email.Net.Common.Connections.Socks5ProxyConnection.Available">
            <summary>
            Get the anount of data that has been recieved from the network
            and is available to read
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="P:Email.Net.Common.Connections.Socks5ProxyConnection.CredentialsEncoding">
            <summary>
            Returns encoding used for transfer credentials to the proxy server
            </summary>
        </member>
        <member name="T:Email.Net.Common.Constants">
            <summary>
            Set of the string constants used in other assemblies
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.PopSALSContinue">
            <summary>
            Beginning of succes response from a POP3-server in SASL extenstion
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.EndLine">
            <summary>
            End-line string specified in RFC
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.MimeDelimiter">
            <summary>
            Folding string
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.NullByte">
            <summary>
            String termination character
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.PopOK">
            <summary>
            Beginning of a successful response from a POP3-server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.PopERR">
            <summary>
            Beginning of a non-successful response from a POP3-server
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.PopHeaderEnd">
            <summary>
            Indicator of the message headers block end
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.PopMessageEnd">
            <summary>
            Indicator of the message body end
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.PopRetrMessageEnd">
            <summary>
            Indicator of the message end in command RETR
            </summary>
        </member>
        <member name="F:Email.Net.Common.Constants.RegEmail">
            <summary>
            Regular expression for checking e-mail address
            </summary>
        </member>
        <member name="T:Email.Net.Common.ContentDisposition">
            <summary>
            Represents a content disposition for a message part
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010</modify>
        </member>
        <member name="F:Email.Net.Common.ContentDisposition._disposition">
            <summary>
            the disposition of the message part
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentDisposition._attributes">
            <summary>
            Specifies the attributes of content disposition
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentDisposition.#ctor">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.ContentDisposition"/> object (attributes dictionary is being set to empty)
            </summary>
        </member>
        <member name="P:Email.Net.Common.ContentDisposition.Disposition">
            <summary>
            Gets and sets the disposition of the message part
            </summary>
        </member>
        <member name="P:Email.Net.Common.ContentDisposition.Attributes">
            <summary>
            Specifies the attributes of content disposition
            </summary>
        </member>
        <member name="T:Email.Net.Common.ContentType">
            <summary>
            Content type of a <see cref="T:Email.Net.Common.MessageParts.IPart">message part</see>
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>19.05.2010
            </modify>
        </member>
        <member name="F:Email.Net.Common.ContentType._type">
            <summary>
            Specifies the name of the type
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentType._subType">
            <summary>
            Specifies the name of the subtype (commonly, a file type or an extension if the content is a file)
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentType._attributes">
            <summary>
            Specifies the content type attributes
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentType.#ctor">
            <summary>
            Default constructor, creates a content with <see cref="P:Email.Net.Common.ContentType.Type"/> = <b>"text"</b>, <see cref="P:Email.Net.Common.ContentType.SubType"/> = 
            <b>"plain"</b>
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Email.Net.Common.ContentType"/>, specifying <see cref="P:Email.Net.Common.ContentType.Type"/> with parameter 
            <paramref name="type"/> and <see cref="P:Email.Net.Common.ContentType.SubType"/> with parameter <paramref name="subType"/>
            </summary>
            <param name="type">Content type</param>
            <param name="subType">Content subtype</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
            <exception cref="T:System.ArgumentException">Parameters must be valid content types and subtypes</exception>
        </member>
        <member name="M:Email.Net.Common.ContentType.ToString">
            <summary>
            Converts the given ContentType object to a string
            </summary>
            <returns>A string representation for ContentType, containing <see cref="P:Email.Net.Common.ContentType.Type"/> and <see cref="P:Email.Net.Common.ContentType.SubType"/>, 
            separated by slash <b>"/"</b></returns>
        </member>
        <member name="M:Email.Net.Common.ContentType.IsValidType(System.String)">
            <summary>
            Checks if the given string contains a valid MIME type of a content
            </summary>
            <param name="type">A source string which should be checked</param>
            <returns>true if the source string contains only valid 
            characters and false otherwise</returns>
        </member>
        <member name="M:Email.Net.Common.ContentType.CompareTo(System.Object)">
            <summary>
            Implements comparison of the given ContentType object with the parameter of the method
            </summary>
            <param name="obj">The object which the given one is being compared to</param>
            <remarks>Two ContentType object are equal if their <see cref="P:Email.Net.Common.ContentType.Type"/> and <see cref="P:Email.Net.Common.ContentType.SubType"/> are equal 
            correspondingly</remarks>
            <returns>Comparison result:
            <list type="bullet">
            <item><description>&lt; 0 - the given one is less than <paramref name="obj"/></description></item>
            <item><description>= 0 - the given one is equal to <paramref name="obj"/></description></item>
            <item><description>&gt; 0 - the given one is greater than <paramref name="obj"/></description></item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException">Raised when parameter <paramref name="obj"/> is null</exception>
            <exception cref="T:System.InvalidCastException">Raised when parameter <paramref name="obj"/> is not a ContentType or can not be casted</exception>
        </member>
        <member name="P:Email.Net.Common.ContentType.Type">
            <summary>
            Specifies the name of the type
            </summary>
        </member>
        <member name="P:Email.Net.Common.ContentType.SubType">
            <summary>
            Specifies the name of the subtype (commonly, a file type or an extension if the content is a file)
            </summary>
        </member>
        <member name="P:Email.Net.Common.ContentType.Attributes">
            <summary>
            Specifies the content type attributes
            </summary>
        </member>
        <member name="T:Email.Net.Common.ContentWriters.FileContentWriter">
            <summary>
            Provides functionality for writing content to a file
            </summary>
        </member>
        <member name="T:Email.Net.Common.ContentWriters.IContentWriter">
            <summary>
            Abstracts an interface to objects that write some content to some storage
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.IContentWriter.Open">
            <summary>
            Opens writer object and allows client code to write content
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.IContentWriter.Close">
            <summary>
            Closes writer object
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.IContentWriter.Write(System.Byte[])">
            <summary>
            Writes provided data to storage
            </summary>
            <param name="data">Data to write</param>
        </member>
        <member name="F:Email.Net.Common.ContentWriters.FileContentWriter._exWriterMustBeOpened">
            <summary>
            Message for <see cref="T:System.InvalidOperationException"/> that is thrown when a client tries to write to the closed writer
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentWriters.FileContentWriter._filename">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.ContentWriters.FileContentWriter.Filename"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentWriters.FileContentWriter._attachmentDirectory">
            <summary>
            Directory path where content is saved
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentWriters.FileContentWriter._fileStream">
            <summary>
            Stream that is used to write data
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.FileContentWriter.#ctor(System.String)">
            <summary>
            Initializes a new object with given attachmentDirectory
            </summary>
            <param name="attachmentDirectory">Directory path where content is saved</param>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.FileContentWriter.Close">
            <summary>
            Closes writer object
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.FileContentWriter.Open">
            <summary>
            Opens writer and allows client to write content to the storage
            </summary>
            <remarks>Resets a value of the Size property</remarks>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.FileContentWriter.Write(System.Byte[])">
            <summary>
            Writes provided data to file
            </summary>
            <param name="data">Data to write</param>
            <remarks>Changes a value of the Size property</remarks>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.FileContentWriter.GetRandomFilename">
            <summary>
            Returns random file name to save data to
            </summary>
            <returns></returns>
        </member>
        <member name="P:Email.Net.Common.ContentWriters.FileContentWriter.Filename">
            <summary>
            Gets name of the file
            </summary>
        </member>
        <member name="P:Email.Net.Common.ContentWriters.FileContentWriter.Size">
            <summary>
            The size of a data sequence written on the disk.
            </summary>
        </member>
        <member name="T:Email.Net.Common.ContentWriters.StringContentWriter">
            <summary>
            Provides functionality to write data to strings unsing various charsets
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentWriters.StringContentWriter._text">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.ContentWriters.StringContentWriter.Text"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.ContentWriters.StringContentWriter._encoding">
            <summary>
            Encoding of the string storage
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.StringContentWriter.#ctor(System.String)">
            <summary>
            Initializes a new object using provided charset
            </summary>
            <param name="charset">Character set to use</param>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.StringContentWriter.Open">
            <summary>
            Opens writer and allows client to write content to the storage
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.StringContentWriter.Close">
            <summary>
            Closes writer object
            </summary>
        </member>
        <member name="M:Email.Net.Common.ContentWriters.StringContentWriter.Write(System.Byte[])">
            <summary>
            Writes provided data to storage
            </summary>
            <param name="data">Data to write</param>
        </member>
        <member name="P:Email.Net.Common.ContentWriters.StringContentWriter.Text">
            <summary>
            Gets the resulting text that has been written
            </summary>
        </member>
        <member name="T:Email.Net.Common.DateTimeOffset">
            <summary>
            Represents a point in time, typically expressed as a date and time of day,
            relative to Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="F:Email.Net.Common.DateTimeOffset._dateTime">
            <summary>
            Date and time
            </summary>
        </member>
        <member name="F:Email.Net.Common.DateTimeOffset._offset">
            <summary>
            Offset from UTC
            </summary>
        </member>
        <member name="M:Email.Net.Common.DateTimeOffset.ValidateOffset(System.TimeSpan)">
            <summary>
            Offset from UTC validator
            </summary>
            <param name="value">Value to check</param>
            <returns>Checked value</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Cheking value is not in range from DateTimeOffset.MinOffset to DateTimeOffset.MaxOffset</exception>
        </member>
        <member name="F:Email.Net.Common.DateTimeOffset.MaxOffset">
            <summary>
            Maximum value of time zone offset
            </summary>
        </member>
        <member name="F:Email.Net.Common.DateTimeOffset.MinOffset">
            <summary>
            Minimum value of time zone offset
            </summary>
        </member>
        <member name="F:Email.Net.Common.DateTimeOffset.MaxValue">
            <summary>
            Represents the greatest possible value of System.DateTimeOffset. This field is read-only.
            </summary>
        </member>
        <member name="F:Email.Net.Common.DateTimeOffset.MinValue">
            <summary>
            Represents the earliest possible System.DateTimeOffset value. This field is read-only.
            </summary>
        </member>
        <member name="M:Email.Net.Common.DateTimeOffset.#cctor">
            <summary>
            Initializes a static class members
            </summary>
        </member>
        <member name="M:Email.Net.Common.DateTimeOffset.#ctor(System.DateTime)">
            <summary>
            Initializes a new DateTimeOffset object
            </summary>
            <param name="dateTime">UTC date and time</param>
        </member>
        <member name="M:Email.Net.Common.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new DateTimeOffset object
            </summary>
            <param name="dateTime">Local date time</param>
            <param name="offset">Local time offset from UTC</param>
        </member>
        <member name="M:Email.Net.Common.DateTimeOffset.CompareTo(System.Object)">
            <summary>
            A signed integer that indicates the relationship between the current System.DateTimeOffset
            object and other, as the following table shows.
            </summary>
            <param name="obj">Object for comparison</param>
            <returns>Less than zero The current System.DateTimeOffset object is earlier than other.
            Zero The current System.DateTimeOffset object is the same as other.  Greater
            than zero.  The current System.DateTimeOffset object is later than other.</returns>
        </member>
        <member name="P:Email.Net.Common.DateTimeOffset.dateTime">
            <summary>
            Date and time
            </summary>
        </member>
        <member name="P:Email.Net.Common.DateTimeOffset.DateTime">
            <summary>
            Date and time
            </summary>
        </member>
        <member name="P:Email.Net.Common.DateTimeOffset.offset">
            <summary>
            Offset from UTC
            </summary>
        </member>
        <member name="P:Email.Net.Common.DateTimeOffset.Offset">
            <summary>
            Offset from UTC
            </summary>
        </member>
        <member name="P:Email.Net.Common.DateTimeOffset.UtcDateTime">
            <summary>
            Converts into UTC
            </summary>
        </member>
        <member name="T:Email.Net.Common.EBoundaryType">
            <summary>
            Type of the boundary
            </summary>
        </member>
        <member name="F:Email.Net.Common.EBoundaryType.NotBoundary">
            <summary>
            A token is not a boundary
            </summary>
        </member>
        <member name="F:Email.Net.Common.EBoundaryType.Intermediate">
            <summary>
            A token represents an inner boundary
            </summary>
        </member>
        <member name="F:Email.Net.Common.EBoundaryType.Final">
            <summary>
            A token represents a final boundary
            </summary>
        </member>
        <member name="T:Email.Net.Common.EConnectionState">
            <summary>
            Enumerates connection states
            </summary>
        </member>
        <member name="F:Email.Net.Common.EConnectionState.Disonnected">
            <summary>
            Not connected with a server
            </summary>
        </member>
        <member name="F:Email.Net.Common.EConnectionState.Connected">
            <summary>
            Connected with a server
            </summary>
        </member>
        <member name="T:Email.Net.Common.EContentTransferEncoding">
            <summary>
            Represents possible values of MIME header field ContentTransferEncoding
            </summary>
        </member>
        <member name="F:Email.Net.Common.EContentTransferEncoding.SevenBit">
            <summary>
            7bit
            </summary>
        </member>
        <member name="F:Email.Net.Common.EContentTransferEncoding.EightBit">
            <summary>
            8bit
            </summary>
        </member>
        <member name="F:Email.Net.Common.EContentTransferEncoding.Binary">
            <summary>
            binary
            </summary>
        </member>
        <member name="F:Email.Net.Common.EContentTransferEncoding.Base64">
            <summary>
            base64
            </summary>
        </member>
        <member name="F:Email.Net.Common.EContentTransferEncoding.QuotedPrintable">
            <summary>
            quoted-printable
            </summary>
        </member>
        <member name="T:Email.Net.Common.EmailAddress">
            <summary>
            Encapsulates an e-mail adress
            </summary>
        </member>
        <member name="F:Email.Net.Common.EmailAddress._regExp">
            <summary>
            Regular expression for e-mail address validation
            </summary>
        </member>
        <member name="F:Email.Net.Common.EmailAddress.EMailIsNotProperlyFormattedMessage">
            <summary>
            Error message «E-mail is not properly formatted» 
            </summary>
        </member>
        <member name="F:Email.Net.Common.EmailAddress._address">
            <summary>
            the e-mail adress string
            </summary>
        </member>
        <member name="F:Email.Net.Common.EmailAddress._displayName">
            <summary>
            the display name to be shown in e-mail messages
            </summary>
        </member>
        <member name="M:Email.Net.Common.EmailAddress.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.EmailAddress"/> object with the provided e-mail address
            </summary>
            <param name="emailAddress">E-mail address string</param>
            <exception cref="T:System.FormatException">Thrown if the e-mail address string <paramref name="emailAddress"/> is 
            not properly formatted</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.EmailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.EmailAddress"/> object with the provided e-mail address and display name
            </summary>
            <param name="emailAddress">E-mail address string</param>
            <param name="displayName">Display name</param>
            <exception cref="T:System.FormatException">Thrown if the e-mail address string <paramref name="emailAddress"/> is 
            not properly formatted</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.EmailAddress.InitEmailAddressField(System.String)">
            <summary>
            Initializes the email address field <see cref="P:Email.Net.Common.EmailAddress.Address"/> performing validation of the e-mail string format
            </summary>
            <param name="emailAddress">E-mail string for initialization</param>
            <exception cref="T:System.FormatException">Thrown if the e-mail address string <paramref name="emailAddress"/> is 
            not properly formatted</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.EmailAddress.ToString">
            <summary>
            Returns a string representation of the given <see cref="T:Email.Net.Common.EmailAddress"/> object
            </summary>
            <returns>If the display name is provided, returns a string containig a display name and a e-mail address. 
            Otherwise, returns a string containing only an address</returns>
        </member>
        <member name="M:Email.Net.Common.EmailAddress.GetEmailString">
            <summary>
            Returns the e-mail address string in the frame of <b>&lt;</b> and <b>&gt;</b>
            </summary>
            <returns>E-mail address string</returns>
        </member>
        <member name="M:Email.Net.Common.EmailAddress.IsValid(System.String)">
            <summary>
            Checks the provided e-mail address
            </summary>
            <param name="emailAddress">E-mail adress to check</param>
            <returns><b>true</b>, if the provided e-mail address is properly formatted; otherwise returns <b>false</b>.</returns>
        </member>
        <member name="P:Email.Net.Common.EmailAddress.Address">
            <summary>
            Gets and sets the e-mail adress string
            </summary>
            <exception cref="T:System.FormatException">Email must be properly formatted</exception>
        </member>
        <member name="P:Email.Net.Common.EmailAddress.DisplayName">
            <summary>
            Gets and sets the display name to be shown in e-mail messages
            </summary>
        </member>
        <member name="T:Email.Net.Common.EMessageCheckResult">
            <summary>
            Describes the result of checking the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.Correct">
            <summary>
            The message is correct
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.NoPlainTextInHTMLMessage">
            <summary>
            No plain text in the HTML message
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.NoFromField">
            <summary>
            From field is not specified
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.NoToField">
            <summary>
            To field is not specified
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.NoText">
            <summary>
            Message doesn't contain text
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.Incorrect">
            <summary>
            Message is incorrect
            </summary>
        </member>
        <member name="F:Email.Net.Common.EMessageCheckResult.AttachmentFileIsMissing">
            <summary>
            One of attachment files is missing
            </summary>
        </member>
        <member name="T:Email.Net.Common.ETextContentType">
            <summary>
            Enumerates different types of text content
            </summary>
        </member>
        <member name="F:Email.Net.Common.ETextContentType.Plain">
            <summary>
            Plain-text
            </summary>
        </member>
        <member name="F:Email.Net.Common.ETextContentType.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="T:Email.Net.Common.Exceptions.ConnectionException">
            <summary>
            Exception class for connection errors
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.ConnectionException.#ctor">
            <summary>
            Creates a new <see cref="T:Email.Net.Common.Exceptions.ConnectionException"/> object
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.ConnectionException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Email.Net.Common.Exceptions.ConnectionException"/> object
            </summary>
            <param name="message">A text for exception message</param>
        </member>
        <member name="M:Email.Net.Common.Exceptions.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Email.Net.Common.Exceptions.ConnectionException"/> object
            </summary>
            <param name="message">A text for exception message</param>
            <param name="inner">An inner exception</param>
        </member>
        <member name="T:Email.Net.Common.Exceptions.EndOfMessageException">
            <summary>
             Occurs when trying to read data from the IMessageReader 
             which already reached end of message
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.EndOfMessageException.#ctor">
            <summary>
            Creates a new instance of class
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.EndOfMessageException.#ctor(System.String)">
            <summary>
            Creates a new instance of message
            </summary>
            <param name="message">A text of the exception message</param>
        </member>
        <member name="M:Email.Net.Common.Exceptions.EndOfMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the message
            </summary>
            <param name="message">A text of the exception message</param>
            <param name="inner">An inner exception which is wrapped with 
            current instance</param>
        </member>
        <member name="T:Email.Net.Common.Exceptions.ParseException">
            <summary>
            Exception class for errors of message parser
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010</modify>
        </member>
        <member name="M:Email.Net.Common.Exceptions.ParseException.#ctor">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.Exceptions.ParseException"/> object
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Email.Net.Common.Exceptions.ParseException"/> object
            </summary>
        </member>
        <member name="T:Email.Net.Common.Extensions.StreamExtensions">
            <summary>
            Groups methods that extends Stream class
            </summary>
        </member>
        <member name="F:Email.Net.Common.Extensions.StreamExtensions.BufferSize">
            <summary>
            Size of the reading buffer
            </summary>
        </member>
        <member name="M:Email.Net.Common.Extensions.StreamExtensions.ReadToEndLine(System.IO.Stream)">
            <summary>
            Read data from the provided stream until CRLF pair encountered.
            CRLF is not included to returning array
            </summary>
            <param name="stream">A stream object to read from</param>
            <returns>Readed bytes, not including CRLF</returns>
        </member>
        <member name="M:Email.Net.Common.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            Read data from the provided stream until end of the stream is ecountered
            </summary>
            <param name="stream">A stream object to read from</param>
            <returns>Readed bytes</returns>
        </member>
        <member name="M:Email.Net.Common.Extensions.StreamExtensions.ReadToEndLine(System.IO.Stream,System.UInt32)">
            <summary>
            Read data from the provided stream until CRLF pair encountered or 
            <paramref name="maxBytesToRead"/> bytes read. CRLF is not included to 
            returning array.
            </summary>
            <param name="stream">A stream object to read from</param>
            <param name="maxBytesToRead">A maximal ammount of bytes to read</param>
            <returns>Readed bytes, not including CRLF</returns> 
        </member>
        <member name="T:Email.Net.Common.Extensions.StreamExtensions.ELineReaderState">
            <summary>
            Represent states of the simple finite state machine
            that used for parsing incoming data
            </summary>
        </member>
        <member name="F:Email.Net.Common.Extensions.StreamExtensions.ELineReaderState.Plain">
            <summary>
            The defult state of the endline searching finite state machine
            </summary>
        </member>
        <member name="F:Email.Net.Common.Extensions.StreamExtensions.ELineReaderState.Got0D">
            <summary>
            A state of the endline searching finite state machine after ODh is received
            </summary>
        </member>
        <member name="F:Email.Net.Common.Extensions.StreamExtensions.ELineReaderState.Got0D0A">
            <summary>
            A state of the endline searching finite state machine after ODh and 0Ah is received
            </summary>
        </member>
        <member name="T:Email.Net.Common.Extensions.StringBuilderExtensions">
            <summary>
            Additional methods for <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>19.05.2010</modify>
        </member>
        <member name="M:Email.Net.Common.Extensions.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            Removes all the leading and trailing occurrences of gap and tab characters from the specified 
            <see cref="T:System.Text.StringBuilder"/> object
            </summary>
            <returns>The corresponding string without removed gaps and tabs</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Extensions.StringBuilderExtensions.EndsWith(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Determines whether one string ends with another
            </summary>
            <param name="builder">String which ending is compared</param>
            <param name="value">String to compare to</param>
            <param name="ignoreCase">Specifies whether ingore case or not</param>
            <returns>True, if <paramref name="builder"/> ends with <paramref name="value"/>, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Common.Extensions.StringBuilderExtensions.StartWith(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Determines whether one string starts with another
            </summary>
            <param name="builder">String which start is compared</param>
            <param name="value">String to compare to</param>
            <param name="ignoreCase">Specifies whether ingore case or not</param>
            <returns>True, if <paramref name="builder"/> starts with <paramref name="value"/>, otherwise - false</returns>
        </member>
        <member name="T:Email.Net.Common.MailMessageRFCDecoder">
            <summary>
            Decoder of Message class using MIME standart
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010(rock day)</modify>
        </member>
        <member name="F:Email.Net.Common.MailMessageRFCDecoder.RO">
            <summary>
            Default option for regular expressions
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessageRFCDecoder.regArgument">
            <summary>
            Regex for parsing key-value pair in header
            </summary>
        </member>
        <member name="F:Email.Net.Common.MailMessageRFCDecoder.regDifArgumentValue">
            <summary>
            Regex for parsing quted value
            </summary>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.GetStringFromBase64(System.String,System.String)">
            <summary>
            Converts string from Base64 to unicode.
            Text not being decoded if codepage doesn't exist. 
            If text is not conform to base64, its not decodes and than returns <paramref name="value"/>.
            </summary>
            <param name="value">String encoded in Base64</param>
            <param name="encoding">Encoding string</param>
            <returns>Decoded string</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.GetStringFromBase64(System.Byte[],System.String)">
            <summary>
            Converts string from Base64 to unicode.
            Text not being decoded if codepage doesn't exist. 
            If text is not conform to base64, its not decodes and than returns <paramref name="value"/>.
            </summary>
            <param name="value">byte array contains a string encoded in Base64</param>
            <param name="encoding">Encoding string</param>
            <returns>Decoded string</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.ParseBase64Item(System.String)">
            <summary>
            Decodes Unicode encoded string item. String item in <example>=?Codepage?Encoding_mode?Text?=</example>.
            Text would not be decoded, if code page does not exist.
            Returns empty string, if item is invalid.
            </summary>
            <param name="item">Encoded string item</param>
            <returns>Decoded string</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.GetStringFromQuotedPrintable(System.String,System.String)">
            <summary>
            Converts string from QuotedPrintable to unicode.
            Text would not be decoded, if code page does not exist.
            If text is not conform to base64, its not decodes and than returns.<paramref name="text"/>.
            </summary>
            <param name="text">QuotedPrintable encoded string</param>
            <param name="encoding">String code page</param>
            <returns>Decoded string</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.GetStringFromQuotedPrintable(System.Byte[],System.String)">
            <summary>
            Converts string from QuotedPrintable to unicode.
            Text would not be decoded, if code page does not exist.
            If text is not conform to base64, its not decodes and than returns.<paramref name="text"/>.
            </summary>
            <param name="text">QuotedPrintable encoded byte array</param>
            <param name="encoding">String code page</param>
            <returns>Decoded string</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.Unfolding(System.String)">
            <summary>
            Unfolding 
            </summary>
            <param name="text">Original text</param>
            <returns>Unfolded text</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.Unfolding(System.Text.StringBuilder)">
            <summary>
            Unfolding 
            </summary>
            <param name="text">Original text</param>
            <returns>Unfolded text</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.DecodeFromQuotedPrintable(System.Byte[])">
            <summary>
            Decodes a source array <paramref name="buf" /> encoded with 
            quoted-prindable encoding
            </summary>
            <param name="buf">A source array of data</param>
            <returns>A decoded array of data</returns>
        </member>
        <member name="M:Email.Net.Common.MailMessageRFCDecoder.DecodeFromBase64(System.Byte[])">
            <summary>
            Decodes a source array <paramref name="source" /> encoded with 
            quoted-prindable encoding
            </summary>
            <param name="source">A source array of data</param>
            <returns>A decoded array of data</returns>
        </member>
        <member name="T:Email.Net.Common.MessageParts.Attachment">
            <summary>
            Encapsulates an e-mail attachment
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.Attachment._exAttachmentDirectoryCannotBeNullOrEmpty">
            <summary>
            Message for <see cref="T:System.ArgumentException"/> that is thrown when supplied attachmentDirectory parameter is null
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.Attachment._attachmentDirectory">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.Attachment.AttachmentDirectory"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.Attachment._transferFilename">
            <summary>
            Filename of the attachment that is specified in email
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.Attachment._diskFilename">
            <summary>
            Filename of the attachment on the local disk
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.Attachment._contentType">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.Attachment.ContentType"/> property
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageParts.Attachment.#ctor(System.String,Email.Net.Common.ContentType)">
            <summary>
            Initializes a new object with given parameters
            </summary>
            <param name="fullFilename">Full path to the attached file on the local disk</param>
            <param name="contentType">Content type of the attachment</param>
            <exception cref="T:System.ArgumentNullException">Parameters cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.MessageParts.Attachment.#ctor(System.String,Email.Net.Common.ContentType,System.String)">
            <summary>
            Initializes a new object with given parameters
            </summary>
            <param name="diskFilename">Name of the attached file in the directory specified by the <paramref name="attachmentDirectory"/> parameter on the local file system</param>
            <param name="contentType">Content type of the attachment</param>
            <param name="attachmentDirectory">Path to the directory on the local file system where the attached file is situated</param>
            <exception cref="T:System.ArgumentNullException">Parameters cannot be null</exception>
            <exception cref="T:System.ArgumentException">attachmentDirectory cannot be null or empty</exception>
        </member>
        <member name="M:Email.Net.Common.MessageParts.Attachment.#ctor">
            <summary>
            Initializes a new object with default parameters
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.Attachment.AttachmentDirectory">
            <summary>
            Gets or sets directory path for reading and saving the attachment
            </summary>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty</exception>
        </member>
        <member name="P:Email.Net.Common.MessageParts.Attachment.ContentType">
            <summary>
            Gets or sets the attachment content type
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.Attachment.TransferFilename">
            <summary>
            Gets or sets the name of the file which is used when the file is transfered via email protocols
            This name is specified in the email message headers
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.Attachment.DiskFilename">
            <summary>
            Gets of sets the name of the file which is used to access the file located on the local disk
            This name specifies the real file on the local disk
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.Attachment.FullFilename">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.BaseContentPart">
            <summary>
            Message part,which contains content
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.IPart">
            <summary>
            Base interface implemented by message parts
            </summary>
            <remarks>An e-mail message has a tree-like hierarchical structure. The root node of this tree containing all the 
            rest nodes is the e-mail message itself. All the nodes of the next level are the parts contained in the message 
            directly. There can be nodes at the second level, the third level and so on. In general, any node of this tree 
            has to implement <see cref="T:Email.Net.Common.MessageParts.IPart"/> interface. The nodes can be terminal and non-terminal.</remarks>
        </member>
        <member name="P:Email.Net.Common.MessageParts.IPart.Header">
            <summary>
            Gets or sets the part headers
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.IPart.Type">
            <summary>
            Gets the part type
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.BaseContentPart._header">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.BaseContentPart.Header"/> property
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageParts.BaseContentPart.#ctor">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Common.MessageParts.BaseContentPart"/>
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.BaseContentPart.Header">
            <summary>
            Gets or sets the part headers
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MessageParts.BaseContentPart.Type">
            <summary>
            Gets the part type
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.ContentPart">
            <summary>
            Message part that is some kind of file
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.ContentPart._exAttachmentDirectoryCannotBeNullOrEmpty">
            <summary>
            Message for <see cref="T:System.ArgumentException"/> that is thrown when supplied attachmentDirectory parameter is null
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.ContentPart._transferFilename">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.ContentPart.TransferFilename"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.ContentPart._diskFilename">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.ContentPart.DiskFilename"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.ContentPart._attachmentDirectory">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.ContentPart.AttachmentDirectory"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.ContentPart._size">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.ContentPart.Size"/> property
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageParts.ContentPart.#ctor">
            <summary>
            Creates a new instance of class
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.ContentPart.TransferFilename">
            <summary>
            Gets or sets the name of the file which is used when the file is transfered via email protocols
            This name is specified in the email message headers
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.ContentPart.DiskFilename">
            <summary>
            Gets of sets the name of the file which is used to access the file located on the local disk
            This name specifies the real file on the local disk
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.ContentPart.Type">
            <summary>
            Gets the type of the part
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.ContentPart.AttachmentDirectory">
            <summary>
            Gets or sets directory path for reading and saving the attachment
            </summary>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty</exception>
        </member>
        <member name="P:Email.Net.Common.MessageParts.ContentPart.Size">
            <summary>
            Gets or sets the size of the part in bytes
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.EPartType">
            <summary>
            Defines types of the message parts
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.EPartType.Multi">
            <summary>
            Multipart part
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.EPartType.Content">
            <summary>
            Content part
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.EPartType.Text">
            <summary>
            Text part
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.EPartType.Message">
            <summary>
            Nested message
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.MessagePart">
            <summary>
            Represents a nested message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.MessagePart._message">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.MessagePart.Message"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.MessagePart._header">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.MessagePart.Header"/> property
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageParts.MessagePart.#ctor">
            <summary>
            Initializes a new object with default values
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.MessagePart.Message">
            <summary>
            Gets or sets a nested message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.MessagePart.Header">
            <summary>
            Gets or sets the part headers
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MessageParts.MessagePart.Type">
            <summary>
            Gets the part type
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.MultiPart">
            <summary>
            Represent a multipart part of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.MultiPart._parts">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.MultiPart.Parts"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.MultiPart._header">
            <summary>
            MIME headers of the part
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageParts.MultiPart.#ctor">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Common.MessageParts.MultiPart"/>
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.MultiPart.Parts">
            <summary>
            Gets or sets child parts of the part
            </summary>
            <exception cref="T:System.ArgumentNullException">value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MessageParts.MultiPart.Header">
            <summary>
            Gets or sets the part headers
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Common.MessageParts.MultiPart.Type">
            <summary>
            Gets the part type
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageParts.TextPart">
            <summary>
            Encapsulates a message text part, which is not an attachment
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageParts.TextPart._text">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageParts.TextPart.Text"/> property
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.TextPart.Text">
            <summary>
            Gets or sets the text content of the given message part
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageParts.TextPart.Type">
            <summary>
            Gets the part type
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageReaders.Base64MessageReader">
            <summary>
            Provides functionality of reading a message which was base64 encoded
            from IMessageReader object. Message being readed must be bounded by 
            some king of textual boundary.
            The class is used for parsing nested mail messages
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageReaders.BoundedMessageReader">
            <summary>
            An abstract class provides functionality of reading a message which was encoded in some way
            from IMessageReader object. Message being readed must be bounded by some king of textual boundary.
            The class is used for parsing nested mail messages
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageReaders.IMessageReader">
            <summary>
            An interface for MessageReaders
            Provides abstraction for reading message from stream-like objects
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.IMessageReader.ReadLine">
            <summary>
            Reads a line from the source.
            </summary>
            <remarks>If the line starts with "." followed by a sequence 
            other than 0x0D 0x0A it will be removed from the result byte array.
            In other case the <see cref="P:Email.Net.Common.MessageReaders.IMessageReader.EndOfMessage"/> flag will be set and null 
            value will be returned.</remarks>
            <returns>Readed bytes till the first end line subsequence or null.</returns>
        </member>
        <member name="P:Email.Net.Common.MessageReaders.IMessageReader.EndOfMessage">
            <summary>
            A flag which indicates end of the message. 
            If set message boundary was readed.
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.BoundedMessageReader._exReadAfterEndOfMessage">
            <summary>
            Text of the exception that is thrown if client tries to read something after boundary was reached
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.BoundedMessageReader._endOfMessage">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageReaders.BoundedMessageReader.EndOfMessage"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.BoundedMessageReader._sourceReader">
            <summary>
            An object of <see cref="T:Email.Net.Common.MessageReaders.IMessageReader"/> to read data from
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.BoundedMessageReader._boundary">
            <summary>
            Textual boundary that designates the end of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.BoundedMessageReader._finalBoundaryReached">
            <summary>
            Backing field for <see cref="P:Email.Net.Common.MessageReaders.BoundedMessageReader.FinalBoundaryReached"/>
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.BoundedMessageReader.#ctor(Email.Net.Common.MessageReaders.IMessageReader,System.String)">
            <summary>
            Initializes a new object with given parameters
            </summary>
            <param name="sourceReader">An <see cref="T:Email.Net.Common.MessageReaders.IMessageReader"/> object to read data from</param>
            <param name="boundary">Textual delimiter of the message</param>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.BoundedMessageReader.ReadLine">
            <summary>
            Reads line (till 0x0D 0x0A sequence encoutered) from reader and 
            checks if the end of the messages was reached
            </summary>
            <returns>Readed line</returns>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.BoundedMessageReader.GetEndOfLinePosition(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Gets index of the position of 0x0D 0x0A sequence in the source
            </summary>
            <param name="source">Source sequence of bytes to search</param>
            <param name="offset">Offset from the beggining to start search from</param>
            <returns>Index of the endline sequence of -1 if endline wasn't encountered</returns>
        </member>
        <member name="P:Email.Net.Common.MessageReaders.BoundedMessageReader.EndOfMessage">
            <summary>
            A flag which indicates end of the message. 
            If set message boundary was readed.
            </summary>
        </member>
        <member name="P:Email.Net.Common.MessageReaders.BoundedMessageReader.FinalBoundaryReached">
            <summary>
            A flag that singnals that final outer boundary was encountered at the end of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.Base64MessageReader._buffer">
            <summary>
            Buffer for saving temporary data
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.Base64MessageReader._reachedBoundary">
            <summary>
            State of boundary searching
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.Base64MessageReader.#ctor(Email.Net.Common.MessageReaders.IMessageReader,System.String)">
            <summary>
            Initializes a new object with given parameters
            </summary>
            <param name="sourceReader">An <see cref="T:Email.Net.Common.MessageReaders.IMessageReader"/> object to read data from</param>
            <param name="boundary">Textual delimiter of the message</param>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.Base64MessageReader.ReadLine">
            <summary>
            Reads line (till 0x0D 0x0A sequence encoutered) from reader and 
            checks if the end of the messages was reached
            </summary>
            <returns>Readed line</returns>
            <exception cref="T:System.InvalidOperationException">Read cannot be performed if the boundary was reached</exception>
        </member>
        <member name="T:Email.Net.Common.MessageReaders.QuotedPrintableMessageReader">
            <summary>
            Provides functionality of reading a message which was quoted-printable encoded
            from IMessageReader object. Message being readed must be bounded by 
            some king of textual boundary.
            The class is used for parsing nested mail messages
            </summary>
        </member>
        <member name="F:Email.Net.Common.MessageReaders.QuotedPrintableMessageReader._buffer">
            <summary>
            Buffer for saving temporary data
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.QuotedPrintableMessageReader.#ctor(Email.Net.Common.MessageReaders.IMessageReader,System.String)">
            <summary>
            Initializes a new object with given parameters
            </summary>
            <param name="sourceReader">An <see cref="T:Email.Net.Common.MessageReaders.IMessageReader"/> object to read data from</param>
            <param name="boundary">Textual delimiter of the message</param>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.QuotedPrintableMessageReader.ReadLine">
            <summary>
            Reads line (till 0x0D 0x0A sequence encoutered) from reader and 
            checks if the end of the messages was reached
            </summary>
            <returns>Readed line</returns>
            <exception cref="T:System.InvalidOperationException">Read cannot be performed if the boundary was reached</exception>
        </member>
        <member name="T:Email.Net.Common.MessageReaders.SizedMessageStreamReader">
            <summary>
            A message reader which can be used to read data from 
            the incoming stream. The reader is bounded with the 
            maximal amount of bytes to read.
            of bytes that 
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.SizedMessageStreamReader.#ctor(System.IO.Stream,System.UInt32)">
            <summary>
            Creates a new instance of a class
            </summary>
            <param name="incomingStream">The source stream providing data 
            to the reader</param>
            <param name="size">The maximal ammount of bytes that should be 
            readed from the incoming stream</param>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.SizedMessageStreamReader.ReadLine">
            <summary>
            Reads an array of bytes from the incoming stream, bounded with 
            the first end of line sequence, the end of stream or a maximal
            ammount of bytes to read.
            </summary>
            <returns>An array of bytes read from the incoming stream.
            </returns>
            <remarks>
            The end of line sequence will be cropped from a result array.
            If an incoming stream does not contains new data, null value will 
            be returned and an <see cref="P:Email.Net.Common.MessageReaders.SizedMessageStreamReader.EndOfMessage"/> flag will be set.
            </remarks>
        </member>
        <member name="P:Email.Net.Common.MessageReaders.SizedMessageStreamReader.EndOfMessage">
            <summary>
            A flag which signals that a reader bound (a maximal 
            ammount of data read or the end of incoming stream 
            was reached) was reached.
            </summary>
        </member>
        <member name="T:Email.Net.Common.MessageReaders.UnencodedMessageReader">
            <summary>
            Provides functionality of reading a message which was not encoded in any way
            from IMessageReader object. Message being readed must be bounded by some king of textual boundary.
            The class is used for parsing nested mail messages
            </summary>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.UnencodedMessageReader.#ctor(Email.Net.Common.MessageReaders.IMessageReader,System.String)">
            <summary>
            Initializes a new object with given parameters
            </summary>
            <param name="reader">A reader object to read data from</param>
            <param name="boundary">Textual delimiter of the message</param>
        </member>
        <member name="M:Email.Net.Common.MessageReaders.UnencodedMessageReader.ReadLine">
            <summary>
            Reads line (till 0x0D 0x0A sequence encoutered) from reader and 
            checks if the end of the messages was reached
            </summary>
            <returns>Readed line</returns>
            <exception cref="T:System.InvalidOperationException">Read cannot be performed if the boundary was reached</exception>
        </member>
        <member name="T:Email.Net.Common.MIMEHeader">
            <summary>
            Incapsulates an information about the message header.
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._defaultContentTransferEncoding">
            <summary>
            A default transfer encoding
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._contentType">
            <summary>
            Message content type
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._contentId">
            <summary>
            Gets the unique Id of the given message part
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._contentDescription">
            <summary>
            Gets the text description (comments) of the information contained in the given message part
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._contentTransferEncoding">
            <summary>
            Gets the name of the given message part encoding mode
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._contentDisposition">
            <summary>
            Gets and sets the content disposition of the message part
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._returnPath">
            <summary>
            Gets and sets the return path (a tracing field, specified in RFC)
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._messageId">
            <summary>
            Gets and sets the message Id
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._from">
            <summary>
            Gets and sets the source (<b>From</b>) address of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._sender">
            <summary>
            Gets and sets the direct sender of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._replyTo">
            <summary>
            Gets and sets the e-mail addresses collection which the message is to reply to
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._to">
            <summary>
            Specifies the destination e-mail addresses collection of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._carbonCopies">
            <summary>
            Specifies the carbon copies - the addresses to send a copy of the message to
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._subject">
            <summary>
            Gets and sets the subject of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._blindedCarbonCopies">
            <summary>
            Specifies the blinded carbon copies - the addresses to send a blind copy of the message to
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._comments">
            <summary>
            Gets and sets the comments of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._keywords">
            <summary>
            Specifies collection of the keywords
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._text">
            <summary>
            Gets and sets the main text content of the message (for plain-text messages the plain-text itself, for 
            HTML-messages it contains the provided HTML)
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._date">
            <summary>
            Gets and sets the timestamp of the message (In UTC)
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._inReplyTo">
            <summary>
            Gets and sets the parent message Id
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._references">
            <summary>
            Gets and sets the Id of the message which the given message refers to
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._received">
            <summary>
            Gets information about sender’s server and time
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentDate">
            <summary>
            Gets and sets the parent message date
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentFrom">
            <summary>
            Gets and sets the parent message sender
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentSender">
            <summary>
            Gets and sets the direct sender of the parent message
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._textEncoding">
            <summary>
            Gets and sets the encoding of the message. By default UTF-8 is used
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentTo">
            <summary>
            Gets and sets the parent message receiver
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentCarbonCopies">
            <summary>
            Gets and sets the parent message copy receivers
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentBlindedCarbonCopies">
            <summary>
            Gets and sets the parent message blinded copy receivers
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._resentMessageId">
            <summary>
            Gets and sets the parent message Id
            </summary>
        </member>
        <member name="F:Email.Net.Common.MIMEHeader._extraHeaders">
            <summary>
            The extra mime headers
            </summary>
        </member>
        <member name="M:Email.Net.Common.MIMEHeader.#ctor">
            <summary>
            Creates a new instance of class
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ContentType">
            <summary>
            Message content type
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ContentID">
            <summary>
            Gets the unique Id of the given message part
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ContentDescription">
            <summary>
            Gets the text description (comments) of the information contained in the given message part
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ContentTransferEncoding">
            <summary>
            Gets the name of the given message part encoding mode
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ContentDisposition">
            <summary>
            Gets and sets the content disposition of the message part
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ReturnPath">
            <summary>
            Gets and sets the return path (a tracing field, specified in RFC)
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.MessageID">
            <summary>
            Gets and sets the message Id
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.From">
            <summary>
            Gets and sets the source (<b>From</b>) address of the message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Sender">
            <summary>
            Gets and sets the direct sender of the message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ReplyTo">
            <summary>
            Gets and sets the e-mail addresses collection which the message is to reply to
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.To">
            <summary>
            Specifies the destination e-mail addresses collection of the message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.CarbonCopies">
            <summary>
            Specifies the carbon copies - the addresses to send a copy of the message to
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.BlindedCarbonCopies">
            <summary>
            Specifies the blinded carbon copies - the addresses to send a blind copy of the message to
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Subject">
            <summary>
            Gets and sets the subject of the message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Comments">
            <summary>
            Gets and sets the comments of the message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Keywords">
            <summary>
            Specifies collection of the keywords
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Text">
            <summary>
            Gets and sets the main text content of the message (for plain-text messages the plain-text itself, for 
            HTML-messages it contains the provided HTML)
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.TextEncoding">
            <summary>
            Gets and sets the encoding of the message. By default UTF-8 is used
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Date">
            <summary>
            Gets and sets the timestamp of the message (In UTC)
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.InReplyTo">
            <summary>
            Gets and sets the parent message Id
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.References">
            <summary>
            Gets and sets the Id of the message which the given message refers to
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.Received">
            <summary>
            Gets information about sender’s server and time
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentDate">
            <summary>
            Gets and sets the parent message date
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentFrom">
            <summary>
            Gets and sets the parent message sender
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentSender">
            <summary>
            Gets and sets the direct sender of the parent message
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentTo">
            <summary>
            Gets and sets the parent message receiver
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentCarbonCopies">
            <summary>
            Gets and sets the parent message copy receivers
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentBlindedCarbonCopies">
            <summary>
            Gets and sets the parent message blinded copy receivers
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ResentMessageID">
            <summary>
            Gets and sets the parent message Id
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.ExtraHeaders">
            <summary>
            The extra mime headers
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.IsDefaultContentType">
            <summary>
            Signals that value of <see cref="P:Email.Net.Common.MIMEHeader.ContentType"/> property was 
            not set and default value is used
            </summary>
        </member>
        <member name="P:Email.Net.Common.MIMEHeader.IsDefaultContentTransferEncoding">
            <summary>
            Signals that value of <see cref="P:Email.Net.Common.MIMEHeader.ContentTransferEncoding"/> property was 
            not set and default value is used
            </summary>
        </member>
        <member name="T:Email.Net.Common.Parsers.BaseComplexPartParser">
            <summary>
            A base class for MultipartParses and MailMessageParser
            </summary>
        </member>
        <member name="T:Email.Net.Common.Parsers.BaseParser">
            <summary>
            A base class for message parser classes
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseParser.RaiseFinalBoundaryReached">
            <summary>
            Safely raises FinalBoundaryReachedEvent
            </summary>
        </member>
        <member name="E:Email.Net.Common.Parsers.BaseParser.FinalBoundaryReached">
            <summary>
            Raised when parses reaches final boundary of the outer part
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseComplexPartParser.ParsePart(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition,Email.Net.Common.EContentTransferEncoding,System.String,System.String,Email.Net.Common.Rfc822Message)">
            <summary>
            Determines a particular parser type to parse given message part
            </summary>
            <param name="reader">A source reader which provides a message</param>
            <param name="contentType">A content type of the part parsed 
            	from the mime-header</param>
            <param name="contentDisposition">A content disposition of the part parsed 
            	from the mime-header</param>
            <param name="contentTransferEncoding">An encoding of the part parsed 
            	from the mime-header</param>
            <param name="attachmentDirectory">A path to a directory used to store 
            	attachments of the message</param>
            <param name="boundary">A boundary sequence wich marks the end of the part</param>
            <param name="parentMessage">A parrent message which will own a new part object</param>
            <returns>A part object parsed from the reader</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseComplexPartParser.childParser_FinalBoundaryReached(System.Object,System.EventArgs)">
            <summary>
            Handler method for FinalBoundaryReached event of child parsers
            </summary>
            <param name="sender">Sender object</param>
            <param name="e">Parameters of the event</param>
        </member>
        <member name="T:Email.Net.Common.Parsers.BaseContentParser">
            <summary>
            A base class for content part parsers
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseContentParser.Parse(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition,Email.Net.Common.EContentTransferEncoding,System.String)">
            <summary>
            Parses a message part and returns it
            </summary>
            <param name="reader">A reader object to read data from</param>
            <param name="contentType">ContentType of the message part</param>
            <param name="contentDisposition">ContentDisposition of the message part</param>
            <param name="contentTransferEncoding">ContentTransferEncoding of the message part</param>
            <param name="boundary">Outer boundary for parsing</param>
            <returns>A newly created part</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseContentParser.ParseFromQuotedPrintable(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition,System.String)">
            <summary>
            Parses quoted-printable encoded part
            </summary>
            <param name="reader">A reader object to read part from</param>
            <param name="contentType">ContentType of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <param name="boundary">Outer boundary</param>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseContentParser.ParseFromBase64(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition,System.String)">
            <summary>
            Parses base64 encoded part
            </summary>
            <param name="reader">A reader object to read part from</param>
            <param name="contentType">ContentType of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <param name="boundary">Outer boundary</param>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseContentParser.ParseUnencoded(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition,System.String)">
            <summary>
            Parses part that was transfered without any encoding
            </summary>
            <param name="reader">A reader object to read part from</param>
            <param name="contentType">ContentType of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <param name="boundary">Outer boundary</param>
        </member>
        <member name="M:Email.Net.Common.Parsers.BaseContentParser.CreatePart(Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition)">
            <summary>
            Creates a new part according to given ContentType and ContentDisposition
            </summary>
            <param name="contentType">ContentType of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <returns>Created part</returns>
        </member>
        <member name="P:Email.Net.Common.Parsers.BaseContentParser.ContentWriter">
            <summary>
            Gets the content writer object to save the content of the part
            </summary>
        </member>
        <member name="T:Email.Net.Common.Parsers.ContentPartParser">
            <summary>
            Encapsulates parser of the ContentPart
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.ContentPartParser._contentWriter">
            <summary>
            Backing field for ContentWriter property
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.ContentPartParser.#ctor(System.String)">
            <summary>
            Creates a new object
            </summary>
            <param name="attachmentDirectory">A directory path to save attachments to</param>
        </member>
        <member name="M:Email.Net.Common.Parsers.ContentPartParser.CreatePart(Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition)">
            <summary>
            Creates a new ContentPart
            </summary>
            <param name="contentType">ContentType header of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <returns>A new ContentPert object</returns>
        </member>
        <member name="P:Email.Net.Common.Parsers.ContentPartParser.ContentWriter">
            <summary>
            Gets object of writer  that provides functionality for saving content of the part
            </summary>
        </member>
        <member name="T:Email.Net.Common.Parsers.MailMessageParser">
            <summary>
            Encapsulates an e-mail message parser
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.MailMessageParser.Parse(Email.Net.Common.MessageReaders.IMessageReader,System.String)">
            <summary>
            Parses a message from reader object
            </summary>
            <param name="reader">A source reader which provides a message</param>
            <param name="attachmentDirectory">A directory path to store the attachments</param>
            <returns>A new parsed message</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MailMessageParser.childParser_FinalBoundaryReached(System.Object,System.EventArgs)">
            <summary>
            A default handler for FinalBoundaryReached event of the child parsers
            </summary>
            <param name="sender">A sender of the event</param>
            <param name="e">Parameters of the event</param>
        </member>
        <member name="T:Email.Net.Common.Parsers.MessagePartParser">
            <summary>
            Encapsulates parses of the nested messages
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.MessagePartParser.Parse(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition,Email.Net.Common.EContentTransferEncoding,System.String,System.String)">
            <summary>
            Parses nested message using given parameters and returns MessagePart that contains parsed message
            </summary>
            <param name="reader">An object for reading contents of the part</param>
            <param name="contentType">ContentType header of the part</param>
            <param name="contentDisposition">ContentDisposition header of the part</param>
            <param name="contentTransferEncoding">ContentTransferEncoding header of the part</param>
            <param name="boundary">Outer boundary</param>
            <param name="attachmentDirectory">Path to directory to save attachments</param>
            <returns>A new MessagePart object that contains the parsed nested message</returns>
        </member>
        <member name="T:Email.Net.Common.Parsers.MIMEHeaderParser">
            <summary>
            Provides a service for parsing MIME-headers
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.MIMEHeaderParser.MIMEVersionExceptionMessage">
            <summary>
            Error message «MIME version is not 1.0»
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.MIMEHeaderParser.RO">
            <summary>
            Default option for regular expressions
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.MIMEHeaderParser.regDifArgumentValue">
            <summary>
            Regex for parsing quoted value
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.Parse(System.String)">
            <summary>
            Parses a MIME-header of the message or message part
            </summary>
            <param name="source">A source string</param>
            <returns>A parsed MIME-header</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.IsValidMimeLine(System.String)">
            <summary>
            Check if line contains a valid MIME attribute
            </summary>
            <param name="line">A line to validate</param>
            <returns>true if line contains MIME attribute</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseContentType(System.String)">
            <summary>
            Parses field Content-Type
            </summary>
            <param name="text">String containing field Content-Type</param>
            <returns>Content-Type value,
            if parsing is not succeed, returns default value (<see cref="T:Email.Net.Common.ContentType"/>)</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses field Content-Transfer-Encoding
            </summary>
            <param name="text">String containing Content-Transfer-Encoding</param>
            <returns>Content-Transfer-Encoding value,
            if parsing is not succeed, returns <b>"7bit"</b></returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.GetTransferEncodingFromString(System.String)">
            <summary>
            Returns appropriate value of <see cref="T:Email.Net.Common.EContentTransferEncoding"/> enum
            according to given string
            </summary>
            <param name="value">Given transfer encoding</param>
            <returns>Value of <see cref="T:Email.Net.Common.EContentTransferEncoding"/> enum</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseMimeVersion(System.String)">
            <summary>
            Parses field Mime-Version
            </summary>
            <param name="line">String containing Mime-Version</param>
            <returns>Mime-Version value,
            if parsing is not succeed, returns 1.0</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseEmail(System.String)">
            <summary>
            Parses Email address
            </summary>
            <param name="text">String, containing email address</param>
            <returns>Email address.
            Returns null, if address is not parsed</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseTo(System.String)">
            <summary>
            Parses field To
            </summary>
            <param name="text">String containing field To</param>
            <returns>Collection of recipient addresses
            Address would not get into collection, if it is invalid.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseFrom(System.String)">
            <summary>
            Parses field From
            </summary>
            <param name="text">String, containing field From</param>
            <returns>Sender Email address
            Returns null, if address is not parsed</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseSender(System.String)">
            <summary>
            Parses field Sender
            </summary>
            <param name="text">String containing field Sender</param>
            <returns>Real sender email address
            Returns null, if address is not parsed</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseReplyTo(System.String)">
            <summary>
            Parses field Reply-To
            </summary>
            <param name="text">String containing field Reply-To</param>
            <returns>Recipient email addresses
            Address would not get into collection, if it is invalid.</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseDate(System.String)">
            <summary>
            Parses field Date
            </summary>
            <param name="text">String containing field Date</param>
            <returns>Date and time of message sending,
            if parsing is not succeed, returns DateTime.MinValue</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseMessageID(System.String)">
            <summary>
            Parses field Message-Id
            </summary>
            <param name="header">String containing field Message-ID</param>
            <returns>Message-ID value,
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseInReplyTo(System.String)">
            <summary>
            Parses field In-Reply-To
            </summary>
            <param name="header">String containing field In-Reply-To</param>
            <returns>In-Reply-To value,
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseReferences(System.String)">
            <summary>
            Parses field References
            </summary>
            <param name="header">String containing field References</param>
            <returns>References value,
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseSubject(System.String)">
            <summary>
            Parses field Subject
            </summary>
            <param name="header">String containing Subject</param>
            <returns>Subject value
            if parsing is not succeed, returns empty string</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseReturnPatch(System.String)">
            <summary>
            Parses field Return-Patch
            </summary>
            <param name="line">String containing Return-Patch</param>
            <returns>Return-Patch value</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseCarbonCopies(System.String)">
            <summary>
            Parses field Carbon-Copies(CC)
            </summary>
            <param name="text">Text containing field Carbon-Copies</param>
            <returns>Carbon-Copies field value
            address would not get into collection, if it is invalid.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseBlindCarbonCopies(System.String)">
            <summary>
            Parses field Blind-Carbon-Copies (BCC)
            </summary>
            <param name="text">Text containing field Blind-Carbon-Copies</param>
            <returns>Blind-Carbon-Copies value,
            address would not get into collection, if it is invalid.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseComments(System.String)">
            <summary>
            Parses field Comments
            </summary>
            <param name="text">Text containing field Comments</param>
            <returns>Comments value,
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseKeywords(System.String)">
            <summary>
            Parses field Keywords
            </summary>
            <param name="text">String containing Keywords</param>
            <returns>Keywords value</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseContentID(System.String)">
            <summary>
            Parses field Content-id
            </summary>
            <param name="text">String containing Content-id</param>
            <returns>Content-id value,
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseContentDisposition(System.String)">
            <summary>
            Parses field Content-Disposition
            </summary>
            <param name="text">String containing Content-Disposition</param>
            <returns>Content-Disposition value,
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseContentDescription(System.String)">
            <summary>
            Parses field Content-Description
            </summary>
            <param name="text">Text containing Content-Description</param>
            <returns>Content-Description value
            if parsing is not succeed, returns null</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Parsers.MIMEHeaderParser.ParseMIMEXAtribbutes(System.String)">
            <summary>
            Parses x-fields (nonstandart)
            </summary>
            <param name="text">Text containing headers</param>
            <returns>X-fields collection</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Common.Parsers.MultiPartParser">
            <summary>
            Parser of multipart parts of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.MultiPartParser._defaultEncoding">
            <summary>
            Default encoding to use
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.MultiPartParser._childrenReachedFinalBoundary">
            <summary>
            Boolean flag shows that the parser reached the final boundary of the outer part
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.MultiPartParser.Parse(Email.Net.Common.MessageReaders.IMessageReader,Email.Net.Common.EContentTransferEncoding,System.String,System.String,Email.Net.Common.Rfc822Message,Email.Net.Common.ContentType)">
            <summary>
            Parses multipart part of the message, reading it from reader and uses given headers of the part
            </summary>
            <param name="reader">An object to read message from</param>
            <param name="contentTransferEncoding">Transfer encoding of the part</param>
            <param name="boundary">MIME boundary of the part</param>
            <param name="attachmentDirectory">A path to directory where attachments is saved</param>
            <param name="parentMessage">A message object contains part that is being parsed</param>
            <param name="contentType">ContentType of the part</param>
            <returns>A new multipart object</returns>
        </member>
        <member name="M:Email.Net.Common.Parsers.MultiPartParser.childParser_FinalBoundaryReached(System.Object,System.EventArgs)">
            <summary>
            Method that handles events from child parts parsers
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Parameters of the event</param>
        </member>
        <member name="T:Email.Net.Common.Parsers.TextPartParser">
            <summary>
            Parser of a text part of the message
            </summary>
        </member>
        <member name="F:Email.Net.Common.Parsers.TextPartParser._contentWriter">
            <summary>
            Backing field of the ContentWriter property
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.TextPartParser.#ctor(System.String)">
            <summary>
            Initializes a new object
            </summary>
            <param name="charset">Charset of the incoming text part</param>
        </member>
        <member name="M:Email.Net.Common.Parsers.TextPartParser.CreatePart(Email.Net.Common.ContentType,Email.Net.Common.ContentDisposition)">
            <summary>
            Creates new text part with given headers
            </summary>
            <param name="contentType">ContentType of the part</param>
            <param name="contentDisposition">ContentDisposition of the part</param>
            <returns>A newly created TextPart object</returns>
        </member>
        <member name="P:Email.Net.Common.Parsers.TextPartParser.ContentWriter">
            <summary>
            A writer object for saving content of the part
            </summary>
        </member>
        <member name="T:Email.Net.Common.Parsers.Utils">
            <summary>
             Hepler methods for parsing messages in RFC822
            </summary>
        </member>
        <member name="M:Email.Net.Common.Parsers.Utils.ReadHeaders(Email.Net.Common.MessageReaders.IMessageReader)">
            <summary>
            Reads a MIME-header of the message
            </summary>
            <param name="reader">A source reader which provides a message</param>
            <returns>A string which contains MIME-header of the message</returns>
        </member>
        <member name="T:Email.Net.Common.Rfc822Message">
            <summary>
            Encapsulates an e-mail message itself. Used in interactions with SMTP, POP3 and IMAP4 servers
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>19.05.2010</modify>
        </member>
        <member name="F:Email.Net.Common.Rfc822Message.ParseArgumentExceptionMessage">
            <summary>
            Error message «Unknown status of the parser»
            </summary>
        </member>
        <member name="F:Email.Net.Common.Rfc822Message.MIMEVersionExceptionMessage">
            <summary>
            Error message «MIME version is not 1.0»
            </summary>
        </member>
        <member name="M:Email.Net.Common.Rfc822Message.#ctor(Email.Net.Common.EmailAddress,Email.Net.Common.EmailAddress,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Email.Net.Common.Rfc822Message"/> object using the provided source e-mail address, destination 
            e-mail address, subject and text of the message
            </summary>
            <param name="from">Source e-mail address</param>
            <param name="to">Destination e-mail address</param>
            <param name="subject">Subject of the message</param>
            <param name="messageText">Text of the message</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Rfc822Message.#ctor(Email.Net.Common.EmailAddress,Email.Net.Common.Collections.EmailAddressCollection,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Email.Net.Common.Rfc822Message"/> object using the provided source e-mail address, collection of 
            destination e-mail addresses, subject and text of the message
            </summary>
            <param name="from">Source e-mail address</param>
            <param name="to">Destination e-mail addresses collection</param>
            <param name="subject">Subject of the message</param>
            <param name="messageText">Text of the message</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Common.Rfc822Message.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:Email.Net.Common.Rfc822Message"/> object
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Collections.MailboxCollection">
            <summary>
            Collection of Mailbox objects
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Collections.MatchedNameCollection">
            <summary>
            Collection of mailboxes matches with LIST filter expression
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Collections.MessageCollection">
            <summary>
            Collection of mail messages
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Collections.MessageFlagCollection">
            <summary>
            Collection of message flags (like "Seen", "Draft" e.t.c.)
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Collections.MessageFlagCollection.Contains(Email.Net.Imap.EFlag)">
            <summary>
            Check collection for flag
            </summary>
            <param name="flag">search flag</param>
            <returns>true if collection contains target flag and false otherwise</returns>
        </member>
        <member name="M:Email.Net.Imap.Collections.MessageFlagCollection.Contains(System.String)">
            <summary>
            Check collection for flag
            </summary>
            <param name="flag">search flag</param>
            <returns>true if collection contains target flag and false otherwise</returns>
        </member>
        <member name="T:Email.Net.Imap.Collections.NameAttributesCollection">
            <summary>
            Collection of mailbox attributes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Collections.NameAttributesCollection.UnknownAttributeMessage">
            <summary>
            Error message text
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Collections.NameAttributesCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates collection of attributes from collection of attribute's names
            </summary>
            <param name="attributes">Collection of attribute's names</param>
        </member>
        <member name="T:Email.Net.Imap.Collections.UIDCollection">
            <summary>
            Collection of message UID
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.AuthenticationMethodFactory">
            <summary>
            Factory for authentication command control
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.AuthenticationMethodFactory.GetAuthenticationMethodName(Email.Net.Common.Configurations.EAuthenticationType)">
            <summary>
            Convert authentication method name to string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.AuthenticationMethodFactory.CreateAuthenticateCommand(System.String,System.String,System.String)">
            <summary>
            Create command by method name
            </summary>
            <param name="methodName">name of method</param>
            <param name="username">user name</param>
            <param name="password">password</param>
            <returns>command object for authenticate with the pointed method</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.AuthenticationMethodFactory.GetBestAuthenticateCommand(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Create best method for supported by server (CRAM->LOGIN->PLAIN->LOGIN (internal)
            </summary>
            <param name="capabilities">list of serever capabilities</param>
            <param name="username">user name</param>
            <param name="password">password</param>
            <returns>command object for authenticate with selected method</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.AuthenticationMethodFactory.CreateAuthenticateCommand(Email.Net.Common.Configurations.EAuthenticationType,System.String,System.String)">
            <summary>
            Create command by method type
            </summary>
            <param name="type">type of method</param>
            <param name="username">user name</param>
            <param name="password">password</param>
            <returns>command object for authenticate with the pointed method</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.BaseAUTHENTICATECommand">
            <summary>
            Class of AUTHENTICATE command
            For detail see RFC3501
            This command not used in current version
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.IMAP4BaseCommand">
            <summary>
            Abstract command of IMAP4 protocol
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.IMAP4BaseCommand._dispatcher">
            <summary>
            Interact dispatcher
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.IMAP4BaseCommand.Behaviour">
            <summary>
            Performs the underlying action using provided connection
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.IMAP4BaseCommand.StartCommand">
            <summary>
            Start command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.IMAP4BaseCommand.EndCommand">
            <summary>
            End command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.IMAP4BaseCommand.Interact(Email.Net.Imap.IInteractDispatcher)">
            <summary>
            Procced command
            </summary>
            <param name="dispatcher">dispatcher object</param>
            <returns>response for command</returns>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseAUTHENTICATECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseAUTHENTICATECommand._username">
            <summary>
            User name
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseAUTHENTICATECommand._password">
            <summary>
            User password
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseAUTHENTICATECommand.StartCommand">
            <summary>
            Begin of command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseAUTHENTICATECommand.EndCommand">
            <summary>
            End of command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseAUTHENTICATECommand.GetBase64String(System.String)">
            <summary>
            Convert string to base64 representation
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.CRAMAUTHENTICATECommand">
            <summary>
            Class of AUTHENTICATE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.CRAMAUTHENTICATECommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.CRAMAUTHENTICATECommand.Behaviour">
            <summary>
            AUTHENTICATION PLAIN command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.CRAMAUTHENTICATECommand.GenerateBase64CramMD5Credention(System.String)">
            <summary>
            Generate credentional string for sending to server
            </summary>
            <param name="challenge"></param>
            <returns></returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.LOGINAUTHENTICATECommand">
            <summary>
            Class of AUTHENTICATE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.LOGINAUTHENTICATECommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.LOGINAUTHENTICATECommand.Behaviour">
            <summary>
            AUTHENTICATION PLAIN command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.PLAINAUTHENTICATECommand">
            <summary>
            Class of AUTHENTICATE command
            For detail see RFC3501
            This command not used in current version
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.PLAINAUTHENTICATECommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="username">user name</param>
            <param name="password">password</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.PLAINAUTHENTICATECommand.Behaviour">
            <summary>
            AUTHENTICATION PLAIN command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="F:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.NoRealmFieldMessage">
            <summary>
            This string is used for an exception message, if realm field is not discovered in the DIGEST-MD5 message received from a server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.NoOnceFieldMessage">
            <summary>
            This string is used for an exception message, if nonce field is not discovered in the DIGEST-MD5 message received from a server
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.Behaviour">
            <summary>
            AUTHENTICATION PLAIN command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.ComputeResponse(System.String,System.String,System.String)">
            <summary>
            Computes response for the received challenge
            </summary>
            <param name="username">Login</param>
            <param name="password">Password</param>
            <param name="challengeResponse">Received challenge response from the server</param>
            <returns>Response line for received challenge</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.ParseChallenge(System.String)">
            <summary>
            Parses challenge received from the server
            </summary>
            <param name="challenge">Challenge string</param>
            <returns>Parsed challenge as a key-value pair</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.RandomString">
            <summary>
            Returns a random base64-encoded string of 12 characters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.DIGESTAUTHENTICATECommand.Hexify(System.Byte[])">
            <summary>
            Returns hexademical representation of byte array
            </summary>
            <param name="bytes">Bytes to convert</param>
            <returns>Hexademical representation</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.BaseFETCHCommand">
            <summary>
            Base class for any FETCH command (script)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseFETCHCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseFETCHCommand.sizeParserPattern">
            <summary>
            Regex pattern for size parsing
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseFETCHCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseFETCHCommand.StartCommand">
            <summary>
            Begin of command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseFETCHCommand.EndCommand">
            <summary>
            End of command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseFETCHCommand.GetSize(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Get body size from reponse
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.BaseListCommand">
            <summary>
            Base class for LIST command (used by LIST and LSUB command)
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseListCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseListCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseListCommand.referenceName">
            <summary>
            reference name
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseListCommand.cmd">
            <summary>
            command name (LIST or LSUB)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseListCommand.mailboxName">
            <summary>
            mailbox name
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseListCommand.matches">
            <summary>
            Matching mailbox names
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseListCommand.#ctor(System.String,System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            /// <param name="cmd">command name (LIST or LSUB)</param>
            <param name="referenceName">reference name</param>
            <param name="mailboxName">mailbox name with possible wildcards</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseListCommand.Behaviour">
            <summary>
            LIST or LSUB command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseListCommand.MatchedNames">
            <summary>
            Get collection of matching mailbox names
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.BaseSelectCommand">
            <summary>
            Base class for SELECT or EXAMINE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._unseen">
            <summary>
            Count of unseen message in mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._uidnext">
            <summary>
            UID of next message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._uidvalidity">
            <summary>
            Value of uidvalidity
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._exists">
            <summary>
            Count of message in mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand.recent">
            <summary>
            Count of message in mailbox with flag \Recent
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._flags">
            <summary>
            Collection of mailbox flags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._permanentFlags">
            <summary>
            Collection of mailbox permanent flags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._access">
            <summary>
            Access mode for mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._unseenRecieved">
            <summary>
            Flag for unseen parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._uidnextRecieved">
            <summary>
            Flag for uidnext parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._uidvalidityRecieved">
            <summary>
            Flag for uidvalidity parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._existsRecieved">
            <summary>
            Flag for exists parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._recentRecieved">
            <summary>
            Flag for recent parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._flagsRecieved">
            <summary>
            Flag for flags parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._permanentFlagsRecieved">
            <summary>
            Flag for permanent flags parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand._accessRecieved">
            <summary>
            Flag for access mode parameter receive
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.BaseSelectCommand.mailbox">
            <summary>
            selecting mailbox name
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">mailbox name</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessExists(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Process EXISTS response
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessOKUnseen(System.String)">
            <summary>
            Process UNSEEN response
            </summary>
            <param name="unseen"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessOKPermanentFlags(System.String)">
            <summary>
            Process PERMANENTFLAGS response
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessOKUidNext(System.String)">
            <summary>
            Process UIDNEXT response
            </summary>
            <param name="uidNext"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessOKUidValidity(System.String)">
            <summary>
            Process UIDVALIDITY response
            </summary>
            <param name="uidValidity"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessOK(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Process OK response
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessFlags(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Process FLAGS response
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessRecent(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Process RECENT response
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessResponse(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Process server response
            </summary>
            <param name="response">server response</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.ProcessCompletionResponse(Email.Net.Imap.Responses.CompletionResponse)">
            <summary>
            Process complation response
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Email.Net.Imap.Commands.BaseSelectCommand.Behaviour">
            <summary>
            SELECT or EXAMINE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.Unseen">
            <summary>
            Get message count with flag \Unseen
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.UidNext">
            <summary>
            Get UID of next message in mailbox
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.UidValidity">
            <summary>
            Get UIDVALIDITY value
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.Exists">
            <summary>
            Get messages count in mailbox
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.Recent">
            <summary>
            Get messages count with flag \Recent
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.Flags">
            <summary>
            Get collection of mailbox flags
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.PermanentFlags">
            <summary>
            Get collection of permanents flags
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.BaseSelectCommand.Access">
            <summary>
            Get access type for mailbox
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.EIMAP4MailBoxAccessType">
            <summary>
            Enum of mailbox access mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4MailBoxAccessType.ReadOnly">
            <summary>
            Read only
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4MailBoxAccessType.ReadWrite">
            <summary>
            Read and write
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4MailBoxAccessType.Default">
            <summary>
             Determine by server
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.CAPABIILITYCommand">
            <summary>
            Class of CAPABILITY command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CAPABIILITYCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CAPABIILITYCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CAPABIILITYCommand.capabilities">
            <summary>
            List of server capabilities
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.CAPABIILITYCommand.Behaviour">
            <summary>
            CAPABILITY command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.CAPABIILITYCommand.Capabilities">
            <summary>
            Get list of server capabilities
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.CHECKCommand">
            <summary>
            Class of CHECK command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CHECKCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.CHECKCommand.Behaviour">
            <summary>
            CHECK command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.CLOSECommand">
            <summary>
            Class of CLOSE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CLOSECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.CLOSECommand.Behaviour">
            <summary>
            CLOSE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.COPYCommand">
            <summary>
            Class of COPY command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.COPYCommand.mailbox">
            <summary>
            Target mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.COPYCommand.sequence">
            <summary>
            The sequence of messages id, which should be copy
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.COPYCommand.#ctor(Email.Net.Imap.Sequences.ISequence,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="sequence">sequence of coping messages id</param>
            <param name="mailbox">target mailbox</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.COPYCommand.Behaviour">
            <summary>
            COPY command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.CREATECommand">
            <summary>
            Class of CREATE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CREATECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CREATECommand.CreatePattern">
            <summary>
            Mask of command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.CREATECommand._mailbox">
            <summary>
            New mailbox name
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.CREATECommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">new mailbox name</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.CREATECommand.Behaviour">
            <summary>
            CREATE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.DELETECommand">
            <summary>
            Class of DELETE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.DELETECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.DELETECommand.DeletePattern">
            <summary>
            Mask of command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.DELETECommand._mailbox">
            <summary>
            Name of the mailbox to delete
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.DELETECommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">Name of the mailbox to delete</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.DELETECommand.Behaviour">
            <summary>
            DELETE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.EFetchMode">
            <summary>
            Mode for FETCH and UIDFETCH commands
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EFetchMode.Full">
            <summary>
            Receive full message 
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EFetchMode.Header">
            <summary>
            Receive only header of message 
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EFetchMode.Attachment">
            <summary>
            Receive attachment
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EFetchMode.MessageText">
            <summary>
            Receive message without attachments
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.EXAMINECommand">
            <summary>
            Class of SELECT command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EXAMINECommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.EXAMINECommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">target mailbox name</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.EXAMINECommand.Behaviour">
            <summary>
            EXAMINE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.EXPUNGECommand">
            <summary>
            Class of EXPUNGE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EXPUNGECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EXPUNGECommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EXPUNGECommand.removed">
            <summary>
            list of deleted messages id
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.EXPUNGECommand.#ctor">
            <summary>
            Create new instance of class
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.EXPUNGECommand.Behaviour">
            <summary>
            EXPUNGE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.EXPUNGECommand.Removed">
            <summary>
            Get list of deleted messages id
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.LISTCommand">
            <summary>
            Class of LIST command
            For detail see RFC3501
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.LISTCommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="referenceName">reference name</param>
            <param name="mailboxName">mailbox name with possible wildcards</param>
        </member>
        <member name="T:Email.Net.Imap.Commands.LOGINCommand">
            <summary>
            Class of LOGIN command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.LOGINCommand.LoginPattern">
            <summary>
            Mask of command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.LOGINCommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="username">user name</param>
            <param name="password">user password</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.LOGINCommand.Behaviour">
            <summary>
            LOGIN command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.LOGOUTCommand">
            <summary>
            Class of LOGOUT command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.LOGOUTCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.LOGOUTCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.LOGOUTCommand.Behaviour">
            <summary>
            LOGOUT command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.LSUBCommand">
            <summary>
            Class of LSUB command
            For detail see RFC3501
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.LSUBCommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="referenceName">reference name</param>
            <param name="mailboxName">mailbox name with possible wildcards</param>
        </member>
        <member name="T:Email.Net.Imap.Commands.MessageReceivedEventArgs">
            <summary>
            Arguments of event associated with receive message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.MessageReceivedEventArgs._message">
            <summary>
            received message
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.MessageReceivedEventArgs.#ctor(Email.Net.Imap.ImapMessage)">
            <summary>
            Create new instance of class
            </summary>
            <param name="message">received message</param>
        </member>
        <member name="P:Email.Net.Imap.Commands.MessageReceivedEventArgs.Message">
            <summary>
            Get received message
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.NOOPCommand">
            <summary>
            Class of NOOP command
            For detail see RFC3501
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.NOOPCommand.Behaviour">
            <summary>
            NOOP command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.RENAMECommand">
            <summary>
            Class of RENAME command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.RENAMECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.RENAMECommand.LoginPattern">
            <summary>
            Mask of command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.RENAMECommand._oldname">
            <summary>
            current name of mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.RENAMECommand._newname">
            <summary>
            New name of mailbox
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.RENAMECommand.#ctor(System.String,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="oldName">current name of mailbox</param>
            <param name="newName">new name of mailbox</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.RENAMECommand.Behaviour">
            <summary>
            RENAME command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.SEARCHCommand">
            <summary>
            Class of SEARCH command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SEARCHCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SEARCHCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SEARCHCommand.encoding">
            <summary>
            encoding
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SEARCHCommand.query">
            <summary>
            query
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SEARCHCommand._uids">
            <summary>
            uids collection
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.SEARCHCommand.#ctor(System.Text.Encoding,Email.Net.Imap.Query)">
            <summary>
            Create new instance of class
            </summary>
            <param name="encoding">encoder (if null then using US-ASCII)</param>
            <param name="query">search query object</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.SEARCHCommand.ParseResponse(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Parse server response for messages uid
            </summary>
            <param name="response">server response</param>
            <returns>collection of messages id, which match search query</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.SEARCHCommand.Behaviour">
            <summary>
            SEARCH command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.SEARCHCommand.Uids">
            <summary>
            getter for _uids
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.SELECTCommand">
            <summary>
            Class of SELECT command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SELECTCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.SELECTCommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">mailbox name</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.SELECTCommand.Behaviour">
            <summary>
            SELECT command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.STARTTLSCommand">
            <summary>
            Class of STARTTLS command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STARTTLSCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.STARTTLSCommand.Behaviour">
            <summary>
            STARTTLS command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.STATUSCommand">
            <summary>
            Class of STATUS command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.command">
            <summary>
            Command text
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.messages">
            <summary>
            Messages count
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.recent">
            <summary>
            Recent messages count
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.uidnext">
            <summary>
            UID of next message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.uidvalidity">
            <summary>
            UIDVALIDITY value
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STATUSCommand.unseen">
            <summary>
            Unseen message count
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.STATUSCommand.#ctor(System.String,System.Collections.Generic.IEnumerable{Email.Net.Imap.Commands.EIMAP4StatusRequest})">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">mailbox name</param>
            <param name="requests">collection of status requests</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.STATUSCommand.Behaviour">
            <summary>
            STATUS command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.STATUSCommand.Messages">
            <summary>
            Get messages count in mailbox
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.STATUSCommand.Recent">
            <summary>
            Get messages count with flag \Recent
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.STATUSCommand.UidNext">
            <summary>
            Get UID of next message in mailbox
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.STATUSCommand.UidValidity">
            <summary>
            Get UIDVALIDITY value
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Commands.STATUSCommand.Unseen">
            <summary>
            Get message count with flag \Unseen
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.EIMAP4StatusRequest">
            <summary>
            Enum of STATUS command mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4StatusRequest.Messages">
            <summary>
            Get count of messages in mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4StatusRequest.Recent">
            <summary>
            Get count of messages with flag \Recent
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4StatusRequest.UidNext">
            <summary>
            Get UID of next message in mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4StatusRequest.UidValidity">
            <summary>
            Get UIDVALIDITY value
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.EIMAP4StatusRequest.Unseen">
            <summary>
            Get count of message with flags \Unseen
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.STORECommand">
            <summary>
            Class of STORE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STORECommand._exUnknownMode">
            <summary>
            Exception message for unknow flag mode 
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STORECommand._sequence">
            <summary>
            Sequence of messages id for set flags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STORECommand._flags">
            <summary>
            Collection of lfags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.STORECommand._mode">
            <summary>
            Mode for setting flags
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.STORECommand.#ctor(Email.Net.Imap.Sequences.ISequence,System.Collections.Generic.IEnumerable{System.String},Email.Net.Imap.EFlagMode)">
            <summary>
            Create new instance of class
            </summary>
            <param name="sequence">sequence of messages for set flags</param>
            <param name="flags">collection of flag</param>
            <param name="mode">mode for set flag</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.STORECommand.Behaviour">
            <summary>
            STORE command logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.STORECommand.GetFlagSetMode(Email.Net.Imap.EFlagMode)">
            <summary>
            Convert flag mode to string
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.STORECommand.JoinFlags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert flag collection to string
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.SUBSCRIBECommand">
            <summary>
            Class of SUBSCRIBE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SUBSCRIBECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SUBSCRIBECommand.SubscribePattern">
            <summary>
            Mask of command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.SUBSCRIBECommand._mailbox">
            <summary>
            Mailbox name for subscribe
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.SUBSCRIBECommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">name of mailbox for subscribing</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.SUBSCRIBECommand.Behaviour">
            <summary>
            CREATE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.UIDCOPYCommand">
            <summary>
            Class of composite command UID + FETCH
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDCOPYCommand.mailbox">
            <summary>
            Target mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDCOPYCommand.sequence">
            <summary>
            The sequence of messages id, which should be copy
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDCOPYCommand.#ctor(Email.Net.Imap.Sequences.ISequence,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="sequence">sequence of coping messages id</param>
            <param name="mailbox">target mailbox</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDCOPYCommand.Behaviour">
            <summary>
            UID + COPY command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.UIDSEARCHCommand">
            <summary>
            Class of composite command UID + SEARCH
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSEARCHCommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSEARCHCommand.filter">
            <summary>
            Filter for receive response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSEARCHCommand.encoding">
            <summary>
            encoding
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSEARCHCommand.query">
            <summary>
            query
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSEARCHCommand._uids">
            <summary>
            uids collection
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSEARCHCommand.#ctor(System.Text.Encoding,Email.Net.Imap.Query)">
            <summary>
            Create new instance of class
            </summary>
            <param name="encoding">encoder (if null then using US-ASCII)</param>
            <param name="query">search query object</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSEARCHCommand.ParseResponse(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Parse server response for messages uid
            </summary>
            <param name="response">server response</param>
            <returns>collection of messages id, which match search query</returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSEARCHCommand.Behaviour">
            <summary>
            UID + SEARCH command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Commands.UIDSEARCHCommand.Uids">
            <summary>
            getter for _uids
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Commands.UIDSTORECommand">
            <summary>
            Class of composite command UID + STORE
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSTORECommand._exUnknownMode">
            <summary>
            Exception message for unknow flag mode 
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSTORECommand._sequence">
            <summary>
            Sequence of messages id for set flags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSTORECommand._flags">
            <summary>
            Collection of lfags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UIDSTORECommand._mode">
            <summary>
            Mode for setting flags
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSTORECommand.#ctor(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)">
            <summary>
            Create new instance of class
            </summary>
            <param name="sequence">sequence of messages for set flags</param>
            <param name="flags">collection of flag</param>
            <param name="mode">mode for set flag</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSTORECommand.Behaviour">
            <summary>
            UID + STORE command logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSTORECommand.GetFlagSetMode(Email.Net.Imap.EFlagMode)">
            <summary>
            Convert flag mode to string
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Commands.UIDSTORECommand.JoinFlags(System.Collections.Generic.IEnumerable{Email.Net.Imap.MessageFlag})">
            <summary>
            Convert flag collection to string
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:Email.Net.Imap.Commands.UNSUBSCRIBECommand">
            <summary>
            Class of UNSUBSCRIBE command
            For detail see RFC3501
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UNSUBSCRIBECommand.UnexpectedResponseMessage">
            <summary>
            Exception message for UnexpectedResponseException
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UNSUBSCRIBECommand.SubscribePattern">
            <summary>
            Mask of command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Commands.UNSUBSCRIBECommand._mailbox">
             <summary>
            Mailbox name for unsubscribe
             </summary>
        </member>
        <member name="M:Email.Net.Imap.Commands.UNSUBSCRIBECommand.#ctor(System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="mailbox">name of mailbox for unsubscribing</param>
        </member>
        <member name="M:Email.Net.Imap.Commands.UNSUBSCRIBECommand.Behaviour">
            <summary>
            UNSUBSCRIBE command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Imap.EClientState">
            <summary>
            Internal state of IMAP client
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EClientState.Disconnected">
            <summary>
            Disconnected from server (initial state)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EClientState.Connected">
            <summary>
            Connected to server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EClientState.Loggined">
            <summary>
            Loggined on server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EClientState.Selected">
            <summary>
            Selected mailbox
            </summary>
        </member>
        <member name="T:Email.Net.Imap.EFlag">
            <summary>
            Predefined flag set for messages
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.NonStandart">
            <summary>
            Flag is not a one of predifined flags.
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.Deleted">
            <summary>
            Deleted flag. A marked message marked to delete.
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.Seen">
            <summary>
            Seen flag. A marked message was seen.
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.Draft">
            <summary>
            Draft flag. A message marked as draft.
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.Answered">
            <summary>
            Answered flag. A message was answered.
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.Flagged">
            <summary>
            Flagged flag.
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlag.Recent">
            <summary>
            Recent flag. A message is recent
            </summary>
        </member>
        <member name="T:Email.Net.Imap.EFlagMode">
            <summary>
            Message's flag changing mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlagMode.Add">
            <summary>
            Append given flags to existing
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlagMode.Remove">
            <summary>
            Reset given flags
            </summary>
        </member>
        <member name="F:Email.Net.Imap.EFlagMode.Replace">
            <summary>
            Replace existing set of flags with given set
            </summary>
        </member>
        <member name="T:Email.Net.Imap.ENameAttribute">
            <summary>
            Mailbox attributes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ENameAttribute.Noinferiors">
            <summary>
            Mailbox cannot have child nodes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ENameAttribute.Noselect">
            <summary>
            Mailbox cannot selected
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ENameAttribute.Marked">
            <summary>
            Mailbox marked by server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ENameAttribute.Unmarked">
            <summary>
            No new message in mailbox
            </summary>
        </member>
        <member name="T:Email.Net.Imap.ESuddenResponseType">
            <summary>
            Predefined types of the sudden responses
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ESuddenResponseType.Exists">
            <summary>
            Exist response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ESuddenResponseType.Recent">
            <summary>
            Recent response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ESuddenResponseType.Status">
            <summary>
            Status response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ESuddenResponseType.Other">
            <summary>
            Other response
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Events.AttachReceivedArgs">
            <summary>
            Argument of event associated with IMAP4AttachReceived event
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Events.AttachReceivedArgs._message">
            <summary>
            The message which ows attachment
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Events.AttachReceivedArgs._attachmentDescription">
            <summary>
            Description of received attachment
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Events.AttachReceivedArgs.#ctor(Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.Attachment)">
            <summary>
            Create new instanse of class
            </summary>
            <param name="message"></param>
            <param name="attachmentDescription"></param>
        </member>
        <member name="P:Email.Net.Imap.Events.AttachReceivedArgs.Message">
            <summary>
            Get message which ows attachment
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Events.AttachReceivedArgs.ReceivedAttachmentDescription">
            <summary>
            Get description of received attachment
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Events.AttachReceivedEventHandler">
            <summary>
             Represent a method that will handle IMAP4AttachmentReceived event
            </summary>
            <param name="sender">The sourse of event</param>
            <param name="args">Event argument</param>
        </member>
        <member name="T:Email.Net.Imap.Events.BrokenMessageEventHandler">
            <summary>
            Represents a method that will handle Client event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Email.Net.Imap.Events.BrokenMessageInfoArgs">
            <summary>
            Arguments of event associated with receive broken message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Events.BrokenMessageInfoArgs._uid">
            <summary>
            uid of broken message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Events.BrokenMessageInfoArgs._size">
            <summary>
            size (in bytes) of broken message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Events.BrokenMessageInfoArgs._message">
            <summary>
            errod description
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Events.BrokenMessageInfoArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="P:Email.Net.Imap.Events.BrokenMessageInfoArgs.Message">
            <summary>
            Get error description
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Events.ClientEventHandler">
            <summary>
            Represents a method that will handle IMAP4Client events
            </summary>
            <param name="sender">The source of the event</param>
        </member>
        <member name="T:Email.Net.Imap.Events.MessageReceivedEventHandler">
            <summary>
            Represents a method that will handle events on message being succesful received
            </summary>
            <param name="sender">The source of the event</param>
            <param name="message">Received message</param>
        </member>
        <member name="T:Email.Net.Imap.Events.ServerResponseReceived">
            <summary>
            A method that will handle events associated with message being received
            </summary>
            <param name="sender">The source of the event</param>
            <param name="response">Received response</param>
        </member>
        <member name="T:Email.Net.Imap.Events.ServerResponseReceivedEventArgs">
            <summary>
            Arguments of event associated with response being received from server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Events.ServerResponseReceivedEventArgs._response">
            <summary>
            Received response
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Events.ServerResponseReceivedEventArgs.#ctor(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="response">The object that incapsulates server response</param>
        </member>
        <member name="P:Email.Net.Imap.Events.ServerResponseReceivedEventArgs.ReceivedResponse">
            <summary>
            Response being received from server
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Events.StateChangedEventHandler">
            <summary>
             Represents a method that will handle event occured when 
             state of the active mailbox was changed
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.BadMailboxException">
            <summary>
            An exception generated when trying to get access to the mailbox 
            that doesn't exists or user have no permission for it.
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.BadMailboxException.#ctor(System.String)">
            <summary>
            Creates a new instance of object
            </summary>
            <param name="message">The description of exception</param>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.ExpectedResponseException">
            <summary>
            An exception generated when server does not send any nessesary response (marked as required in rfc 3501)
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.ImapException">
            <summary>
            Base class for IMAP4-client exceptions
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.ImapException.#ctor">
            <summary>
            Initializes a new instance of class ImapException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.ImapException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class ImapException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.ExpectedResponseException.#ctor">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.ExpectedResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.IncorrectResponseException">
            <summary>
            An exception generated when server response different from RFC description
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.IncorrectResponseException.#ctor">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.IncorrectResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.UnexpectedCommandIDException">
            <summary>
            An exception generated when current state of the protocol not allowed perfom user action
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.UnexpectedCommandIDException.#ctor">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.UnexpectedCommandIDException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.UnexpectedResponseException">
            <summary>
            An exception generated when received response does not coincide with the expected response to client
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.UnexpectedResponseException.#ctor">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.UnexpectedResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Imap.Exceptions.UnknownNameAttributeException">
            <summary>
            An exception generated when responce to LIST and LSUB request contains unknow attribute
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.UnknownNameAttributeException.#ctor">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Exceptions.UnknownNameAttributeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of class UnexpectedResponseException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Imap.IInteractDispatcher">
            <summary>
            Interface of client-server interact dispatcher 
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.Open">
            <summary>
            Establish connection with server
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.SwitchToSslChannel">
            <summary>
            Switch connection to SSL mode
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.Close">
            <summary>
            Close connection
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.SendCommand(System.String)">
            <summary>
            Send command to server
            </summary>
            <param name="command">command text</param>
            <returns>tag for sended command (UID of command)</returns>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.SendCommand(System.String,Email.Net.Imap.Responses.ResponseFilter)">
            <summary>
            Send command to server this filtering result
            </summary>
            <param name="command">command text</param>
            <param name="filter">filter</param>
            <returns>tag for sended command (UID of command)</returns>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.SendContinuationCommand(System.String)">
            <summary>
            Send continuation command to server this filtering result
            </summary>
            <param name="command">command text</param>
            <returns>tag for sended command (UID of command)</returns>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.GetResponse(System.UInt32)">
            <summary>
            Receive response for command
            The program will stop until response for target command dos not received
            </summary>
            <param name="commandId">UID of command</param>
            <returns>response for command</returns>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.GetMonopolyAccess">
            <summary>
            Enter to critical section
            Only one command can execute in monopoly mode
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.GetAccess">
            <summary>
            Enter to normal execute section
            Monopoly command cannot execute while any normal command execute
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.ReleaseMonopolyAccess">
            <summary>
            Exit from critical section
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.ReleaseAccess">
            <summary>
            Exit from normal execute section
            </summary>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.GetRawData(System.UInt64)">
            <summary>
            Get raw data
            This method avalible only in monopoly mode
            RAW data return for current monopoly command
            </summary>
            <returns>raceived RAW data</returns>
        </member>
        <member name="M:Email.Net.Imap.IInteractDispatcher.GetRawData">
            <summary>
            Get raw data
            </summary>
            <returns>received raw data</returns>
        </member>
        <member name="E:Email.Net.Imap.IInteractDispatcher.ServerResponseReceived">
            <summary>
            Occurs when dispatcher reseive response initialize by the server
            </summary>
        </member>
        <member name="T:Email.Net.Imap.ImapClient">
            <summary>
            Client to interact with email server by IMAP4 protocol
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient.exIncorrectLogin">
            <summary>Exception message for bad login</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient.exIncorrectPassword">
            <summary>Exception message for bad password</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient.exLoginRequired">
            <summary>Exception message for bad action in current context</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient.exUnknownProxyType">
            <summary>Exception message bad proxy type</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exMailboxNameRequired">
            <summary>Exception message for bad mailbox name</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exNullMailbox">
            <summary>Exception message for bad mailbox</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exNullRootMailbox">
            <summary>Exception message for bad root mailbox</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exHierarchyDelimiterInMailbox">
            <summary>Exception message for bad mailbox name</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exMessageSequenceCannotBeNull">
            <summary>Exception message for bad squence</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exSourceMailboxCannotBeNull">
            <summary>Exception message for bad source mailbox</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exDestinationMailboxCannotBeNull">
            <summary>Exception message for bad destination mailbox</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exNullQuery">
            <summary>Exception message for null query</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exFailToSelect">
            <summary>Exception message for bad mailbox</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exBadAsyncResult">
            <summary>Exception message for bad async result</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exInvalidMailboxName">
            <summary>Exception message for bad mailbox name</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exNullFlag">
            <summary>Exception message for bad flags</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exMailboxCannotBeNull">
            <summary>Exception message for bad mailbox</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exCollectionOfUidCannotBeNull">
            <summary>Exception message for bad argument</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exEndUIDLessStartUID">
            <summary>Exception message for bad argument</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._exCapabilityError">
            <summary>
            A message for the <see cref="T:Email.Net.Imap.Exceptions.ImapException"/> if a server have sent a bad response on CAPABILITY command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._defaultHierarchyDelimiter">
            <summary>Default hierarhy delimiter</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._taskSize">
            <summary>Maximum fetch task size per command</summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._InboxMailbox">
            <summary>
            Name of INBOX mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._connectionFactory">
            <summary>
            A field is used by <see cref="T:Email.Net.Common.Connections.ConnectionFactory"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._dispatcher">
            <summary>
            Manager to control interaction between client and server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._configurationProvider">
            <summary>
            Configuration parameters
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._login">
            <summary>
            User login. It is used to authentificate to the server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._password">
            <summary>
            User password. It is used to authentificate to the server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._connection">
            <summary>
            Connection to the server
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._state">
            <summary>
            The current state of the client (authorized or not)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapClient._activeMailbox">
            <summary>
            The current active mailbox. It has being selected by 
            <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method call.
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.#ctor">
            <summary>
            Creates a new instance of class
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="container">Container which will store a component instance</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Login">
            <summary>
				Authenticates user to the server
			</summary><returns>The response received from the server</returns><seealso cref="M:Email.Net.Imap.ImapClient.Logout"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginLogin(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndLogin(System.IAsyncResult)"/><example>
				The following example shows how to login and logout on the IMAP server using the TLS interation type
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="LoginExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="LoginExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Logout">
            <summary>
				Breaks the connection to the server with the logout command
			</summary><returns>The response received from the server</returns><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.Login"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginLogout(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndLogout(System.IAsyncResult)"/><example>
				The following example shows how to login and logout on the IMAP server using the TLS interation type
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="LogoutExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="LogoutExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetAllMessageHeaders(Email.Net.Imap.Mailbox)">
            <summary>
				Requests headers of all messages in the given mailbox
			</summary><param name="mailbox">
				A mailbox. A mailbox tree can be retrieved
				with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods
			</param><returns>
				A collection of messages with setted up header
				parameters (size, sender, e.t.c.)
			</returns><remarks>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods
				</para>
				<para>
					This method executes the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.GetFullMessage(System.UInt32,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetAllMessageHeaders(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetAllMessageHeaders(System.IAsyncResult)"/><example>
				The following example shows how to get all message headers in the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetAllMessageHeadersExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetAllMessageHeadersExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;GetMessagesHeader&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)">
            <summary>
        Requests headers of a sequense of messages in the given mailbox
      </summary><param name="mailbox">
				A mailbox. A mailbox tree can be retrieved
				with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods
			</param><param name="start">A uid of the start message</param><param name="end">A uid of the end message</param><returns>
				A collection of messages with setted up header
				parameters (size, sender, e.t.c.)
			</returns><remarks>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods
				</para>
				<para>
					This method executes the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when a uids collection is null
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.GetAllMessageHeaders(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetFullMessage(System.UInt32,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32},System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMessagesHeader(System.IAsyncResult)"/><example>
				The following example shows how to get a message with the UID from 10 to 60 headers in the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetMessageHeader2Example"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetMessageHeader2Example"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetAttachment(Email.Net.Imap.Mailbox,Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.Attachment)">
            <summary>
				Requests a content of the given attachment from the server
			</summary><param name="mailbox">A mailbox which contains the message with an attachment</param><param name="message">A message wich owns the attachment</param><param name="attachment">A description of the attachment to receive</param><seealso cref="M:Email.Net.Imap.ImapClient.GetMessageText(System.UInt32,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxCollection"/><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have permisson on it
			</exception><example>
				The folowing example shows how to request a message header from the server
				and to receive one of its attachments
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetAttachmentExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetAttachmentExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetFullMessage(System.UInt32,Email.Net.Imap.Mailbox)">
            <summary>
				Requests a full message from the server
			</summary><param name="uid">
				A UID of the requested message. The UID of the message can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetAllMessageHeaders(Email.Net.Imap.Mailbox)">GetAllMessageHeaders</see>,
				<see cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)">GetMessagesHeader</see>,
				<see cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})">GetMessagesHeader</see> or
				<see cref="M:Email.Net.Imap.ImapClient.Search(Email.Net.Imap.Query,Email.Net.Imap.Mailbox)">Search</see> methods.
			</param><param name="mailbox">
				A mailbox which contains the message. A
				mailbox tree can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
				methods
			</param><returns>A retreived message</returns><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method executes the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.GetAllMessageHeaders(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetFullMessage(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetFullMessage(System.IAsyncResult)"/><example>
				The following example shows how to get a message by its UID
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetFullMessageExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetFullMessageExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetMessageText(System.UInt32,Email.Net.Imap.Mailbox)">
            <summary>
				Requests a message text (plain and HTML) without attachments from the server
			</summary><param name="uid">
				A UID of the requested message. The UID of the message can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetAllMessageHeaders(Email.Net.Imap.Mailbox)">GetAllMessageHeaders</see>,
				<see cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)">GetMessagesHeader</see>,
				<see cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})">GetMessagesHeader</see> or
				<see cref="M:Email.Net.Imap.ImapClient.Search(Email.Net.Imap.Query,Email.Net.Imap.Mailbox)">Search</see> methods.
			</param><param name="mailbox">
				A mailbox which contains the message. A
				mailbox tree can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
				methods
			</param><returns>A retreived message</returns><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the<see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessageText(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMessageText(System.IAsyncResult)"/><example>
				The following example shows how to get a message without attchments by its UID
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetMessageTextExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetMessageTextExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetMailboxCollection">
            <summary>
				Requests a collection of existing mailboxes from the server
			</summary><returns>A collection of top-level mailboxes or null on request failure</returns><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxCollection"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxCollection(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMailboxCollection(System.IAsyncResult)"/><example>
				The following example shows how to login, retrieve mailbox a collection
				of top-level folders and logout on the IMAP server using the TLS interation type
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetMailboxCollectionExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetMailboxCollectionExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxCollection">
            <summary>
				Requests a collection of top-level mailboxes from the server
			</summary><returns>A collection of top-level mailboxes or null on request failure</returns><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxCollection"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxCollection(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxCollection(System.IAsyncResult)"/><example>
				The following example shows how to login, retrieve mailbox a collection
				of top-level folders and logout on the IMAP server using the TLS interation type
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetSubscribedMailboxCollectionExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetSubscribedMailboxCollectionExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetMailboxTree">
            <summary>
				Requests a mailbox tree from the server
			</summary><returns>
				A root of the mailbox tree. The root node is a fake
				mailbox which actualy doesn't exist at the server
			</returns><remarks>
				A mailbox tree can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
				methods
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxTree(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMailboxTree(System.IAsyncResult)"/><example>
				The following example shows how to login, retrieve mailbox a collection
				of top-level folders and logout on the IMAP server using the TLS interation type
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetMailboxTreeExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetMailboxTreeExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">
            <summary>
				Requests a mailbox tree form the server which contains only
				mailboxes which current user has subscribed to
			</summary><returns>
				A root of the mailbox tree. The root node is a fake
				mailbox which actualy doesn't exist at the server
			</returns><remarks>
				A mailbox tree can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
				methods
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxTree(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxTree(System.IAsyncResult)"/><example>
				The following example shows how to retrieve a subscribed mailbox hierarhy,
				login and logout on the IMAP server using the TLS interation type
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetSubscribedMailboxTreeExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetSubscribedMailboxTreeExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetMessageCount(Email.Net.Imap.Mailbox)">
            <summary>
				Requests an amount of messages in the given mailbox
			</summary><param name="mailbox">
				A mailbox. The mailbox tree can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
				methods
			</param><returns>An ammount of messages</returns><remarks>
				A mailbox tree can be retrieved with
				<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
				methods
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessageCount(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMessageCount(System.IAsyncResult)"/><example>
				The following example shows how to get a message count in the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="GetMessageCountExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="GetMessageCountExample"/>			
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Copy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox)">
            <summary>
				Copies a given messages sequence from the source mailbox into
				the destination mailbox.
			</summary><param name="source">A source mailbox to copy the message from</param><param name="uidSequence">A collection of the message uids</param><param name="destination">
				A destination mailbox to copy
				the message into
			</param><returns>A response received from the server</returns><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when at least one of parameters (<paramref name="uidSequence"/>,
				<paramref name="source"/>, <paramref name="destination"/>) is not set.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginCopy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndCopy(System.IAsyncResult)"/><example>
				The following example shows how to copy an unseen message to the another mailbox (with name 'Unseen')
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="CopyExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="CopyExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String)">
            <summary>
				Creates a new mailbox
			</summary><param name="folderName">A mailbox name</param><returns>A response received from the server</returns><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentException">
				Occurs when the <paramref name="folderName"/> parameter is not set or contains
				an empty string
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.DeleteMailbox(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.RenameMailbox(Email.Net.Imap.Mailbox,System.String)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)"/><example>
				The following example shows how to create a mailbox in the root namespace
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="CreateMailboxExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="CreateMailboxExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String,Email.Net.Imap.Mailbox)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;CreateMailbox2&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.DeleteMailbox(Email.Net.Imap.Mailbox)">
            <summary>
				Deletes an existing mailbox
			</summary><param name="mailbox">An object which refers to the target mailbox</param><remarks>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authentificate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><returns>A response received from the server</returns><seealso cref="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.RenameMailbox(Email.Net.Imap.Mailbox,System.String)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginDeleteMailbox(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndDeleteMailbox(System.IAsyncResult)"/><example>
				The following example shows how to delete a mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="DeleteMailboxExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="DeleteMailboxExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.DeleteMarkedMessages(Email.Net.Imap.Mailbox)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;DeleteMarkedMessages&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.RenameMailbox(Email.Net.Imap.Mailbox,System.String)">
            <summary>
				Renames an existing mailbox
			</summary><param name="mailbox">A target mailbox</param><param name="name">A new name for the mailbox</param><returns>a response received from the server</returns><remarks>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
				<para>
					A Mailbox name can't contain the symbol "/" because it is used as the hierachym
					delimiter symbol.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.FormatException">
				Occurs when a specified mailbox name contains the hierarchy
				delimiter symbol
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><exception cref="T:System.ArgumentException">
				Occurs when the <paramref name="name"/> parameter is not set or contains an empty
				string
			</exception><example>The folowing example shows how to rename an existing mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="RenameMailboxExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="RenameMailboxExample"/>
				<seealso cref="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String)"/>
				<seealso cref="M:Email.Net.Imap.ImapClient.DeleteMailbox(Email.Net.Imap.Mailbox)"/>
				<seealso cref="M:Email.Net.Imap.ImapClient.BeginRenameMailbox(Email.Net.Imap.Mailbox,System.String,System.AsyncCallback)"/>
				<seealso cref="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Search(Email.Net.Imap.Query,Email.Net.Imap.Mailbox)">
            <summary>
				Searches messages in the given mailbox that match the query criteria.
			</summary><param name="query">A query object</param><param name="mailbox">A mailbox to search messages in</param><returns>
				A collection of UIDs for messages which match the given
				criteria
			</returns><remarks>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
				<para>
					A query object can be constructed with helper methods of the
					<see cref="T:Email.Net.Imap.Query">Query</see> class
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <paramref name="query"/> or <paramref name="mailbox"/>
				parameters are not set
			</exception><example>
				The folowing example shows how to find all messages larger than 10KB
				contained in the INBOX mailbox.
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="SearchExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="SearchExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginSearch(Email.Net.Imap.Query,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndSearch(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Subscribe(Email.Net.Imap.Mailbox)">
            <summary>
				Subscribes to the specified mailbox.
			</summary><param name="mailbox">A target mailbox</param><returns>A response received from the server</returns><remarks>
				<para>
					Mailboxes which a current user subscribed to can be retrieved to
					with the <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see> method
				</para>
				<para>
					To request a full mailbox tree from the server use the
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> method.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception>
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><example>
				The folowing example shows how to subscribe to the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="SubscribeExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="SubscribeExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.Unsubscribe(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginSubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndSubscribe(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Unsubscribe(Email.Net.Imap.Mailbox)">
            <summary>
				Unsubscribes from the specified mailbox.
			</summary><param name="mailbox">Target mailbox</param><returns>A response received from the server</returns><remarks>
				<para>
					Mailboxes which current user subscribed to can be retrieved to
					with <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see> method
				</para>
				<para>
					To request a full mailbox tree from the server use the
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> method.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <paramref name="mailbox"/> parameter is not set
			</exception><example>
				The folowing example shows how to unsubscribe from the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="UnsubscribeExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="UnsubscribeExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.Subscribe(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginUnsubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndUnsubscribe(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.MarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)">
            <summary>
				Marks a sequence of messages with the "Delete" flag
			</summary><param name="uidSequence">A sequence of message uids</param><param name="mailbox">A mailbox which contains messages to mark</param><returns>A response received from the server</returns><remarks>
				<para>
					Messages marked to delete are still exist on the server. They
					will be actualy deleted after execution of the
					<see cref="M:Email.Net.Imap.ImapClient.DeleteMarkedMessages(Email.Net.Imap.Mailbox)">DeleteMarkedMessages</see> method
				</para>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <paramref name="mailbox"/> or <paramref name="uidSequence"/>
				parameter is not set
			</exception><example>
				The folowing example shows how to mark all messages contained
				in the "INBOX" mailbox with the "Deleted" flag.
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="MarkAsDeletedExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="MarkAsDeletedExample"/>	
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsDeleted(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.MarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)">
            <summary>
				Resets the "Deleted" flag for a given sequence of messages.
			</summary><param name="uidSequence">A sequence of message uids</param><param name="mailbox">A mailbox which contains messages to mark</param><returns>A response received from the server</returns><remarks>
				<para>
					Messages marked to delete are still exist on the server. They
					will be actualy deleted after execution of the
					<see cref="M:Email.Net.Imap.ImapClient.DeleteMarkedMessages(Email.Net.Imap.Mailbox)">DeleteMarkedMessages</see> method
				</para>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <paramref name="mailbox"/> or <paramref name="uidSequence"/>
				parameter is not set
			</exception><example>
				The folowing example shows how to reset the "Deleted" mark on the
				all messages contained in the "INBOX" mailbox.
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="MarkAsUndeletedExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="MarkAsUndeletedExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsUndeleted(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.MarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)">
            <summary>
				Marks a sequence of messages with the "Seen" flag
			</summary><param name="uidSequence">A sequence of message uids</param><param name="mailbox">A mailbox which contains messages to mark</param><returns>A response received from the server</returns><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <paramref name="mailbox"/> or <paramref name="uidSequence"/>
				parameter is not set
			</exception><example>
				The folowing example shows how to use the MarkAsSeen method to mark
				all messages contained in the "INBOX" mailbox as seen
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="MarkAsSeenExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="MarkAsSeenExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsSeen(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.MarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)">
            <summary>
				Resets the "Seen" flag for a given sequence of messages.
			</summary><param name="uidSequence">A sequence of message uids</param><param name="mailbox">A mailbox which contains messages to mark</param><returns>A response received from the server</returns><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <paramref name="mailbox"/> or <paramref name="uidSequence"/>
				parameter is not set
			</exception><example>
				The folowing example shows how to use the MarkAsUnsee method to mark
				all messages contained in the "INBOX" mailbox as unseen
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="MarkAsUnseenExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="MarkAsUnseenExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsUnseen(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)">
            <summary>
				Marks a mesaage sequence with the specified flag set
			</summary><param name="uidSequence">A sequence of message uids</param><param name="mailbox">A mailbox which contains messages to mark</param><param name="flags">A flag set</param><param name="mode">
				A flag modification <see cref="T:Email.Net.Imap.EFlagMode">mode</see>
			</param><returns>A response received from the server</returns><remarks>
				<para>
					A mailbox tree can be retrieved with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/>
					or <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods.
				</para>
				<para>
					This method calls the <see cref="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)"/> method to set a
					current mailbox.
				</para>
			</remarks><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when one of parameters (<paramref name="uidSequence"/>,
				<paramref name="mailbox"/>, <paramref name="flags"/>) is not set
			</exception><example>
				The folowing example shows how to use the SetMessageFlags method to mark
				all messages contained in the "INBOX" mailbox as seen
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="SetMessageFlags"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="SetMessageFlags"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginSetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndSetMessageFlags(System.IAsyncResult)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Noop">
            <summary>
				Sends the NoOp request to the server
			</summary><returns>A response received from the server</returns><remarks>
				This method can be used to hold a connection to the server during long
				periods of client inactivity
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.BeginNoop(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndNoop(System.IAsyncResult)"/><example>
				This example shows how to hold a connection to the server with the NoOp
				command
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="NoopExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="NoopExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Select(Email.Net.Imap.Mailbox)">
            <summary>
				Sets a current active mailbox on the server
			</summary><exception cref="T:System.ArgumentNullException">Occurs when the selected mailbox is null</exception><param name="mailbox">A mailbox</param><returns>A response received from the server</returns>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginLogin(System.AsyncCallback)">
            <summary>
				Asynchronously starts the authentification command.
			</summary><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndLogin(System.IAsyncResult)">EndLogin</see>
				method
			</returns><remarks>
				You can use the <see cref="M:Email.Net.Imap.ImapClient.EndLogin(System.IAsyncResult)">EndLogin</see> method to
				obtain the server response.
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.EndLogin(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Login"/><seealso cref="M:Email.Net.Imap.ImapClient.Logout"/><example>
				The following example shows how to use asynchronous methods
				to login on the server
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginLoginExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginLoginExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndLogin(System.IAsyncResult)">
            <summary>
				Retreives results of the authentication.
			</summary><param name="result">
				The object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginLogin(System.AsyncCallback)">BeginLogin</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				This method should be called when command execution is already
				finished. In another case the calling thread will be blocked until
				the opperation finishes
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.BeginLogin(System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to login on the server
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginLoginExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginLoginExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginLogout(System.AsyncCallback)">
            <summary>
				Asynchronously breaks a connection to the server.
			</summary><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				An object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndLogout(System.IAsyncResult)">EndLogout</see>
				method
			</returns><remarks>
				You can use the <see cref="M:Email.Net.Imap.ImapClient.EndLogout(System.IAsyncResult)">EndLogout</see> method to
				obtain the server response.
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.EndLogout(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Logout"/><seealso cref="M:Email.Net.Imap.ImapClient.Login"/><example>
				The following example shows how to use asynchronous methods
				to logout from the server
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginLogoutExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginLogoutExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndLogout(System.IAsyncResult)">
            <summary>
				Retreives results of the logout command.
			</summary><param name="result">
				The object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginLogout(System.AsyncCallback)">BeginLogout</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				This method should be called when the command execution is already
				finished. In another case the calling thread will be blocked until
				the  opperation finishes
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute a command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginLogout(System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to logout from the server
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginLogoutExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginLogoutExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetAllMessageHeaders(Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously requests headers of all messages in the specified mailbox.
			</summary><param name="mailbox">
				A mailbox. A mailbox tree can be retrieved
				with <see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/> or
				<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/> methods
			</param><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				an object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndGetAllMessageHeaders(System.IAsyncResult)">EndGetAllMessageHeaders</see>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndGetAllMessageHeaders(System.IAsyncResult)">EndGetAllMessageHeaders</see> method to
					obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.GetFullMessage(System.UInt32,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetAllMessageHeaders(System.IAsyncResult)"/><example>
				The following example shows how to use asynchronous methods
				to get all messages from the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetAllMessageheaders"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetAllMessageheaders"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetAllMessageHeaders(System.IAsyncResult)">
            <summary>
				Retreives results of got messages headers.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetAllMessageHeaders(Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginGetAllMessageHeaders</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				This method should be called when the command execution is already
				finished. In another case the calling thread will be blocked until the
				opperation finishes
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetAllMessageHeaders(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get all messages from the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetAllMessageHeadersExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetAllMessageHeadersExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32},System.AsyncCallback)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;BeginGetMessagesHeader&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetMessagesHeader(System.IAsyncResult)">
            <summary>
				Retreives results of getting messages headers.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.EndGetMessagesHeader(System.IAsyncResult)">EndGetMessagesHeader</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				This method should be called when the command execution is already
				finished. In another case the calling thread will be blocked until the
				opperation finishes
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32},System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32,System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get all messages from the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetMessageHeaderExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetMessageHeaderExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32,System.AsyncCallback)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;BeginGetMessagesHeader2&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetAttachment(Email.Net.Imap.Mailbox,Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.Attachment,System.AsyncCallback)">
            <summary>
				Asynchronously requests a content of the attachment.
			</summary><param name="mailbox">A mailbox which contains the message</param><param name="message">A message that owns the attachment</param><param name="attachment">An attachment to retreive</param><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndGetAttachment(System.IAsyncResult)">EndGetAttachment</see>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndGetAttachment(System.IAsyncResult)">EndGetAttachment</see> method to
					obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessageText(System.UInt32,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetAttachment(System.IAsyncResult)"/><example>
				The following example shows how to retreive the first message in the
				INBOX mailbox and asynchronously retreive its first attachment
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetAttachmentExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetAttachmentExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetAttachment(System.IAsyncResult)">
            <summary>
				Retreives the requested message headers.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetAttachment(Email.Net.Imap.Mailbox,Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.Attachment,System.AsyncCallback)">BeginGetAttachment</see> method
			</param><returns>
				The collection of messages with setted up header
				parameters (size, sender, e.t.c.)
			</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until the
					opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetAttachment(Email.Net.Imap.Mailbox,Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.Attachment,System.AsyncCallback)"/><example>
				The following example shows how to retreive the first message in the
				INBOX mailbox and asynchronously retreive it first attachment
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetAttachmentExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetAttachmentExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetFullMessage(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;BeginGetFullMessage&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetFullMessage(System.IAsyncResult)">
            <summary>
				Retreives a message requested with the BeginGetFullMessage method.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetFullMessage(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginGetFullMessage</see> method
			</param><returns>The requested message</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until the
					opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetFullMessage(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get a message with the UID 1 from the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetFullMessageExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetFullMessageExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetMessageText(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously requests a message without attachments.
			</summary><param name="uid">A UID of the message being requested</param><param name="mailbox">A mailbox</param><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndGetMessageText(System.IAsyncResult)">EndGetMessageText</see>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndGetMessageText(System.IAsyncResult)">EndGetMessageText</see> method to
					obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.UInt32,System.UInt32)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessagesHeader(Email.Net.Imap.Mailbox,System.Collections.Generic.IEnumerable{System.UInt32})"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMessageText(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessageText(System.UInt32,Email.Net.Imap.Mailbox)"/><example>
				The following example shows how to use asynchronous methods
				to get a message with the UID 1 from the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetMessageTextExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetMessageTextExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetMessageText(System.IAsyncResult)">
            <summary>
				Retreives a message without attachments requested with the BeginGetMessageText method.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetMessageText(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginGetMessageText</see> method
			</param><returns>The requested message</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until the
					opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the<see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessageText(System.UInt32,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get a message with the UID 1 from the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetMessageTextExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetMessageTextExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetMailboxCollection(System.AsyncCallback)">
            <summary>
				Asynchronously requests a collection of top-level mailboxes from the server
			</summary><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndGetMailboxCollection(System.IAsyncResult)"/>
				method
			</returns><remarks>
				<para>
					You can use the<see cref="M:Email.Net.Imap.ImapClient.EndGetMailboxCollection(System.IAsyncResult)">EndGetMailboxCollection</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMailboxCollection(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxCollection"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/><example>
				The following example shows how to use asynchronous methods
				to get a collection of mailboxes
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetmailboxCollection"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetmailboxCollection"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetMailboxCollection(System.IAsyncResult)">
            <summary>
				Retreives a collection of mailboxes requested with the <see cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxCollection(System.AsyncCallback)"/>
				method.
			</summary><param name="result">
				An object you have got from the <see cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxCollection(System.AsyncCallback)"/> method
			</param><returns>A collection of top-level mailboxes or null on request failure.</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until the
					opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxCollection(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxCollection"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/><example>
				The following example shows how to use asynchronous methods
				to get a collection of mailboxes
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetmailboxCollection"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetmailboxCollection"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxCollection(System.AsyncCallback)">
            <summary>
				Asynchronously requests a collection of top-level mailboxes which a current user
				is subscribed to from the server
			</summary><param name="callback">
				A delegate which will handle results of the
				command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndGetMailboxCollection(System.IAsyncResult)"/>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxCollection(System.IAsyncResult)"/>
					method to obtain server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxCollection(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxCollection"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><example>
				The following example shows how to use asynchronous methods
				to get a collection of mailboxes
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetSubscribedMailboxCollectionExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetSubscribedMailboxCollectionExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxCollection(System.IAsyncResult)">
            <summary>
				Retreives a collection of mailboxes requested with the <see cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxCollection(System.AsyncCallback)"/>
				method.
			</summary><param name="result">
				An object you have got from the <see cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxCollection(System.AsyncCallback)"/> method
			</param><returns>A collection of top-level mailboxes or null on request failure.</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until the
					opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxCollection(System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxCollection"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><example>
				The following example shows how to use asynchronous methods
				to get a collection of mailboxes
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetSubscribedMailboxCollectionExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetSubscribedMailboxCollectionExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetMailboxTree(System.AsyncCallback)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;BeginGetMailboxTree&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetMailboxTree(System.IAsyncResult)">
            <summary>
				Retreives a mailbox tree requested with the BeginGetMailboxTree method.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxTree(System.AsyncCallback)">BeginGetMailboxTree</see> method
			</param><returns>
				The root of the mailbox tree. The root node is a fake
				mailbox which actualy doesn't exist at the server
			</returns><remarks>
				<para>
					This method should be called when command execution is already
					finished. In another case the calling thread will be blocked until
					the opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMailboxTree(System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get the mailbox hierarhy
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetMailboxTreeExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetMailboxTreeExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxTree(System.AsyncCallback)">
            <summary>
				Asynchronously requests a tree of mailboxes to wich a current user is subscribed to.
			</summary><param name="callback">
				A delegate which will handle results of
				the command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxTree(System.IAsyncResult)">EndGetSubscribedMailboxTree</see> method
				method
			</returns><remarks>
				<para>
					You can use the
					<see cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxTree(System.IAsyncResult)">EndGetSubscribedMailboxTree</see> method to
					obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.GetMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxTree(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><example>
				The following example shows how to use asynchronous methods
				to get the mailbox hierarhy
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetSubscribedMailboxTreeExample"/>
			<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetSubscribedMailboxTreeExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetSubscribedMailboxTree(System.IAsyncResult)">
            <summary>
				Retreives a mailbox tree requested with the BeginGetMailboxTree method.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxTree(System.AsyncCallback)">BeginGetSubscribedMailboxTree</see> method
			</param><returns>The requested message</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetSubscribedMailboxTree(System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get the mailbox hierarhy
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetSubscribedMailboxTreeExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="PrintMailbox"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetSubscribedMailboxTreeExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="PrintMailbox"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginGetMessageCount(Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously requests an amount of messages in the specified mailbox.
			</summary><param name="mailbox">Mailbox</param><param name="callback">
				A delegate which will handle results of
				the command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndGetMessageCount(System.IAsyncResult)">EndGetMessageCount</see>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndGetMessageCount(System.IAsyncResult)">EndGetMessageCount</see> method to
					obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.EndGetMessageCount(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetMessageCount(Email.Net.Imap.Mailbox)"/><example>
				The following example shows how to use asynchronous methods
				to get a message count in the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginGetMessageCountExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginGetMessageCountExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndGetMessageCount(System.IAsyncResult)">
            <summary>
				Retreives an ammount of messages requested with the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetMessageCount(Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginGetMessageCount</see> method.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginGetMessageCount(Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginGetMessageCount</see> method
			</param><returns>An ammount of messages in the specified mailbox</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginGetMessageCount(Email.Net.Imap.Mailbox,System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to get a messages count in the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BegingetMessageCountExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BegingetMessageCountExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndCopy(System.IAsyncResult)">
            <summary>
				Retreives results of the copy command execution.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginCopy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginCopy</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when at least one of parameters of the <see cref="M:Email.Net.Imap.ImapClient.BeginCopy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
				method is not set.
			</exception><seealso cref="M:Email.Net.Imap.ImapClient.BeginCopy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><example>
				The following example shows how to use asynchronous methods
				to copy a message from one mailbox to the another mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginCopyExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginCopyExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginCopy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously copies a message sequence from the source mailbox into the destination mailbox.
			</summary><param name="callback">A delegate which will handle results of the command execution</param><param name="source">A source mailbox to copy the message from</param><param name="uidSequence">A collection of message uids</param><param name="destination">
				A destination mailbox to copy
				the message into
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndCopy(System.IAsyncResult)">EndCopy</see>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndCopy(System.IAsyncResult)">EndCopy</see> method to
					obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><seealso cref="M:Email.Net.Imap.ImapClient.EndCopy(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Copy(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Mailbox)"/><example>
				The following example shows how to use asynchronous methods
				to copy a message from one mailbox to the another mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginCopyExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginCopyExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,System.AsyncCallback)">
            <summary>
				Asynchronously creates a new amilbox with the given name.
			</summary><param name="folderName">A name of the mailbox to be created</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)">EndCreateMailbox</see>
				method
			</returns><remarks>
				<para>
					A mailbox name can't contain the symbol "/" because it is used as the hierachy
					delimiter symbol.
				</para>
			</remarks><example>
				The following exaple shows how to create a new mailbox in the root of the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginCreateMailboxExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginCreateMailboxExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,Email.Net.Imap.Mailbox,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.DeleteMailbox(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.RenameMailbox(Email.Net.Imap.Mailbox,System.String)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to create a new mailbox.
			</summary><param name="result">
				An object you have got from
				<see cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,System.AsyncCallback)">BeginCreateMailbox</see> or
				<see cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginCreateMailbox</see> methods
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.FormatException">
				Occurs when a specified mailbox name contains the hierarchy
				delimiter symbol
			</exception><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentException">
				Occurs when the <b>folderName</b> parameter of the
				<see cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,System.AsyncCallback)"/> method is not
				set or contains an empty string
			</exception><example>
				The following exaple shows how to create a new mailbox in the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginCreateMailboxExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginCreateMailboxExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously creates a new message box with the given name inside the
				specified existing mailbox.
			</summary><param name="folderName">A name of the mailbox to be creted</param><param name="rootMailbox">A root mailbox to create the new mailbox inside.</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into  the <see cref="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)">EndCreateMailbox</see>
				method
			</returns><remarks>
				<para>
					A mailbox name can't contain the symbol "/" because it is used as the hierachy
					delimiter symbol.
				</para>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)">EndCreateMailbox</see> method to
					obtain the server response.
				</para>
				<para>
					The mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following exaple shows how to create a new mailbox in the INBOX mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginCreateMailbox2Example"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginCreateMailbox2Example"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginCreateMailbox(System.String,System.AsyncCallback)"/><seealso cref="M:Email.Net.Imap.ImapClient.DeleteMailbox(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.RenameMailbox(Email.Net.Imap.Mailbox,System.String)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndCreateMailbox(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String,Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginDeleteMailbox(Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;BeginDeleteMailbox&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndDeleteMailbox(System.IAsyncResult)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;EndDeleteMailbox&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginDeleteMarkedMessages(Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;BeginDeleteMarkedMessages&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndDeleteMarkedMessages(System.IAsyncResult)">
            <!-- Не обнаружено элементов, соответствующих тегу include --><include file="../../CodeComments/IMAP.doc.xml" path="Imap/Component/Method[@name=&quot;EndDeleteMarkedMessages&quot;]/*"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginRenameMailbox(Email.Net.Imap.Mailbox,System.String,System.AsyncCallback)">
            <summary>
				Asynchronously attempts to rename the mailbox.
			</summary><param name="mailbox">A mailbox</param><param name="name">A new name of the mailbox</param><param name="callback">
				A delegate which will handle results of
				the command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)">EndRenameMailbox</see>
				method
			</returns><remarks>
				<para>
					You can use the<see cref="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)">EndRenameMailbox</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
				<para>
					A mailbox name can't contain the symbol "/" because it is used as the hierachy
					delimiter symbol.
				</para>
			</remarks><example>
				The following example shows how to use asynchronous methods
				to rename the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginRenameMailboxExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginRenameMailboxExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.CreateMailbox(System.String)"/><seealso cref="M:Email.Net.Imap.ImapClient.DeleteMailbox(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.RenameMailbox(Email.Net.Imap.Mailbox,System.String)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to rename a mailbox.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginRenameMailbox(Email.Net.Imap.Mailbox,System.String,System.AsyncCallback)">BeginRenameMailbox</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the<see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.FormatException">
				Occurs when a specified mailbox name contains
				the hierarchy delimiter symbol
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <b>mailbox"</b> parameter of the <see cref="M:Email.Net.Imap.ImapClient.BeginRenameMailbox(Email.Net.Imap.Mailbox,System.String,System.AsyncCallback)"/>
				method is not set
			</exception><exception cref="T:System.ArgumentException">
				Occurs when the <b>name</b> parameter of the <see cref="M:Email.Net.Imap.ImapClient.BeginRenameMailbox(Email.Net.Imap.Mailbox,System.String,System.AsyncCallback)"/> method
				is not set or contains an empty string
			</exception><example>
				The following example shows how to use asynchronous methods
				to rename the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginRenameMailboxExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginRenameMailboxExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginRenameMailbox(Email.Net.Imap.Mailbox,System.String,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginSearch(Email.Net.Imap.Query,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously requests the UIDs collection of messages which match
				the specified query criteria.
			</summary><param name="query">A query object</param><param name="mailbox">A mailbox</param><param name="callback">
				A delegate which will handle results of
				the command execution
			</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the <see cref="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)">EndRenameMailbox</see>
				method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndRenameMailbox(System.IAsyncResult)">EndRenameMailbox</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
				<para>
					A query object can be constructed with helper methods of the
					<see cref="T:Email.Net.Imap.Query">Query</see> class
				</para>
			</remarks><example>
				The following example shows how to find all unseen messages in the INBOX
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginSearchExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginSearchExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.EndSearch(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Search(Email.Net.Imap.Query,Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndSearch(System.IAsyncResult)">
            <summary>
				Retreives a request of the attempt to rename a mailbox.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginSearch(Email.Net.Imap.Query,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginSearch</see> method
			</param><returns>
				A collection of UIDs for the messages which match the given
				criteria
			</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the<see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <b>query</b> parameter of the <see cref="M:Email.Net.Imap.ImapClient.BeginSearch(Email.Net.Imap.Query,Email.Net.Imap.Mailbox,System.AsyncCallback)"/> method
				is not set
			</exception><example>
				The following example shows how to find all unseen messages in the INBOX
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginSearchExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginSearchExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginSearch(Email.Net.Imap.Query,Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginSubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously subscribes a current user to the specified mailbox.
			</summary><param name="mailbox">A mailbox</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndSubscribe(System.IAsyncResult)">EndSubscribe</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndSubscribe(System.IAsyncResult)">EndSubscribe</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to subscribe to the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginSubscribeExample"/>
			  <code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginSubscribeExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.Unsubscribe(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.EndSubscribe(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Subscribe(Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndSubscribe(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to subscribe a current user to
				the specified mailbox.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginSubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginSubscribe</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <b>mailbox</b> parameter of the <see cref="M:Email.Net.Imap.ImapClient.BeginSubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
				method is not set
			</exception><example>
				The following example shows how to subscribe to the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginSubscribe"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginSubscribe"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginSubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginUnsubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously unsubscribes a current user from the specified mailbox.
			</summary><param name="mailbox">A mailbox</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndSubscribe(System.IAsyncResult)">EndSubscribe</see> method
			</returns><remarks>
				<para>
					Mailboxes to which a current user is subscribed to can be retrieved
					with the <see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see> method
				</para>
				<para>
					To request a full mailbox tree from the server use the
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> method.
				</para>
			</remarks><example>
				The following example shows how to unsubscribe from the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginUnsubscribeExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginUnsubscribeExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.Subscribe(Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree"/><seealso cref="M:Email.Net.Imap.ImapClient.EndUnsubscribe(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Unsubscribe(Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndUnsubscribe(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to unsubscribe a current user from
				the specified mailbox.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginUnsubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginUnsubscribe</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the<see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when the <b>mailbox</b> parameter of the <see cref="M:Email.Net.Imap.ImapClient.BeginUnsubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
				is not set
			</exception><example>
				The following example shows how to unsubscribe from the mailbox
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginUnsubscribeExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginUnsubscribeExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginUnsubscribe(Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginMarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously marks a sequence of messages with specified UIDs with the "Delete" flag.
			</summary><param name="uidSequence">A UID sequence of messages to be marked</param><param name="mailbox">A mailbox which contains messages to be marked</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndMarkAsDeleted(System.IAsyncResult)">EndMarkAsDeleted</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndMarkAsDeleted(System.IAsyncResult)">EndMarkAsDeleted</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsDeletedExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsDeletedExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsDeleted(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndMarkAsDeleted(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to mark a message with the "Delete" flag.
			</summary><param name="result">
				An object you have got from the 
				<see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginMarkAsDeleted</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <b>mailbox</b> or <b>uidSequence</b> parameters of
				the <see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/> method are not set
			</exception><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsDeletedExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsDeletedExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginMarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously resets the "Deleted" flag for the sequence of the messages with
				specified UIDs.
			</summary><param name="uidSequence">A UID sequence of messages to be marked</param><param name="mailbox">A mailbox which contains messages to be marked</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndMarkAsUndeleted(System.IAsyncResult)">EndMarkAsUndeleted</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndMarkAsUndeleted(System.IAsyncResult)">EndMarkAsUndeleted</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsUndeletedExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsUndeletedExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsUndeleted(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndMarkAsUndeleted(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to reset the "Seen" flag on the specified
				message sequence.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginMarkAsUndeleted</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <b>mailbox</b> or <b>uidSequence</b> parameters of
				the <see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/> method are not set
			</exception><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsUndeletedExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsUndeletedExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsUndeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously marks a sequence of messages with specified UIDs with the "Seen" flag.
			</summary><param name="uidSequence">A UID sequence of messages to be marked</param><param name="mailbox">A mailbox which contains messages to be marked</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndMarkAsSeen(System.IAsyncResult)">EndMarkAsSeen</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndMarkAsSeen(System.IAsyncResult)">EndMarkAsSeen</see>
					method to obtain theserver response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsSeenExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsSeenExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsSeen(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndMarkAsSeen(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to mark a message with the "Seen" flag.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginMarkAsSeen</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the opperation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <b>mailbox</b> or <b>uidSequence</b> parameters of
				the <see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/> method are not set
			</exception><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsSeenExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsSeenExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginMarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">
            <summary>
				Asynchronously resets the "Seen" flag for the sequence of messages with
				specified UIDs.
			</summary><param name="uidSequence">A UID sequence of messages to be marked</param><param name="mailbox">A mailbox which contains messages to be marked</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndMarkAsUnseen(System.IAsyncResult)">EndMarkAsUnseen</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndMarkAsUnseen(System.IAsyncResult)">EndMarkAsUnseen</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsUnseenExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsUnseenExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndMarkAsUnseen(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndMarkAsUnseen(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to reset the "Seen" flag on the specified
				message sequence.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)">BeginMarkAsSeen</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when <b>mailbox</b> or <b>uidSequence</b> parameters of
				the <see cref="M:Email.Net.Imap.ImapClient.BeginMarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/> method are not set
			</exception><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginMarkAsUnseenExample"/>
			<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginMarkAsUnseenExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginMarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginSetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode,System.AsyncCallback)">
            <summary>
				Asynchronously marks a sequence of messages with specified UIDs with the given flag set.
			</summary><param name="uidSequence">A UID sequence of messages to be marked</param><param name="mailbox">A mailbox which contains messages to be marked</param><param name="flags">A collection of flags to be set on messages</param><param name="mode">
				A flag modification <see cref="T:Email.Net.Imap.EFlagMode">mode</see>
			</param><param name="callback">A delegate which will handle results of the command execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndSetMessageFlags(System.IAsyncResult)">EndSetMessageFlags</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndSetMessageFlags(System.IAsyncResult)">EndSetMessageFlags</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginSetMessageFlags"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginSetMessageFlags"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsDeleted(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsSeen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.MarkAsUnseen(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox)"/><seealso cref="M:Email.Net.Imap.ImapClient.EndSetMessageFlags(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.SetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndSetMessageFlags(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to mark messages with the given flag set.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginSetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode,System.AsyncCallback)">BeginSetMessageFlags</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><exception cref="T:System.ArgumentNullException">
				Occurs when one of the parameters (<b>uidSequence</b>, <b>mailbox</b>,
				<b>flags</b>) of the <see cref="M:Email.Net.Imap.ImapClient.BeginSetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode,System.AsyncCallback)"/> method are not set
			</exception><example>
				The following example shows how to set messages flags asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginSetMessageFlagsExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginSetMessageFlagsExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginSetMessageFlags(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Mailbox,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Imap.EFlagMode,System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.BeginNoop(System.AsyncCallback)">
            <summary>
				Asynchronously sends the NoOp command to the server.
			</summary><param name="callback">A delegate which will handle results of thecommand execution</param><returns>
				The object which can be used to monitor the execution state.
				This object should be passed into the
				<see cref="M:Email.Net.Imap.ImapClient.EndNoop(System.IAsyncResult)">EndNoop</see> method
			</returns><remarks>
				<para>
					You can use the <see cref="M:Email.Net.Imap.ImapClient.EndNoop(System.IAsyncResult)">EndNoop</see>
					method to obtain the server response.
				</para>
				<para>
					A mailbox tree can be retrieved with
					<see cref="M:Email.Net.Imap.ImapClient.GetMailboxTree">GetMailboxTree</see> or
					<see cref="M:Email.Net.Imap.ImapClient.GetSubscribedMailboxTree">GetSubscribedMailboxTree</see>
					methods.
				</para>
			</remarks><example>
				The following example shows how to send the NoOp command asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginNoopExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginNoopExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.EndNoop(System.IAsyncResult)"/><seealso cref="M:Email.Net.Imap.ImapClient.Noop"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.EndNoop(System.IAsyncResult)">
            <summary>
				Retreives results of the attempt to send the NoOp command to the server.
			</summary><param name="result">
				An object you have got from the
				<see cref="M:Email.Net.Imap.ImapClient.BeginNoop(System.AsyncCallback)">BeginNoop</see> method
			</param><returns>Returns the result of the command execution</returns><remarks>
				<para>
					This method should be called when the command execution is already
					finished. In another case the calling thread will be blocked until
					the operation finishes
				</para>
			</remarks><exception cref="T:System.InvalidOperationException">
				Occurs when trying to execute the command without authentication.
				Use the <see cref="M:Email.Net.Imap.ImapClient.Login">Login</see> method to authenticate.
			</exception><exception cref="T:Email.Net.Imap.Exceptions.BadMailboxException">
				Occurs when trying to access the mailbox which doesn't exist or
				authenticated user doesn't have a permisson on it
			</exception><example>
				The following example shows how to send the NoOp command asynchronously
				<code lang="C#" source="EMail.NET.Example.CS\ImapClientExample.cs" region="BeginNoopExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\ImapClientExample.vb" region="BeginNoopExample"/>
			</example><seealso cref="M:Email.Net.Imap.ImapClient.BeginNoop(System.AsyncCallback)"/>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetSupportedAuthenticationTypes">
            <summary>
            Get list of supported by server authentication type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.CreateDispatcher">
            <summary>
            Create connection and interact dispathcer
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.InitializeInternalStructure">
            <summary>
            Initializes the internal smtp accessing structures
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.CheckState(Email.Net.Imap.EClientState)">
            <summary>
            Checks the internal client's state (authentificated and e.t.c.)
            </summary>
            <param name="targetState">A set of flags that describes required client's state</param>
            <exception cref="T:System.InvalidOperationException">Occurs when trying to execute an operation
            which incorrect in current client's state</exception>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.SelectInbox">
            <summary>
            Sets INBOX as active mailbox on server
            </summary>
            <returns>The response received from server</returns>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.ExtractAsyncCaller``1(System.IAsyncResult)">
            <summary>
            Retrieve strong type delegate from IAsyncResult object
            </summary>
            <typeparam name="TDelegate">type of required delegate</typeparam>
            <param name="result">object for obtain operation state</param>
            <returns>operation delegate</returns>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.HandleException(System.Exception)">
            <summary>
            Proceed exception in client
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnAttachmentReceived(Email.Net.Imap.Events.AttachReceivedArgs)">
            <summary>
            Raises AttachmentReceived event
            </summary>
            <param name="args">The arguments of the raising events.</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnCompleted">
            <summary>
            Raises Completed event
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnAllMessagesReceived">
            <summary>
            Raises AllMessagesReceived event
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnQuit">
            <summary>
            Raises Quit event
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnAuthentificated">
            <summary>
            Raises Authentificated event
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnBrokenMessage(Email.Net.Imap.Events.BrokenMessageInfoArgs)">
            <summary>
            Raises BrokenMessage event
            </summary>
            <param name="args">The arguments of the raising events.</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnMessageHeaderReceived(Email.Net.Imap.ImapMessage)">
            <summary>
            Raise MessageHeaderReceived event
            </summary>
            <param name="message">Last received message</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnMessageRecived(Email.Net.Imap.ImapMessage)">
            <summary>
            Raises MessageReceived event
            </summary>
            <param name="message">Last received message</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnServerResponseReceived(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Raises ServerResponseReceived event
            </summary>
            <param name="response">Last response received from the server.</param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnExistsChanged">
            <summary>
            Raises ExistsChangedEvent
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnRecentChanged">
            <summary>
            Raises RecentChangedEvent
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.OnMailboxStatusChanged">
            <summary>
            Raises MailboxStatusChanged event
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient._dispatcher_ServerResponseReceived(System.Object,Email.Net.Imap.Events.ServerResponseReceivedEventArgs)">
            <summary>
            Handles ServerResponseReceived events of dispatcher
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.GetSuddenResponseType(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Determines a type of the sudden response
            </summary>
            <param name="response">A source response</param>
            <returns>A member of enumeration which matches to the type of the response</returns>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.FetchCommand_MessageReceived(System.Object,Email.Net.Imap.Commands.MessageReceivedEventArgs)">
            <summary>
            Handles MessageReceived events of active FETCH command
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.FetchCommand_BrokenMessage(System.Object,Email.Net.Imap.Events.BrokenMessageInfoArgs)">
            <summary>
            Handles BrokenMessage event of active FETCH command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Email.Net.Imap.ImapClient.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapClient.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.ServerResponseReceived">
            <summary>
            Occurs when a new response received from server
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.Completed">
            <summary>
            Occurs when another command execution completed
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.Quit">
            <summary>
            Occurs when client breaks connection to the server with logout command
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.AllMessagesReceived">
            <summary>
            Occurs when all message from server received
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.Authentificated">
            <summary>
            Occurs when client succesfully authentificated to the server
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.MessageHeaderReceived">
            <summary>
            Occurs when another message header received from server
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.MessageReceived">
            <summary>
            Occurs when another message succesfully received from server
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.BrokenMessage">
            <summary>
            Occurs when message received from server have an incorrect format
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.AttachReceived">
            <summary>
            Occurs after attachment has been received from server
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.ExistsChanged">
            <summary>
            Occurs when number of messages in the current mailbox being changed
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.RecentChanged">
            <summary>
            Occurs when number of messages marked as "Recent" in the current 
            mailbox being changed
            </summary>
        </member>
        <member name="E:Email.Net.Imap.ImapClient.MailboxStatusChanged">
            <summary>
            Occurs when parameters of the current mailbox being changed
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.AuthenticationType">
            <summary>
            A type of authentication to use
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.AttachmentDirectory">
            <summary>
            Specifies directory where saved all attachments
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.Host">
            <summary>
            An address of the server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.Port">
            <summary>
            A number of the TCP server port
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.Username">
            <summary>
            A username to authenticate on the server
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.Password">
            <summary>
            A password to authenticate on the server
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.ProxyType">
            <summary>
            Type of the proxy server to use
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.ProxyHost">
            <summary>
            A hostname of the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.ProxyPort">
            <summary>
            A TCP port of the proxy server
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.ProxyUser">
            <summary>
            A username to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.ProxyPassword">
            <summary>
            A password to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.SSLInteractionType">
            <summary>
            Specifies using TLS/SSL during the connection
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.SendTimeout">
            <summary>
            Specifies time in milliseconds to wait a response while sending packets to the server
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="P:Email.Net.Imap.ImapClient.ReceiveTimeout">
            <summary>
            Specifies time in milliseconds to wait a response while receiving packets from the server
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Occurs when trying to changle parameters on connected client
            </exception>
        </member>
        <member name="T:Email.Net.Imap.ImapMessage">
            <summary>
            Incapsulates information about the message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapMessage._uid">
            <summary>
            The unique identifier of the message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapMessage._size">
            <summary>
            The size of the message in bytes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapMessage._flags">
            <summary>
            The collection of the message flags (for instance "Seen", "Draft" e.t.c.)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapMessage._partToIndex">
            <summary>
            A dictionary which stores links between the parts and theirs 
            indexes in the message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapMessage._indexToPart">
            <summary>
            A dictionary which stores links between the part indexes and the 
            part objects
            </summary>
        </member>
        <member name="F:Email.Net.Imap.ImapMessage._attachmentToPart">
            <summary>
            A dictionary which stores links between attachment descriptions 
            and message parts which provide those descriptions
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.#ctor(System.UInt32,System.UInt32,Email.Net.Imap.Collections.MessageFlagCollection,Email.Net.Common.MessageParts.IPart)">
            <summary>
            Creates a new instance of message
            </summary>
            <param name="uid">The unique idenifier of the message</param>
            <param name="size">The size of the message</param>
            <param name="flags">The collection of the message flags</param>
            <param name="rootPart">root part of message</param>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.#ctor">
            <summary>
            Create new instance of class
            </summary>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.FindPart(System.String)">
            <summary>
            Searches a message part by the given index
            </summary>
            <param name="partIndex">An index of the message part</param>
            <returns>The message part object or null if a part with 
            the given index doesn't exists</returns>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.GetPartIndex(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Returns an index of the given part in the message
            </summary>
            <param name="part">A part whoese index should be returned</param>
            <returns>A string which represents an index of the part 
            in the message</returns>
            <remarks>A <see cref="M:Email.Net.Imap.ImapMessage.InitializeInternalStructure"/> method
            should be called before calling this method.</remarks>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.GetPartByAttachment(Email.Net.Common.MessageParts.Attachment)">
            <summary>
             Returns a message part which content is described with 
             <paramref name="attachment"/>
            </summary>
            <param name="attachment">A description of one of the message attachments. 
             Should be obtained from the <see cref="P:Email.Net.Common.MailMessage.Attachments"/> 
             collection</param>
             <returns>A message part object which matches to the given attachment</returns>
             <remarks>A <see cref="M:Email.Net.Imap.ImapMessage.InitializeInternalStructure"/> method
             should be called before calling this method.</remarks>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.InitializeInternalStructure">
            <summary>
            Initialize internal structure of the message.
            </summary>
            <remarks>Should be called after any change of the message 
            parts structure. Required to be called before using methods 
            <see cref="M:Email.Net.Imap.ImapMessage.GetPartIndex(Email.Net.Common.MessageParts.IPart)"/> and <see cref="M:Email.Net.Imap.ImapMessage.GetPartByAttachment(Email.Net.Common.MessageParts.Attachment)"/>.
            After call old values of attachment extracted from the 
            <see cref="P:Email.Net.Common.MailMessage.Attachments"/> collection became invalid
            </remarks>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.SetInternaStructureForPart(Email.Net.Common.MessageParts.IPart,System.String)">
            <summary>
            Initialize internal structure of the message by applaying 
            an information about the given part and its subparts
            </summary>
            <param name="rootPart">A part object whose information should be applied</param>
            <param name="index">An index which will be assigned to part</param>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.AddAttachment(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Adds a description of the part content
            </summary>
            <param name="part">A partwhich contains attachment data</param>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.GetPlainText(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Returns a message as a plain text
            </summary>
            <param name="node">A message part to start from</param>
            <returns>A text or null</returns>
        </member>
        <member name="M:Email.Net.Imap.ImapMessage.GetHtmlText(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Returns a message as a plain text
            </summary>
            <param name="node">A message part to start from</param>
            <returns>A text or null</returns>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.UID">
            <summary>
            The unique identifier of the message
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.Size">
            <summary>
            The size of the message in bytes
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.Flags">
            <summary>
            The collection of the message flags (for instance "Seen", "Draft" e.t.c.)
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.IsSeen">
            <summary>
            Return true if message has \Seen flag and false otherwise
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.IsAnswered">
            <summary>
            Return true if message has \Answered flag and false otherwise
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.IsDraft">
            <summary>
            Return true if message has \Draft flag and false otherwise
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.IsRecent">
            <summary>
            Return true if message has \Recent flag and false otherwise
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.IsDeleted">
            <summary>
            Return true if message has \Deleted flag and false otherwise
            </summary>
        </member>
        <member name="P:Email.Net.Imap.ImapMessage.IsFlagged">
            <summary>
            Return true if message has \Flagged flag and false otherwise
            </summary>
        </member>
        <member name="T:Email.Net.Imap.InteractDispatcher">
            <summary>
            Client-server interact dispatcher 
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher.monopolyCommanId">
            <summary>
            ID of command, which work in monopoly mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._mode">
            <summary>
            Current mode of dispatcher
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._locker">
            <summary>
            Monopoly access manager
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._filter">
            <summary>
            Collection of filters
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._queues">
            <summary>
            Queue collection for commands responses
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._commandFilters">
            <summary>
            Collection of command filter
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._nextId">
            <summary>
            ID of next command
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._connection">
            <summary>
            underlying connecton
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._continueRecieve">
            <summary>
            Flag of work receive response thread
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._sleepTime">
            <summary>
            sleep time for receive thread
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher._receiveInProgress">
            <summary>
            Flag for signal if message receive is in progress
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.#ctor(Email.Net.Common.Connections.IConnection)">
            <summary>
            Create new instance
            </summary>
            <param name="connection">using connection</param>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.GetMonopolyAccess">
            <summary>
            Enter to critical section
            Only one command can execute in monopoly mode
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.ReleaseMonopolyAccess">
            <summary>
            Exit from critical section
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.GetAccess">
            <summary>
            Enter to normal execute section
            Monopoly command cannot execute while any normal command execute
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.ReleaseAccess">
            <summary>
            Exit from normal execute section
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.Open">
            <summary>
            Establish connection with server
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.Close">
            <summary>
            Close connection
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.SwitchToSslChannel">
            <summary>
            Switch connection to SSL mode
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.SendCommand(System.String)">
            <summary>
            Send command to server
            </summary>
            <param name="command">command text</param>
            <returns>tag for sended command (UID of command)</returns>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.SendCommand(System.String,Email.Net.Imap.Responses.ResponseFilter)">
            <summary>
            Send command to server this filtering result
            </summary>
            <param name="command">command text</param>
            <param name="filter">filter</param>
            <returns>tag for sended command (UID of command)</returns>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.SendContinuationCommand(System.String)">
            <summary>
            Send continuation command to server this filtering result
            </summary>
            <param name="command">command text</param>
            /// <returns>tag for sended command (UID of command)</returns>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.GetRawData(System.UInt64)">
            <summary>
            Get raw data
            </summary>
            <returns>received raw data</returns>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.GetRawData">
            <summary>
            Get raw data to end of line (0x0D, 0x0A)
            </summary>
            <returns>received raw data</returns>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.GetResponse(System.UInt32)">
            <summary>
            Get response for command
            </summary>
            <param name="commandId">id of command</param>
            <returns>parsed server response</returns>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.AddFilter(System.String,System.UInt32)">
            <summary>
            Add filtering response for command
            </summary>
            <param name="response">response name</param>
            <param name="commandId">id of command</param>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.DeleteCommand(System.UInt32)">
            <summary>
            Delete command and they filters
            </summary>
            <param name="uid">id of command</param>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.GetServerData">
            <summary>
            Wait data from server
            </summary>
        </member>
        <member name="M:Email.Net.Imap.InteractDispatcher.OnServerResponseReceived(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Raises  ServerResponseReceived event
            </summary>
            <param name="response">received response from server</param>
        </member>
        <member name="E:Email.Net.Imap.InteractDispatcher.ServerResponseReceived">
            <summary>
            Occurs when dispatcher reseive response initialize by the server
            </summary>
        </member>
        <member name="P:Email.Net.Imap.InteractDispatcher.Connection">
            <summary>
            underlying connection
            </summary>
        </member>
        <member name="T:Email.Net.Imap.InteractDispatcher.EDispatcherMode">
            <summary>
            Enumeration for internal mode of dispatcher
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher.EDispatcherMode.Monopoly">
            <summary>
            Monopoly mode - only one command per time can execute
            </summary>
        </member>
        <member name="F:Email.Net.Imap.InteractDispatcher.EDispatcherMode.Regular">
            <summary>
            Regular mode - command can execute parallel
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Keyword">
            <summary>
            A keyword used in the search queries
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Keyword.forbidden">
            <summary>
            Forbidden symbols
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Keyword.keyword">
            <summary>
            Keyword string
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Keyword.#ctor(System.String)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="keyword">Keyword (forbidden characters: %*\"\\](){ )</param>
        </member>
        <member name="M:Email.Net.Imap.Keyword.ToString">
            <summary>
            Returns string containing keyword
            </summary>
            <returns>String containing keyword</returns>
        </member>
        <member name="T:Email.Net.Imap.Mailbox">
            <summary>
            Class incapsulating information about mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._defaultHierarchyDelimiter">
            <summary>
            Default hierarhy delimiter
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._parent">
            <summary>
            Reference to parent mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._name">
            <summary>
            Short mailbox name
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._attributes">
            <summary>
            A collection of mailbox's attributes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._children">
            <summary>
            A collection of mailboxex contained in this mailbox
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._fullName">
            <summary>
            Full name of mailbox (mailbox hierarchy)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Mailbox._hierarchyDelimiter">
            <summary>
            Hierarchy deimiter used for this folder
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Mailbox.#ctor(System.String,Email.Net.Imap.Collections.NameAttributesCollection)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="name">Short name of mailbox</param>
            <param name="attributes">Collection of mailbox attributes</param>
        </member>
        <member name="M:Email.Net.Imap.Mailbox.#ctor">
            <summary>
            Creates a new instance of class
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Mailbox.BuildTree(Email.Net.Imap.Collections.MatchedNameCollection)">
            <summary>
            Builds a mailbox tree with data returned from server
            </summary>
            <param name="folderPathCollection">A collection of mailboxes returned from server</param>
            <returns>Root of mailbox tree</returns>
        </member>
        <member name="M:Email.Net.Imap.Mailbox.AssembleTree(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String[],Email.Net.Imap.Mailbox}})">
            <summary>
            Assemble tree from sorted set of mailboxes
            </summary>
            <param name="paths">Sorted for recursive walkthrough set of mailboxes</param>
            <returns>Returns root of mailbox tree</returns>
        </member>
        <member name="M:Email.Net.Imap.Mailbox.BuildPathsList(System.Collections.Generic.IEnumerable{Email.Net.Imap.Responses.MatchedName})">
            <summary>
            Builds a list of unconnected mailboxes from server response
            </summary>
            <param name="folderPathCollection">A collection of mailbox information objects returned by server</param>
            <returns>Returns a collection of pairs where key - fullname of mailbox and value - Mailbox object</returns>
        </member>
        <member name="M:Email.Net.Imap.Mailbox.Find(Email.Net.Imap.Mailbox,System.String)">
            <summary>
            Looking for first mailbox down to hierarchy with short name matching with given name
            </summary>
            <param name="root">Mailbox to start from</param>
            <param name="name">Name of mailbox to look for</param>
            <returns>Mailbox with the given name or null if it doesn't exists</returns>
        </member>
        <member name="P:Email.Net.Imap.Mailbox.Children">
            <summary>
            A collection of mailboxex contained in this mailbox
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Mailbox.Name">
            <summary>
            Short mailbox name
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Mailbox.DisplayName">
            <summary>
            Decoded short name of mailbox in Unicode
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Mailbox.FullName">
            <summary>
            Full name of mailbox (mailbox hierarchy)
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Mailbox.HierarchyDelimiter">
            <summary>
            Hierarchy deimiter used for this folder
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Mailbox.Parent">
            <summary>
            Reference to parent mailbox
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Mailbox.PathComparer">
            <summary>
            Class for comaration templorary representation on Mailbox object
            </summary>
        </member>
        <member name="T:Email.Net.Imap.MessageFlag">
            <summary>
             Incapsulates the message flag
            </summary>
        </member>
        <member name="F:Email.Net.Imap.MessageFlag._type">
            <summary>
            Type of the flag (one of predefined flags or EFlag.NonStandard)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.MessageFlag.flagString">
            <summary>
            A string which describes non standart flag
            </summary>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.#ctor(System.String)">
            <summary>
            Creates a new instance of class.
            </summary>
            <param name="value">A string which represents a flag name.</param>
            <exception cref="T:System.ArgumentException">
            Occurs when <paramref name="value"/> parameter not set or contains an empty string.
            </exception>
            <exception cref="T:System.FormatException">Occurs when a flag name doesn't match proper fromat.
            The flag name can't contain any symbols except of the alphabetic symbols.</exception>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.#ctor(Email.Net.Imap.EFlag)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="value">One of predefined flags</param>
            <remarks>
            This method allows to create only a standard flags. To create an 
            instance of a non-standard flag use <see cref="M:Email.Net.Imap.MessageFlag.#ctor(System.String)"/> 
            constructor.
            </remarks>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.FromString(System.String)">
            <summary>
            Parse one of predefined flags from string
            </summary>
            <param name="value">A source string</param>
            <returns>A value of one of predefined flags</returns>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.ToString">
            <summary>
            Converts flag object to string
            </summary>
            <returns>A string which represents flag value</returns>
            <remarks>
            The flag names which matches the predefined flags may be formated 
            to the default format (for instance, "SEEN" or "seen" will be formated to "Seen")
            </remarks>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.Equals(System.Object)">
            <summary>
            Checks an equality of this and another object
            </summary>
            <param name="obj">An object to compare with</param>
            <returns>True if current and given object are equal</returns>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.Equals(Email.Net.Imap.MessageFlag)">
            <summary>
            Checks the equality of current and another instance of class
            </summary>
            <param name="other">Another instance of class</param>
            <returns>true if the flags is represented by instances are equal</returns>
        </member>
        <member name="M:Email.Net.Imap.MessageFlag.GetHashCode">
            <summary>
            Returns a hash code of the object
            </summary>
            <returns>32-bit hach code</returns>
        </member>
        <member name="P:Email.Net.Imap.MessageFlag.Type">
            <summary>
            Type of the flag (one of predefined flags or EFlag.NonStandard)
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Parsers.BodyPartDescriptionParser">
            <summary>
             Promote a service for parsing parts of message bodies from string.
             A source string is a body value being retreived by FETCH response.
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.Parse(System.Byte[],System.String)">
            <summary>
            Parse a body part of unknown type
            </summary>
            <param name="source">A source string</param>
            <param name="attachmentDirectory"></param>
            <returns>An object which incapsulates the information about the part</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.IsValidSimplePart(System.Byte[])">
            <summary>
            Validates the format of the given string to match the description of multipart message part
            </summary>
            <param name="source">A source string to validate</param>
            <returns>true if the string is valid</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.IsValidMultipart(System.Byte[])">
            <summary>
            Validates the format of the given string to match the description of multipart message part
            </summary>
            <param name="source">A source string to validate</param>
            <returns>true if the string is valid</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.ParseMultipart(System.Byte[],System.String)">
            <summary>
            Parses a body part which contains a other parts in itself
            </summary>
            <param name="source">A source string which describes a part structure</param>
            <param name="attachmentDirectory">A directory to store attachments 
            of the message</param>
            <returns>An object which incapsulates a parsed information</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.ParseContentPart(System.Byte[],Email.Net.Common.ContentType,System.UInt32,System.String)">
            <summary>
             Parse a simple body part which didn't contain other parts in itself
            </summary>
            <param name="source">A source byte array</param>
            <param name="size">A size of the content presented in a message part</param>
            <param name="attachmentDirectory"></param>
            <param name="contentType">A MIME-type of the part content</param>
            <returns>An object which incapsulates a parsed information</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.ParseSimplePart(System.Byte[],System.String)">
            <summary>
             Parse a simple body part which didn't contain other parts in itself
            </summary>
            <param name="source">A source byte array which provides data</param>
            <param name="attachmentDirectory">A directory to store attachments</param>
            <returns>A part object</returns>
            <exception cref="T:System.FormatException">
             Occurs when source data was not presented in a valid format</exception>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.ParseAttributes(System.Byte[])">
            <summary>
            Parse a collection of the part attributes from a source string
            </summary>
            <param name="source">A source string</param>
            <returns>A collection of attributes</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.DecodeParameterValue(System.String)">
            <summary>
            Decodes the value of an parameter
            </summary>
            <param name="source">A source string</param>
            <returns>Decoded param value</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.ParseOptionalField(System.String)">
            <summary>
            Process a source string which can contains NIL or "sometext"
            </summary>
            <param name="value">A source string</param>
            <returns>null if NIL text was passed or source string without quotes</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.IsTextPart(Email.Net.Common.ContentType)">
            <summary>
            Checks if the part with a given content type is a text part
            </summary>
            <param name="contentType">A content type of the part to check</param>
            <returns>true if the message part with a given content type contains text</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.BodyPartDescriptionParser.IsMessagePart(Email.Net.Common.ContentType)">
            <summary>
            Checks if the part with a given content type is a message part
            </summary>
            <param name="contentType">A content type of the part to check</param>
            <returns>true if the message part with a given content type contains message</returns>
        </member>
        <member name="T:Email.Net.Imap.Parsers.EFetchResponseParserState">
            <summary>
            Describes a state of the parser
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.Base">
            <summary>
            An initial state of the parser
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.InQuotes">
            <summary>
            Parsing quotes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.InParanthesis">
            <summary>
            Parsing parameter in paranthesis
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.InWord">
            <summary>
            Parsing word
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.InMultilineHeader">
            <summary>
            Reading a size of the multiline parameter
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.InMultilineBlock">
            <summary>
            Reading a body of the multiline parameter
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.AfterMultilineHeader">
            <summary>
            Reading the endline symbols after a header of the multiline parameter
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Parsers.EFetchResponseParserState.AfterSlash">
            <summary>
            Reading the symbol escaped with slash
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Parsers.MessageDescriptionParser">
            <summary>
             The service inmplementing parsing of message description from 
             responses of FETCH command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Parsers.MessageDescriptionParser.Parse(System.Byte[],System.String)">
            <summary>
             Parses MessageDescription from FETCH response
            </summary>
            <param name="source">A source string</param>
            <param name="attachmentDirectory">directory to store attachment</param>
            <returns>A <see cref="T:Email.Net.Imap.ImapMessage"/> object</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.MessageDescriptionParser.Parse(Email.Net.Imap.ImapMessage,System.Byte[],System.String)">
             <summary>
             Parses a content of the message parts from string
             </summary>
             <param name="sourceMessage">A source message which will 
             be updated with parsed data</param>
             <param name="source">A source byte array which shoul be parsed</param>
             <param name="attachmentDirectory">A directory to store attachments 
             of the message</param>
            <returns>A <see cref="T:Email.Net.Imap.ImapMessage"/> object</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.MessageDescriptionParser.AddItem(Email.Net.Imap.ImapMessage,System.String,System.Byte[],System.String)">
            <summary>
             Parses a top-level piece message description
            </summary>
            <param name="messageDescription">A MessageDescription object which 
             will incapsulate the item beiing parsed</param>
            <param name="itemKey">A key of item</param>
            <param name="itemValue">A value string of item</param>
            <param name="attachmentDirectory">A directory to store attachments 
             of the message</param>
        </member>
        <member name="M:Email.Net.Imap.Parsers.MessageDescriptionParser.ParseMessageFlagCollection(System.Byte[])">
            <summary>
            Parses a collection of the message flags from the string
            </summary>
            <param name="source">A source string which contains a collection of flags</param>
            <returns>A collection of flags parsed from the source string</returns>
        </member>
        <member name="T:Email.Net.Imap.Parsers.SimplePartContentParser">
            <summary>
             Provides a service for parsing content of the simple message parts
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Parsers.SimplePartContentParser.Parse(System.Byte[],Email.Net.Common.EContentTransferEncoding,System.String)">
            <summary>
            Parses a text content of the part
            </summary>
            <param name="source">A source string</param>
            <param name="contentTransferEncoding">An encoding used to encode content text</param>
            <param name="charset">A charset used for content</param>
            <returns>A string which contains the part content</returns>
        </member>
        <member name="T:Email.Net.Imap.Parsers.StringEncoding">
            <summary>
            Encoder class for encode and decode modified UTF7 encode, which used for represent mailbox name
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Parsers.StringEncoding.EncodeMailboxName(System.String)">
            <summary>
            Encode string to modifiend UTF7 encoding
            </summary>
            <param name="name">Mailbox displayed name</param>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.StringEncoding.DecodeMailboxName(System.String)">
            <summary>
            Decode string in modified UTF7 encoding
            </summary>
            <param name="name">Mailbox name received from server</param>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.StringEncoding.Decode(System.String)">
            <summary>
            Decode string in the modified UTF7 encoding
            </summary>
            <param name="source">String in modified UTF7 encoding without uncoded parts</param>
            <returns>Decoded string in Unicode</returns>
        </member>
        <member name="T:Email.Net.Imap.Parsers.Utils">
            <summary>
             Contains additional methods being used in parsers
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Parsers.Utils.Unquote(System.String)">
            <summary>
            Removes quotes from the string
            </summary>
            <param name="source">A source quoted stirng</param>
            <returns>A string without quotes</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.Utils.Unparenthesis(System.Byte[])">
            <summary>
            Extract value from paranthesis (for instance, "(some value)" will be 
            turned to "some value")
            </summary>
            <param name="source">A source string</param>
            <returns>A source string without parenthesis</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.Utils.ExtractParams(System.Byte[])">
            <summary>
            Extracts params from the line in received from FETCH. 
            Params must be separated by the whitespace.
            </summary>
            <param name="source">A source string</param>
            <returns>A coolection of extracted params</returns>
        </member>
        <member name="M:Email.Net.Imap.Parsers.Utils.ExtractSubarray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a subsequence of bytes  from the source array
            </summary>
            <param name="source">A source byte array</param>
            <param name="end">An index of the last byte in the sequence</param>
            <param name="start">An index of the first byte in the sequence</param>
            <returns>An array which contains requested subsequence</returns>
        </member>
        <member name="T:Email.Net.Imap.Query">
            <summary>
            Represents a query object which is used to search messages
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Query.query">
            <summary>
            The query string. It contains a set of criteria separated by whitespace
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Query.#ctor(System.String)">
            <summary>
            Creates a new instance of query with given sting criteria
            </summary>
            <param name="query">The string wich describes one or a set of criteria</param>
        </member>
        <member name="M:Email.Net.Imap.Query.ToString">
            <summary>
            Returns query string for a current query object
            </summary>
            <returns>String which contains a set of criteria separated by whitespace</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.UnKeyword(Email.Net.Imap.Keyword)">
            <summary>
            Creates a query criteria which is used to search messages that do not 
            have the specified keyword flag set.
            </summary>
            <param name="keywords">Keyword flag set</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Keyword(Email.Net.Imap.Keyword)">
            <summary>
            Creates a query criteria which is used to search messages with the specified keyword flag set
            </summary>
            <param name="keywords">Keyword flag set</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Smaller(System.UInt32)">
            <summary>
            Creates a query criteria which can be used to search messages with 
            an [RFC-2822] size smaller than the specified number of octets.
            </summary>
            <param name="size">Target size of the messages</param>
            <returns>Query criteria message</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Larger(System.UInt32)">
            <summary>
            Creates a query criteria which can be used to search messages with 
            an [RFC-2822] size larger than the specified number of octets.
            </summary>
            <param name="size">Target size of the maessages</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.SentBefore(System.DateTime)">
            <summary>
            Creates a query criteria which can be used to search messages whose 
            [RFC-2822] Date: header (disregarding time and timezone) is earlier 
            than the specified date.
            </summary>
            <param name="date">Target date of the messages</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.SentOn(System.DateTime)">
            <summary>
            Creates a query criteria which can be used to search messages whose 
            [RFC-2822] Date: header (disregarding time and timezone) is within 
            the specified date.
            </summary>
            <param name="date">Target date of the message</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.SentSince(System.DateTime)">
            <summary>
            Creates a query criteria which can be used to search messages whose 
            [RFC-2822] Date: header (disregarding time and timezone) is within 
            or later than the specified date.
            </summary>
            <param name="date">Target date of the message</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Since(System.DateTime)">
            <summary>
            Creates a query criteria which can be used to search messages 
            whose internal date (disregarding time and timezone) is within 
            or later than the specified date.
            </summary>
            <param name="date">Target date of the message</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.On(System.DateTime)">
            <summary>
            Creates a query criteria which can be used to search messages whose 
            internal date (disregarding time and timezone) is within the specified date.
            </summary>
            <param name="date">Target date of the message</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Before(System.DateTime)">
            <summary>
            Creates a query criteria which can be used to search messages whose 
            internal date (disregarding time and timezone) is earlier than 
            the specified date.			  
            </summary>
            <param name="date">Target date of the message</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.SequenceSet(Email.Net.Imap.Sequences.ISequence)">
            <summary>
            Creates a query criteria which can be used to search messages 
            with message sequence numbers corresponding to the specified 
            message sequence number set.
            </summary>
            <param name="sequence">The message sequence number set</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.All">
            <summary>
            Creates a query criteria which can be used to get all messages in the mailbox; 
            the default initial key for ANDing.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Answered">
            <summary>
            Creates a query criteria which can be used to search messages with the \Answered flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.BCC(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages that 
            contain the specified string in the envelope structure's BCC field.
            </summary>
            <param name="bcc">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Body(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages that 
            contain the specified string in the body of the message.
            </summary>
            <param name="body">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.CC(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages 
            that contain the specified string in the envelope structure's CC field.
            </summary>
            <param name="cc">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Deleted">
            <summary>
            Creates a query criteria which can be used to search messages with the \Deleted flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Draft">
            <summary>
            Creates a query criteria which can be used to search messages with the \Draft flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Flagged">
            <summary>
            Creates a query criteria which can be used to search messages with the \Flagged flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.From(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages 
            that contain the specified string in the envelope structure's FROM field.
            </summary>
            <param name="from">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Header(System.String,System.String)">
            <summary>
            Creates a query criteria which can be used to search 
            Messages that have a header with the specified field-name (as
            defined in [RFC-2822]) and that contains the specified string
            in the text of the header (what comes after the colon).  If the
            string to search is zero-length, this matches all messages that
            have a header line with the specified field-name regardless of
            the contents.
            </summary>
            <param name="fieldName">The name of the message header field</param>
            <param name="value">Target value to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.New">
            <summary>
            Creates a query criteria which can be used to search messages that 
            have the \Recent flag set but not the \Seen flag. This is functionally 
            equivalent to "(RECENT UNSEEN)".
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Old">
            <summary>
            Creates a query criteria which can be used to search messages that 
            do not have the \Recent flag set. This is functionally equivalent to 
            "NOT RECENT" (as opposed to "NOT NEW").
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Recent">
            <summary>
            Creates a query criteria which can be used to search messages that 
            have the \Recent flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Seen">
            <summary>
            Creates a query criteria which can be used to search messages that 
            have the \Seen flag set. 
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Or(Email.Net.Imap.Query,Email.Net.Imap.Query)">
            <summary>
            Creates a query criteria which can be used to search messages that 
            match either search key.
            </summary>
            <param name="left">First critera object</param>
            <param name="right">Second criteria object</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.UID(Email.Net.Imap.Sequences.ISequence)">
            <summary>
            Creates a query criteria which can be used to search messages with 
            unique identifiers corresponding to the specified unique identifier set.  
            Sequence set ranges are permitted.
            </summary>
            <param name="sequence">Sequence of message uids</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Subject(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages 
            that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
            <param name="subject">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Text(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages 
            that contain the specified string in the header or body of the message.
            </summary>
            <param name="text">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.To(System.String)">
            <summary>
            Creates a query criteria which can be used to search messages 
            that contain the specified string in the envelope structure's TO field.
            </summary>
            <param name="to">Substring to search</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.UnAnswered">
            <summary>
            Creates a query criteria which can be used to search messages 
            that do not have the \Answered flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.UnDeleted">
            <summary>
            Creates a query criteria which can be used to search messages 
            that do not have the \Deleted flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.UnDraft">
            <summary>
            Creates a query criteria which can be used to search messages 
            that do not have the \Draft flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.UnFlagged">
            <summary>
            Creates a query criteria which can be used to search messages 
            that do not have the \Flagged flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Unseen">
            <summary>
            Creates a query criteria which can be used to search messages 
            that do not have the \Seen flag set.
            </summary>
            <returns>Query criteria object</returns>
        </member>
        <member name="M:Email.Net.Imap.Query.Not(Email.Net.Imap.Query)">
            <summary>
            Creates a query criteria which can be used to search messages 
            that do not match the specified search key.
            </summary>
            <param name="query">Source criteria to invert</param>
            <returns>Query criteria object</returns>
        </member>
        <member name="T:Email.Net.Imap.Responses.CompletionResponse">
            <summary>
            IMAP4-server response
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Responses.IMAP4Response">
            <summary>
            IMAP4-server response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.IMAP4Response._tag">
            <summary>
            Response tag ("*", "+" or alphanumeric sequence)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.IMAP4Response._name">
            <summary>
            The command name server response to (empty string in case of Type == Continuation)
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.IMAP4Response._data">
            <summary>
            Response string except of tag
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.IMAP4Response._response">
            <summary>
            Response string
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.IMAP4Response._type">
            <summary>
            Response type
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Responses.IMAP4Response.#ctor(System.String)">
            <summary>
            Create new instance class IMAP4Response
            </summary>
            <param name="message">Server response string</param>
        </member>
        <member name="M:Email.Net.Imap.Responses.IMAP4Response.IsFormatCorrect(System.String)">
            <summary>
            Checks the correctness of the given response string
            </summary>
            <param name="responseString">String to check</param>
            <returns>True, if string format is correct, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Imap.Responses.IMAP4Response.IsCompletionResponse">
            <summary>
            Checks if current response is of completion response type
            </summary>
            <returns>True if response is completion response, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Imap.Responses.IMAP4Response.ToString">
            <summary>
            Returns server response as a string
            </summary>
            <returns>
            String which contains server response or response type if 
            an empty string was returned by server
            </returns>
        </member>
        <member name="P:Email.Net.Imap.Responses.IMAP4Response.Response">
            <summary>
            Response string
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.IMAP4Response.Tag">
            <summary>
            Response tag ("*", "+" or alphanumeric sequence)
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.IMAP4Response.Name">
            <summary>
            The command name server response to (empty string in case of Type == Continuation)
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.IMAP4Response.Data">
            <summary>
            Response string except of tag
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.IMAP4Response.Type">
            <summary>
            Response type
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.CompletionResponse.IMAP4OK">
            <summary>
            Succesful server response constant
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.CompletionResponse.IMAP4BAD">
            <summary>
            Server response constant on invalid command or arguments
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.CompletionResponse.IMAP4NO">
            <summary>
            Server response constant on command execution failure
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.CompletionResponse._message">
            <summary>
            Extra information contained in the response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.CompletionResponse._completionResult">
            <summary>
            type of completion response
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Responses.CompletionResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class IMAP4Response
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="M:Email.Net.Imap.Responses.CompletionResponse.GetMessage(System.String)">
            <summary>
            Extracts the extra information from the response
            </summary>
            <param name="message">Response</param>
        </member>
        <member name="M:Email.Net.Imap.Responses.CompletionResponse.IsCompletionResponse(System.String)">
            <summary>
            Checks whether the message is the final message
            </summary>
            <param name="message">Checked message</param>
            <returns>true if message is final, or false otherwise</returns>
        </member>
        <member name="M:Email.Net.Imap.Responses.CompletionResponse.ToString">
            <summary>
            Converts a server response object to a string
            </summary>
            <returns>
            String which contains server response or response result 
            (OK, NO, BAD) if an empty string was returned by server
            </returns>
        </member>
        <member name="P:Email.Net.Imap.Responses.CompletionResponse.CompletionResult">
            <summary>
            Response type
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.CompletionResponse.Message">
            <summary>
            Extra information contained in the response
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Responses.ECompletionResponseType">
            <summary>
            IMAP4-Server completion response type
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.ECompletionResponseType.OK">
            <summary>
            Request was performed successfully
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.ECompletionResponseType.NO">
            <summary>
            Request wa not performed sucessfully
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.ECompletionResponseType.BAD">
            <summary>
            Ivalid command name or arguments
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Responses.EIMAP4ResponseType">
            <summary>
            IMAP4 Server response type
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.EIMAP4ResponseType.Tagged">
            <summary>
            Response marked with a concrete tag
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.EIMAP4ResponseType.Untagged">
            <summary>
            Response marked with '*' symbol
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.EIMAP4ResponseType.Continuation">
            <summary>
            Response marked with '+' symbol
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Responses.MatchedName">
            <summary>
            Class that incapsulates mailbox name being returned in LIST server response
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.MatchedName.IncorrectResponseMessage">
            <summary>
            Error message text constant
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.MatchedName.atrributes">
            <summary>
            Collection of mailbox attributes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.MatchedName.delimeter">
            <summary>
            Mailbox hierarchy delimiter
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Responses.MatchedName.name">
            <summary>
            The mailbox name
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Responses.MatchedName.GetString(System.String)">
            <summary>
            Obtain string from prefix (if string start with ", when obtian string to next ", else obtain token to whitespace or end line)
            </summary>
            <param name="data">source string</param>
            <returns>obtained string</returns>
        </member>
        <member name="M:Email.Net.Imap.Responses.MatchedName.#ctor(Email.Net.Imap.Responses.IMAP4Response)">
            <summary>
            Creates new instance of class
            </summary>
            <param name="response">Server response on LIST query</param>
        </member>
        <member name="P:Email.Net.Imap.Responses.MatchedName.Attributes">
            <summary>
            Collection of mailbox attributes
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.MatchedName.HierarchyDelimeter">
            <summary>
            Mailbox hierarchy delimiter
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Responses.MatchedName.Name">
            <summary>
            The mailbox name
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Responses.ResponseFilter">
            <summary>
            Filter on server responses are handled by command
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Responses.ResponseFilter.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of filter
            </summary>
            <param name="commandNames">A collection of command names used in untagged 
            responses that are handled by the given command</param>
        </member>
        <member name="M:Email.Net.Imap.Responses.ResponseFilter.#ctor">
            <summary>
            Creates a new instance of empty filter
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Scripts.ReceiveAttach">
            <summary>
            Script for receive specified attach for message
            This command work in monopoly mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveAttach._partSize">
            <summary>
            Size of one read session in bytes
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveAttach.DefaultEncoding">
            <summary>
            default encoding
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveAttach._attachmentDescription">
            <summary>
            Attachment description
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveAttach._message">
            <summary>
            Attach holder message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveAttach._attachmentDirectory">
            <summary>
            Directory where attach will be saved to
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveAttach.#ctor(Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.Attachment,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="message">attach message holder</param>
            <param name="attachmentDescription">description of received attachment</param>
            <param name="attachmentDirectory">directory where attach will be saved to</param>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveAttach.Behaviour">
            <summary>
            UID + FETCH command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="P:Email.Net.Imap.Scripts.ReceiveAttach.ReceivedAttachment">
            <summary>
            Get description of received attach
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Scripts.ReceiveFullMessage">
            <summary>
            Script for receive full message with attachments
            The following scripts inside itself: <see cref="T:Email.Net.Imap.Scripts.ReceiveMessageText"/>, <see cref="T:Email.Net.Imap.Scripts.ReceiveAttach"/>
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveFullMessage._uid">
            <summary>
            UID of the received message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveFullMessage._attachmentDirectory">
            <summary>
            Directory where attachmentd will be saved to
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveFullMessage._message">
            <summary>
            Received message
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveFullMessage.#ctor(Email.Net.Imap.Sequences.SequenceNumber,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="uid">UID of the received message</param>
            <param name="attachmentDirectory">Directory where attachmentd will be saved to</param>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveFullMessage.Run(Email.Net.Imap.IInteractDispatcher)">
            <summary>
            Execute script logic
            </summary>
            <param name="dispatcher">dispatcher for intercation with server</param>
        </member>
        <member name="P:Email.Net.Imap.Scripts.ReceiveFullMessage.Message">
            <summary>
            Get received message
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Scripts.ReceiveHeader">
            <summary>
            Script for receive header of message collection
            This command work in monopoly mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveHeader._sequence">
            <summary>
            Collection of UID or orderinal number of messages
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveHeader._fetchedItems">
            <summary>
            Collection of received messages
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveHeader._uidMode">
            <summary>
            Flag for UID or ordenal number fetch mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveHeader._attachmentDirectory">
            <summary>
            directory to store attachment
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveHeader.#ctor(Email.Net.Imap.Sequences.ISequence,System.Boolean,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="range">sequence of fetched items id</param>
            <param name="uidMode">flag for uid mode. If uidMode true when fetch 
            work in mode UID + FETCH, overwhise simple FETCH</param>
            <param name="attachmentDirectory">A directory to store attachments 
            of the message</param>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveHeader.Behaviour">
            <summary>
            UID + FETCH command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="E:Email.Net.Imap.Scripts.ReceiveHeader.MessageReceived">
            <summary>
            Occurs when receive next message
            </summary>
        </member>
        <member name="E:Email.Net.Imap.Scripts.ReceiveHeader.BrokenMessage">
            <summary>
            Occurs when receive message, that couldnot parse
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Scripts.ReceiveHeader.MessageCollection">
            <summary>
            Get collection of received messages
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Scripts.ReceiveMessageText">
            <summary>
            Script for receive text part of message (message without attachments)
            The following scripts inside itself: <see cref="T:Email.Net.Imap.Scripts.ReceiveHeader"/>, 
            <see cref="T:Email.Net.Imap.Scripts.ReceivePart"/>
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveMessageText._uid">
            <summary>
            UID of the received message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveMessageText._message">
            <summary>
            Received message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceiveMessageText._attchmentDirectory">
            <summary>
            Directory to store attachment
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveMessageText.#ctor(Email.Net.Imap.Sequences.SequenceNumber,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="uid">UID of the received message</param>
            <param name="attchmentDirectory">A directory to store 
            attachments of the message</param>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceiveMessageText.Run(Email.Net.Imap.IInteractDispatcher)">
            <summary>
            Execute script logic
            </summary>
            <param name="dispatcher">dispatcher for intercation with server</param>
        </member>
        <member name="P:Email.Net.Imap.Scripts.ReceiveMessageText.Message">
            <summary>
            Get received message
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Scripts.ReceivePart">
            <summary>
            Script for receive specified part (and all nested part) of the message
            This command work in monopoly mode
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceivePart._message">
            <summary>
            Part holder message
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceivePart._partDescription">
            <summary>
            Description of received part
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Scripts.ReceivePart._attachmentDirectory">
            <summary>
            Directory to store attachment
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceivePart.#ctor(Email.Net.Imap.ImapMessage,Email.Net.Common.MessageParts.IPart,System.String)">
            <summary>
            Create new instance of class
            </summary>
            <param name="message">Part holder message</param>
            <param name="partDescription">Description of received part</param>
            <param name="attachmentDirectory">A directory to store attachments 
            of the message</param>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceivePart.Behaviour">
            <summary>
            UID + FETCH command logic
            </summary>
            <returns>Server response</returns>
        </member>
        <member name="M:Email.Net.Imap.Scripts.ReceivePart.GetSubPartList(Email.Net.Common.MessageParts.IPart)">
            <summary>
            Get all nested text part indexes
            </summary>
            <returns></returns>
        </member>
        <member name="P:Email.Net.Imap.Scripts.ReceivePart.Part">
            <summary>
            Get received part description
            </summary>
        </member>
        <member name="T:Email.Net.Imap.Sequences.ISequence">
            <summary>
            Interface to provide a valid sequence of message identifiers for commands
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.ISequence.ToString">
            <summary>
            Converts sequence into string that can be used in server queries
            </summary>
            <returns>The string that contains uid sequence or uid range</returns>
        </member>
        <member name="T:Email.Net.Imap.Sequences.MessageSequenceNumbers">
            <summary>
            Collection of message uids
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.MessageSequenceNumbers.#ctor(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Creates a new instance of class from the given collection of UIDs
            </summary>
            <param name="sourceNumbers">The collection of message uids</param>
        </member>
        <member name="M:Email.Net.Imap.Sequences.MessageSequenceNumbers.#ctor">
            <summary>
            Creates a new empty collection
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.MessageSequenceNumbers.ToString">
            <summary>
            Converts sequence into string that can be used in server queries
            </summary>
            <returns>The string containing sequence of numbers separated by whitespace</returns>
        </member>
        <member name="T:Email.Net.Imap.Sequences.SequenceLargeNumber">
            <summary>
            Represents a number of last message in message sequence number of given mailbox
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceLargeNumber.ToString">
            <summary>
            Converts sequence into string that can be used in server queries
            </summary>
            <returns>Tre result string</returns>
        </member>
        <member name="T:Email.Net.Imap.Sequences.SequenceNumber">
            <summary>
            Sequence of one message id
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Sequences.SequenceNumber.number">
            <summary>
            Message's id represented by sequence
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceNumber.#ctor(System.UInt32)">
            <summary>
            Creates anew instance of class
            </summary>
            <param name="number">Positive number representing message uid</param>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceNumber.ToString">
            <summary>
            Converts sequence into string that can be used in server queries
            </summary>
            <returns>The string that contains given number</returns>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceNumber.ToUint">
            <summary>
            Returns unsigned integer used in sequence
            </summary>
            <returns>Unsigned integer - the given uid</returns>
        </member>
        <member name="T:Email.Net.Imap.Sequences.SequenceRange">
            <summary>
            Sequence of message numbers described with range of message's identifiers
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Sequences.SequenceRange.left">
            <summary>
            Left bounds of range
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Sequences.SequenceRange.right">
            <summary>
            Right bound of range
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceRange.#ctor(Email.Net.Imap.Sequences.ISequence,Email.Net.Imap.Sequences.ISequence)">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="left">Left border of range</param>
            <param name="right">Right border of range</param>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceRange.ToString">
            <summary>
            Converts sequence into string that can be used in server queries
            </summary>
            <returns>The string that contains uid range</returns>
        </member>
        <member name="T:Email.Net.Imap.Sequences.SequenceSet">
            <summary>
            Collection of subsequences of message numbers
            </summary>
        </member>
        <member name="F:Email.Net.Imap.Sequences.SequenceSet.sequences">
            <summary>
            Internal collection of subsequences
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.Init">
            <summary>
            Initialize an empty collection of sequence
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.#ctor">
            <summary>
            Creates a new instance of class
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.#ctor(System.Collections.Generic.IEnumerable{Email.Net.Imap.Sequences.ISequence})">
            <summary>
            Creates a new instance of class
            </summary>
            <param name="sequence">Collection of subsequences to put in instance</param>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.Add(Email.Net.Imap.Sequences.ISequence)">
            <summary>
            Adds a new subsequence into set
            </summary>
            <param name="subsequence">Subsequence to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.ToString">
            <summary>
            Converts the given set of subsequences into single string
            </summary>
            <returns>String describing given set</returns>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.System#Collections#Generic#IEnumerable{Email#Net#Imap#Sequences#ISequence}#GetEnumerator">
            <summary>
            Implements 
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"></see>
            </summary>
        </member>
        <member name="M:Email.Net.Imap.Sequences.SequenceSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Sequences.SequenceSet.Count">
            <summary>
            Returns a number of subsequences in collection
            </summary>
        </member>
        <member name="P:Email.Net.Imap.Sequences.SequenceSet.Item(System.Int32)">
            <summary>
            Returns a subsequence with the given index
            </summary>
            <param name="index">Index of queried sequence</param>
            <returns>Returns subsequence with given name</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when <paramref name="index"/> 
            is outside the bounds of the collection</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Pop3.Command.AuthApop">
            <summary>
            Command to authorize via MD5-digest
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="T:Email.Net.Pop3.Command.Pop3Command">
            <summary>
            Base class for all the POP3-commands
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="T:Email.Net.Pop3.Command.IPOP3Command">
            <summary>
            Interface for all the POP3 commands
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Command.IPOP3Command.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
        </member>
        <member name="F:Email.Net.Pop3.Command.Pop3Command.regUInt">
            <summary>
            Regular expression for a Uint number
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.Pop3Command.regDigest">
            <summary>
            Regular expression for a digest
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.Pop3Command.name">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.Pop3Command.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.Pop3Command.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthApop._username">
            <summary>
            An username to authenticate at the server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthApop._password">
            <summary>
            A password to authenticate at the server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthApop._digest">
            <summary>
            A digest value to build a CRAM response
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthApop.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the class APOP
            </summary>
            <param name="username">Login</param>
            <param name="password">Password</param>
            <param name="digest">Digest</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthApop.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Pop3.Command.CAPA">
            <summary>
            Command to get information about server
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>01.06.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.CAPA._commands">
            <summary>
            List of available commands
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.CAPA.regCommand">
            <summary>
            Regex represent command
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.CAPA.#ctor">
            <summary>
            Initializes a new instance of the class CAPA
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.CAPA.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.CAPA.Commands">
            <summary>
            List of available commands
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.AuthCram">
            <summary>
            Command for CRAM-MD5 authorization
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>06.06.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthCram._login">
            <summary>
            Login
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthCram._password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthCram.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class USER
            </summary>
            <param name="login">Login</param>
            <param name="password">Password</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthCram.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthCram.GetBase64CramMD5Credentials(System.String,System.String,System.String)">
            <summary>
            Implements CRAM-MD5 credentials encode algorithm
            </summary>
            <param name="challenge">Challenge string recieved from the server</param>
            <param name="login">User login</param>
            <param name="password">User password</param>
            <returns>Encoded CRAM-MD5 authentication response to server challenge</returns>
        </member>
        <member name="P:Email.Net.Pop3.Command.AuthCram.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.AuthLogin">
            <summary>
            Provides functionality of LOGIN authentication mechanism for POP3 protocol
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthLogin._login">
            <summary>
            Login
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthLogin._password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthLogin.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class USER
            </summary>
            <param name="login">Login</param>
            <param name="password">Password</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthLogin.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.AuthLogin.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.AuthPlain">
            <summary>
            Provides functionality for PLAIN authentication mechanism for POP3 protocol
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthPlain._login">
            <summary>
            Login
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthPlain._password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthPlain.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class USER
            </summary>
            <param name="login">Login</param>
            <param name="password">Password</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthPlain.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.AuthPlain.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.AuthDigestMd5">
            <summary>
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthDigestMd5.NoRealmFieldMessage">
            <summary>
            This string is used for an exception message, if realm field is not discovered in the DIGEST-MD5 message received from a server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthDigestMd5.NoOnceFieldMessage">
            <summary>
            This string is used for an exception message, if nonce field is not discovered in the DIGEST-MD5 message received from a server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthDigestMd5._login">
            <summary>
            Login to use in the authentication process
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthDigestMd5._password">
            <summary>
            Password to use in the authentication process
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthDigestMd5.#ctor(System.String,System.String)">
             <summary>
             Initializes the new object with the provided parameters
            </summary>
            <param name="login">Login to use in the authentication process</param>
            <param name="password">Password to use in the authentication process</param>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthDigestMd5.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs authentication using DIGEST-MD5 mechanism and the provided login and password
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Recieved response</returns>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthDigestMd5.ComputeResponse(System.String,System.String,System.String)">
            <summary>
            Computes response for the received challenge
            </summary>
            <param name="username">Login</param>
            <param name="password">Password</param>
            <param name="digest"></param>
            <returns>Response line for received challenge</returns>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthDigestMd5.ParseChallenge(System.String)">
            <summary>
            Parses challenge received from the server
            </summary>
            <param name="challenge">Challenge string</param>
            <returns>Parsed challenge as a key-value pair</returns>
            <exception cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException">Response received from the server wasn't properly formatted</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthDigestMd5.RandomString">
            <summary>
            Returns a random base64-encoded string of 12 characters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthDigestMd5.Hexify(System.Byte[])">
            <summary>
            Returns hexademical representation of byte array
            </summary>
            <param name="bytes">Bytes to convert</param>
            <returns>Hexademical representation</returns>
        </member>
        <member name="T:Email.Net.Pop3.Command.DELE">
            <summary>
            Command to remove a letter
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.DELE.messageNumber">
            <summary>
            Message number
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.DELE.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the class DELE
            </summary>
            <param name="message_id">Serial message id</param>
        </member>
        <member name="M:Email.Net.Pop3.Command.DELE.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.DELE.CommandText">
            <summary>
            Command text to send to the server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.LIST">
            <summary>
            Command to get information about message(s)
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>30.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.LIST.exIncorectServerResponse">
            <summary>
            This string will be returned if incorect server response is recieved
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.LIST.messageNumber">
            <summary>
            Number of message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.LIST.selectOneMessage">
            <summary>
            Flag of getting information about only one message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.LIST._messages">
            <summary>
            Information got from the server
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.LIST.#ctor">
            <summary>
            Initializes a new object of class LIST
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.LIST.#ctor(System.UInt32)">
            <summary>
            Initializes a new object of class LIST
            </summary>
            <param name="number">Number of message</param>
        </member>
        <member name="M:Email.Net.Pop3.Command.LIST.Init">
            <summary>
            Initializes a new object of class LIST
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.LIST.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.LIST.GetOneMessage(System.String)">
            <summary>
            Getting information about one message
            </summary>
            <param name="response">Server response</param>
            <returns>Result of performing the command</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.LIST.Messages">
            <summary>
            Information got from the server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.NOOP">
            <summary>
            Empty command (used to prevent the server breaking connection because of time-out)
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Command.NOOP.#ctor">
            <summary>
            Initializes a new instance of the class NOOP
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.PASS">
            <summary>
            Command to send password
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.PASS.password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.PASS.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class PASS
            </summary>
            <param name="password">Password</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.PASS.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.PASS.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.AuthStandart">
            <summary>
            Command for plain-text authorization
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthStandart._user">
            <summary>
            Command to send login
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.AuthStandart._pass">
            <summary>
            Command to send password
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthStandart.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the class USER_PASS
            </summary>
            <param name="username">Login</param>
            <param name="password">Password</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.AuthStandart.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Pop3.Command.QUIT">
            <summary>
            Command to break connection with the server
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Command.QUIT.#ctor">
            <summary>
            Initializes a new instance of the class QUIT
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.RETR">
            <summary>
            Command to get the message with the specified number
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.RETR.exIncorectServerResponse">
            <summary>
            This string will be returned if incorect server response is recieved
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.RETR._message">
            <summary>
            the message recieved during the last interaction
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.RETR._attachmentDirectory">
            <summary>
            Attachment directory
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.RETR.messageNumber">
            <summary>
            Number of message
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.RETR.#ctor(System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the class RETR
            </summary>
            <param name="number">Number of message</param>
            <param name="attachmentDirectory">Directory for saving the attachment</param>
        </member>
        <member name="M:Email.Net.Pop3.Command.RETR.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.RETR.Message">
            <summary>
            Gets the message recieved during the last interaction
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Command.RETR.AttachmentDirectory">
            <summary>
            Attachment directory
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Command.RETR.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.RSET">
            <summary>
            Command for current session transaction roll-back
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Command.RSET.#ctor">
            <summary>
            Initializes a new instance of the class RSET
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.STAT">
            <summary>
            Command to get statistics (count of messages and total size of messages)
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>30.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.STAT._statistics">
            <summary>
            statistics of the message received during last interaction with the server
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.STAT.#ctor">
            <summary>
            Initializes a new instance of the class STAT
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.STAT.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.STAT.Statistics">
            <summary>
            Gets statistics of the message received during last interaction with the server
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Command.STAT.MessagesCount">
            <summary>
            Count of messages
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Command.STAT.MessagesSize">
            <summary>
            Size of messages
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.STLS">
            <summary>
            Command start TLS (SSL) interaction
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>28.06.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Command.STLS.#ctor">
            <summary>
            Initializes a new instance of the class STLS
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.STLS.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Pop3.Command.TOP">
            <summary>
            Command to get messages headers
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.TOP.exIncorectServerResponse">
            <summary>
            This string will be returned if incorect server response is recieved
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.TOP._messageHeaders">
            <summary>
            Headers of message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.TOP._messageBody">
            <summary>
            Body of message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.TOP.messageNumber">
            <summary>
            Number of message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.TOP.messageRowCount">
            <summary>
            Count of the message lines
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.TOP.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the class TOP
            </summary>
            <param name="number">Number of message</param>
            <param name="rows">Count of the message lines which are necessary to get</param>
        </member>
        <member name="M:Email.Net.Pop3.Command.TOP.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.TOP.MessageHeaders">
            <summary>
            Headers of message
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Command.TOP.MessageBody">
            <summary>
            Body of message
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Command.TOP.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.UIDL">
            <summary>
            Command to get unique message number
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>06.06.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.UIDL.exIncorectServerResponse">
            <summary>
            This string will be returned if incorect server response is recieved
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.UIDL._messages">
            <summary>
            Information got from the server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.UIDL._messageNumber">
            <summary>
            Number of message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.UIDL._selectOneMessage">
            <summary>
            Flag of getting information about only one message
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Command.UIDL._regMessageInfo">
            <summary>
            A regular expression for parsing the incoming message info
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.UIDL.#ctor">
            <summary>
            Initializes a new instance of the class UIDL
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.UIDL.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the class UIDL
            </summary>
            <param name="number">Message number</param>
        </member>
        <member name="M:Email.Net.Pop3.Command.UIDL.Init">
            <summary>
            Initializes a new instance of the class UIDL
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.UIDL.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.UIDL.GetOneMessage(System.String)">
            <summary>
            Getting information about one message
            </summary>
            <param name="response">Server response</param>
            <returns>Result of performing the command</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.UIDL.Messages">
            <summary>
            Information got from the server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Command.USER">
            <summary>
            Command to send login
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Command.USER.login">
            <summary>
            Login
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Command.USER.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class USER
            </summary>
            <param name="login">Login</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Command.USER.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs communication with the server
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Result of the communication</returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Command.USER.CommandText">
            <summary>
            Command text to send to server
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.EPop3ClientState">
            <summary>
            Describes a state of POP3 client
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ClientState.Awaiting">
            <summary>
            A client is awating for actions
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ClientState.Busy">
            <summary>
            A client is busy at the moment
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.EPop3ConnectionState">
            <summary>
            POP3-server connection status
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ConnectionState.Disconnected">
            <summary>
            Disconnected
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ConnectionState.Connected">
            <summary>
            Connected, but not authenticated
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ConnectionState.Authenticated">
            <summary>
            Connected and authenticated
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.EPop3ResponseType">
            <summary>
            Server response type
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ResponseType.OK">
            <summary>
            Request was performed successfully
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.EPop3ResponseType.ERR">
            <summary>
            Request was performed with an error
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Exceptions.Pop3ConnectException">
            <summary>
            Exception generated when connecting to a POP3 server fails
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="T:Email.Net.Pop3.Exceptions.Pop3Exception">
            <summary>
            Base class for POP3-client exceptions
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3Exception.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3Exception.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3ConnectException.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3ConnectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">
            <summary>
            Exception generated when problems with getting response from a POP3-server occur
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3ReceiveException.#ctor">
            <summary>
            Initializes a new instance of the class Pop3ReceiveException
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3ReceiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class Pop3ReceiveException
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException">
            <summary>
            Exception generated when receive message fails
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException._mailMessage">
            <summary>
            Received email message
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException.#ctor(System.String,Email.Net.Common.Rfc822Message)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="errorMessage">Error description</param>
            <param name="mailMessage">Email message</param>
        </member>
        <member name="P:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException.MailMessage">
            <summary>
            Received email message
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Exceptions.Pop3SendException">
            <summary>
            Exception generated when problems with sending a message to a POP3-server occur
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3SendException.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3SendException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">
            <summary>
            Exception for the situations when a POP3-client status is 
            incorrect to perform the specified command
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3WrongStateException.#ctor">
            <summary>
            Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Exceptions.Pop3WrongStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class
            </summary>
            <param name="message">Error description</param>
        </member>
        <member name="T:Email.Net.Pop3.Pop3SaslResponse">
            <summary>
            POP3-server response for SASL extension
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="T:Email.Net.Pop3.Pop3Response">
            <summary>
            POP3-server response
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>24.03.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Response._response">
            <summary>
            An original response string received from the server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Response._message">
            <summary>
            An extra information contained in the response
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Response._type">
            <summary>
            Response type
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Response.#ctor">
            <summary>
            Initializes a new instance of the class Pop3Response
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Response.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class Pop3Response
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Response.#ctor(Email.Net.Pop3.EPop3ResponseType,System.String)">
            <summary>
            Initializes a new instance of the class Pop3Response
            </summary>
            <param name="type">Responce type <see cref="T:Email.Net.Pop3.EPop3ResponseType"/></param>
            <param name="errorMessage">Server response</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Response.ToString">
            <summary>
            Converts a server response object to a string
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Response.ParseResponse(System.String)">
            <summary>
            Extracts the extra information from the response
            </summary>
            <param name="message">Response</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Response.Type">
            <summary>
            Response type
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Response.Message">
            <summary>
            Extra information contained in the response
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Response.Response">
            <summary>
            Gets or sets an original response string received from the server
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3SaslResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class Pop3SaslResponse
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3SaslResponse.ParseResponse(System.String)">
            <summary>
            Extracts the extra information from the response
            </summary>
            <param name="message">Response</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="T:Email.Net.Pop3.Pop3Client">
            <summary>
            Class to communicate with a POP3-server
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>25.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client.exWrongStatus">
            <summary>
            This string will be returned as a text of the exception, if command cannot be executed in that state 
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client.exServerDontKnowAPOP">
            <summary>
            This string will be returned as a text of the exception, if server doesn't suppurt APOP command
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client.exOtherThreadIsActive">
            <summary>
            This string will be returned as a text of the exception, 
            if user executes syncronous methods of a Pop3Client object from different threads
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client.exAuthenticationMethodNotSupported">
            <summary>
            This string will be returned as a text of the exception, if user attempts 
            to authenticate with method which does not supported by the server.
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._connection">
            <summary>
            Object, that provides methods to interact with POP3 server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._configurationProvider">
            <summary>
            Object, that provides configuration to POP3 client class. Encapsulates parameters of the connection
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._connectionFactory">
            <summary>
            A field is used by <see cref="T:Email.Net.Common.Connections.ConnectionFactory"/> property
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._state">
            <summary>
            the current state of the Pop3Client
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._connectionState">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._username">
            <summary>
            Username to authenticate on the server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client._password">
            <summary>
            Password to authenticate on the server
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes the internal structures of the created object using the provided container
            </summary>
            <param name="container">A container object to use</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.#ctor(System.String,System.UInt16,System.String,System.String)">
            <summary>
            Initializes a new instance of the class <see cref="T:Email.Net.Pop3.Pop3Client"/>
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for connection</param>
            <param name="login">Username to login to the POP3 server</param>
            <param name="password">Password to login to the POP3 server</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.#ctor(System.String,System.UInt16,System.String,System.String,Email.Net.Common.Configurations.EInteractionType,Email.Net.Common.Configurations.EAuthenticationType)">
            <summary>
            Initializes a new instance of the class <see cref="T:Email.Net.Pop3.Pop3Client"/>
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for connection</param>
            <param name="login">Username to login to the POP3 server</param>
            <param name="password">Password to login to the POP3 server</param>
            <param name="interactionType">Type of interating with a server <see cref="T:Email.Net.Common.Configurations.EInteractionType"/></param>
            <param name="authenticationType">Autentification type <see cref="T:Email.Net.Common.Configurations.EAuthenticationType"/></param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.#ctor(Email.Net.Common.Configurations.IConfigurationProvider,System.String,System.String,Email.Net.Common.Configurations.EAuthenticationType)">
            <summary>
            Initializes a new instance of the class <see cref="T:Email.Net.Pop3.Pop3Client"/>
            </summary>
            <param name="configurationProvider">Configuration provider</param>
            <param name="login">Username to login to the POP3 server</param>
            <param name="password">Password to login to the POP3 server</param>
            <param name="authenticationType">Autentification type <see cref="T:Email.Net.Common.Configurations.EAuthenticationType"/></param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.#ctor(System.String,System.UInt16,Email.Net.Common.Configurations.EInteractionType,Email.Net.Common.Configurations.EAuthenticationType)">
            <summary>
            Initializes a new instance of the class <see cref="T:Email.Net.Pop3.Pop3Client"/>
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for connection</param>
            <param name="interactionType">Type of interating with a server <see cref="T:Email.Net.Common.Configurations.EInteractionType"/></param>
            <param name="authenticationType">Selected authentication type</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.Init(System.String,System.UInt16,System.String,System.String,Email.Net.Common.Configurations.EInteractionType,Email.Net.Common.Configurations.EAuthenticationType)">
            <summary>
            Initializes a new instance of the class <see cref="T:Email.Net.Pop3.Pop3Client"/>
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for connection</param>
            <param name="login">Username to login to the POP3 server</param>
            <param name="password">Password to login to the POP3 server</param>
            <param name="interactionType">Type of interating with a server <see cref="T:Email.Net.Common.Configurations.EInteractionType"/></param>
            <param name="authenticationType">Autentification type <see cref="T:Email.Net.Common.Configurations.EAuthenticationType"/></param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.Login">
            <summary>
				Connects to the server and authorizes			
			</summary><returns>A server response</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">The server does not support the APOP command</exception><example>
				The following example shows how to use the Login method
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="LoginExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="LoginExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.Logout">
            <summary>
				Disconnects from the server
			</summary><returns>A server response</returns><example>
				The following example shows how to use the Logout method
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="LogoutExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="LogoutExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryGetMessagesInfo(Email.Net.Pop3.Pop3MessageInfoCollection@,System.String@)">
            <summary>
            Tries to get messages information(<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) from the server
            </summary>
            <param name="infoCollection">Messages information</param>
            <param name="errorMessage">rror message</param>
            <returns>true - information received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryGetMessagesInfo(Email.Net.Pop3.Pop3MessageInfoCollection@,System.String@)">
            <summary>
            Tries to get messages information (<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) from the server.
            This is an utility method. It doesn't check locks.
            </summary>
            <param name="infoCollection">Message information</param>
            <param name="errorMessage">Error message</param>
            <returns>true - information received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetMessagesInfo">
            <summary>
				Gets a message information (<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) from the server.
			</summary><returns>A message information</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">The information receiving is failed</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The following example exposes how to get an information
				about all messages contained in the mailbox and find messages bigger
				than 100KB among them
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetMessagesInfoExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetMessagesInfoExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryGetMessageInfo(System.UInt32,Email.Net.Pop3.Pop3MessageInfo@,System.String@)">
            <summary>
            Tries to get message information(<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) from the server
            </summary>
            <param name="number">Number of the message</param>
            <param name="messageInfo">Message information</param>
            <param name="errorMessage">Error message</param>
            <returns>true, if information received successfully, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryGetMessageInfo(System.UInt32,Email.Net.Pop3.Pop3MessageInfo@,System.String@)">
            <summary>
            Tries to get message information(<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) from the server
            This is an utility method. It doesn't check locks.
            </summary>
            <param name="number">Number of the message in the current session</param>
            <param name="messageInfo">Message information</param>
            <param name="errorMessage">Error message</param>
            <returns>true if information received successfully, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetMessageInfo(System.UInt32)">
            <summary>
				Gets a message information(<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) from the server
			</summary><param name="number">A number of the message in the current session</param><returns>A message information</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">The message information receiving is failed</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The folowing example demonstrates how to receive an information
				about the certain message
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetMessageInfoExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetMessageInfoExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryGetMessage(System.UInt32,Email.Net.Common.Rfc822Message@,System.String@)">
            <summary>
            Tries to get message from the POP3 server
            </summary>
            <param name="number">Message number at the current session</param>
            <param name="message">Message</param>
            <param name="errorMessage">Error message</param>
            <returns>true - received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryGetMessage(System.UInt32,Email.Net.Common.Rfc822Message@,System.String@)">
            <summary>
            Tries to get message from the POP3 server
            Method is utility. Doesn't check locks.
            </summary>
            <param name="number">Message number at the current session</param>
            <param name="message">Message</param>
            <param name="errorMessage">Error message</param>
            <returns>true - received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetMessage(System.UInt32)">
            <summary>
				Gets a message from the POP3 server
				
			</summary><param name="number">A message number at the current session</param><returns>A message</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException">The information receiving is failed</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The following example shows how to get a message from the server
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetMessageExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetMessageExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._GetMessages(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Recieves messages according to the given numbers from the server and parses them
            </summary>
            <param name="serialNumbers">
            Numbers
            </param>
            <returns>
            Message collection of received messages
            </returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._GetAllMessages">
            <summary>
            Gets all the messages
            This is an utility method, it doesn't check locks
            </summary>
            <returns>Message collection <see cref="T:Email.Net.Common.Collections.Rfc822MessageCollection"/></returns>
            <exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException">Information receiving is failed</exception>
            <exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception>
            <exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">Message list receiving error</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetAllMessages">
            <summary>
				Gets all messages
			</summary><returns>
				A message collection <see cref="T:Email.Net.Common.Collections.Rfc822MessageCollection"/>
			</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveMessageException">
				The information receiving is failed,
				If there is a subscriber of the <see cref="E:Email.Net.Pop3.Pop3Client.BrokenMessage"/> event,
				an exception will not be thorwn.
			</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">Message list receiving error</exception><example>
				The following example shows how to get all messages from the server and count them
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetAllMessagesExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetAllMessagesExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryGetStatistic(Email.Net.Pop3.Pop3MessageStatistics@,System.String@)">
            <summary>
            Tries to get information about messages from the mailbox.
            </summary>
            <param name="statistic">Messages statistics</param>
            <param name="errorMessage">Error message text</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryGetStatistic(Email.Net.Pop3.Pop3MessageStatistics@,System.String@)">
            <summary>
            Tries to get information about messages from the mailbox.
            Method is utility. Doesn't check locks.
            </summary>
            <param name="statistic">Messages statistics</param>
            <param name="errorMessage">Error message text</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetStatistic">
            <summary>
				Gets information about messages from the mailbox
			</summary><returns>A messages statistics</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">The information receiving is failed</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The following example shows how to get a mailbox statistics from the server
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetStatisticExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetStatisticExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryNoop(Email.Net.Pop3.Pop3Response@)">
            <summary>
            Tries to send presence command.
            </summary>
            <param name="responce">Server response</param>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryNoop(Email.Net.Pop3.Pop3Response@)">
            <summary>
            Tries to send presence command.
            </summary>
            <param name="responce">Server response</param>
            <returns>true - command received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.Noop">
            <summary>
				Sends the presence command. The presence comand lets the server know about the connection.
				
			</summary><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The following example shows how to use the NOOP method
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="NoopExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="NoopExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryGetUIDMessage(System.UInt32,Email.Net.Pop3.Pop3MessageUIDInfo@,System.String@)">
            <summary>
            Tries to get message UID (unique identifier)
            </summary>
            <param name="serialNumber">Serial number</param>
            <param name="messageUIDInfo">Message numbers information</param>
            <param name="errorMessage">Error message text</param>
            <returns>true - received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryGetUIDMessage(System.UInt32,Email.Net.Pop3.Pop3MessageUIDInfo@,System.String@)">
            <summary>
            Tries to get message UID (unique identifier)
            Method is utility. Doesn't check locks.
            </summary>
            <param name="serialNumber">Serial number</param>
            <param name="messageUIDInfo">Message number information</param>
            <param name="errorMessage">Error message text</param>
            <returns>true - received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetUIDMessage(System.UInt32)">
            <summary>
				Gets a message UID (unique identifier)				
			</summary><param name="serialNumber">A serial number</param><returns>A message number information</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">The information receiving is failed</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetUIDMessageExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetUIDMessageExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryGetAllUIDMessages(Email.Net.Pop3.Pop3MessageUIDInfoCollection@,System.String@)">
            <summary>
            Tries to get all messages UIDs (unique identifiers)
            </summary>
            <param name="messageUIDInfo">Message UID collection</param>
            <param name="errorMessage">Error message text</param>
            <returns>true - received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryGetAllUIDMessages(Email.Net.Pop3.Pop3MessageUIDInfoCollection@,System.String@)">
            <summary>
            Tries to get all messages UIDs (unique identifiers)
            Method is utility. Doesn't check locks.
            </summary>
            <param name="messageUIDInfo">Message UID collection</param>
            <param name="errorMessage">Error message text</param>
            <returns>true - received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.GetAllUIDMessages">
            <summary>
				Gets all messages UIDs (unique identifiers)				
			</summary><returns>A messages UID collection</returns><exception cref="T:Email.Net.Pop3.Exceptions.Pop3ReceiveException">The information receiving is failed</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The following example exposes how to request a message unique numbers
				and filter new messages by using it.
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="GetAllUIDMessagesExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="GetAllUIDMessagesExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryDeleteMessage(System.UInt32,Email.Net.Pop3.Pop3Response@)">
            <summary>
            Tries to delete the message
            </summary>
            <param name="serialNumber">Message serial number</param>
            <param name="responce">Server response</param>
            <returns>true - deleted successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryDeleteMessage(System.UInt32,Email.Net.Pop3.Pop3Response@)">
            <summary>
            Tries to delete the message
            </summary>
            <param name="serialNumber">Message serial number</param>
            <param name="responce">Server response</param>
            <returns>true - deleted successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.DeleteMessage(System.UInt32)">
            <summary>
				Deletes a message				
			</summary><param name="serialNumber">A message serial number</param><returns>A serever response</returns><example>
				The following example shows how to delete a message
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="DeleteMessageExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="DeleteMessageExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.TryReset(Email.Net.Pop3.Pop3Response@)">
            <summary>
            Tries to roll back current transaction
            </summary>
            <param name="responce">Server response</param>
            <returns>true - command received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client._TryReset(Email.Net.Pop3.Pop3Response@)">
            <summary>
            Tries to roll back the current transaction
            </summary>
            <param name="responce">Server response</param>
            <returns>true - command received successfully</returns>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.Reset">
            <summary>
				Rolls back the current transaction				
			</summary><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">Can't run command in this state</exception><example>
				The following example shows how to roll back a transaction
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="ResetExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="ResetExample"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.DoCommand(Email.Net.Pop3.Command.IPOP3Command)">
            <summary>
            Runs command
            </summary>
            <param name="command">Command</param>
            <returns>Command execution result<see cref="T:Email.Net.Pop3.Pop3Response"/></returns>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.HandleException(System.Exception)">
            <summary>
            Handles an exceptions occured in client commands
            </summary>
            <param name="exception">An exception catched in client's  method</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.BeginRecv(System.Collections.Generic.IEnumerable{System.UInt32},System.AsyncCallback)">
            <summary>
				Starts an asyncronous receiving messages
				You should call the <see cref="M:Email.Net.Pop3.Pop3Client.EndRecv(System.IAsyncResult)"/>
			</summary><param name="serialNumbers">Numbers of messages to receive</param><param name="callback">
				The callback delegate will be called when the receiving process finishes.
				Can be null
			</param><returns>
				An object to track the process from the client code
				This object should be passed to the <see cref="M:Email.Net.Pop3.Pop3Client.EndRecv(System.IAsyncResult)"/> method call				
			</returns><exception cref="T:System.ArgumentNullException">Parameters of this method cannot be null</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">
				Selected authentication method is not supported by the sever,
				or no suitable authentication method was detected				
			</exception><example>
				The following example shows how to asynchronously receive a message
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="BeginRecvExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="CountOnMessageReceived"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="BeginRecvExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="CountOnMessageReceived"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.BeginRecv(System.AsyncCallback)">
            <summary>
				Starts an asyncronous receiving all messages
				You should call the <see cref="M:Email.Net.Pop3.Pop3Client.EndRecv(System.IAsyncResult)"/>				
			</summary><param name="callback">
				Thee callback delegate will be called when the receiving process finishes.
				Can be null				
			</param><returns>
				An object to track the process from the client code.
				This object should be passed to the EndResult call				
			</returns><exception cref="T:System.ArgumentNullException">Parameters of this method cannot be null</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">
				The selected authentication method is not supported by the sever,
				or no suitable authentication method was detected				
			</exception><example>
				The following example shows how to asynchronously receive a message
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="BeginRecv2Example"/>
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="CountOnMessageReceived"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="BeginRecv2Example"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="CountOnMessageReceived"/>
			</example>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.EndRecv(System.IAsyncResult)">
            <summary>
				This method must be called after the process of receiving is finished.
				If the method is called during the receiving process it will 
				block thread until the sending process finishes.
			</summary><param name="asyncResult">An object you got from the BeginReceive</param><returns>
				The result of receive operation
			</returns><exception cref="T:System.ArgumentNullException">
				Parameters of this method cannot be null
			</exception><exception cref="T:Email.Net.Pop3.Exceptions.Pop3WrongStateException">
				The selected authentication method is not supported by the sever,
				or no suitable authentication method was detected
			</exception><example>
				The following example shows how to use the EndRecv method
				
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="BeginRecvExample"/>
				<code lang="C#" source="EMail.NET.Example.CS\Pop3ClientExamples.cs" region="CountOnMessageReceived"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="BeginRecvExample"/>
				<code lang="vbnet" source="EMail.NET.Example.VB\Pop3ClientExamples.vb" region="CountOnMessageReceived"/>
			</example>
        </member>
        <member name="F:Email.Net.Pop3.Pop3Client.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3Client.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.State">
            <summary>
            Gets the current state of the Pop3Client
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ConnectionState">
            <summary>
            Connection status
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.Host">
            <summary>
            An address of the server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.Port">
            <summary>
            A number of the TCP server port
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.Username">
            <summary>
            A username to authenticate on the server
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.Password">
            <summary>
            A password to authenticate on the server
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ProxyType">
            <summary>
            Type of the proxy server to use
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ProxyHost">
            <summary>
            A hostname of the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ProxyPort">
            <summary>
            A TCP port of the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ProxyUser">
            <summary>
            A username to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ProxyPassword">
            <summary>
            A password to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.AuthenticationType">
            <summary>
            A type of authentication to use
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.SSLInteractionType">
            <summary>
            Specifies using TLS/SSL during the connection
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.SendTimeout">
            <summary>
            Specifies time in milliseconds to wait a response while sending packets to the server
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.ReceiveTimeout">
            <summary>
            Specifies time in milliseconds to wait a response while receiving packets from the server
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3Client.AttachmentDirectory">
            <summary>
            Specifies directory where saved all attachments
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.Connected">
            <summary>
            Occurs when the client is connected to the server
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.Authenticated">
            <summary>
            Occurs when the client is authenticated on the server
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.MessageReceived">
            <summary>
            Occurs when one of the provided message is received
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.Completed">
            <summary>
            Occues when the whole receiving process is completed
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.Quit">
            <summary>
            Occurs when the client is quit from the server
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.BrokenMessage">
            <summary>
            Occurs when one of the provided message is not received
            </summary>
        </member>
        <member name="E:Email.Net.Pop3.Pop3Client.MessageDeleted">
            <summary>
            Occurs when one of the provided message is deleted
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Pop3Client.RecvDelegate">
            <summary>
            Represents the <see cref="M:Email.Net.Pop3.Pop3Client.GetMessage(System.UInt32)"/> method to call it asynchronously
            </summary>
            <param name="serialNumbers">Messages to receive</param>
        </member>
        <member name="T:Email.Net.Pop3.Pop3Client.RecvAllDelegate">
            <summary>
            Represents the <see cref="M:Email.Net.Pop3.Pop3Client.GetAllMessages"/> method to call it asynchronously
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Pop3ClientEventHandler">
            <summary>
            Represents a method that will handle Pop3Client events
            </summary>
            <param name="sender">The source of the event</param>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageIDHandler">
            <summary>
            Represents a method that will handle Pop3Client events associated with the message serial number
            </summary>
            <param name="sender">The source of the event</param>
            <param name="serialNumber">Message serial number</param>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageEventHandler">
            <summary>
            Represents a method that will handle Pop3Client events associated with the messages successful obtain
            </summary>
            <param name="sender">The source of the event</param>
            <param name="message">Received message</param>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageInfoEventHandler">
            <summary>
            Represents a method that will handle Pop3Client events associated with the messages obtain failure
            </summary>
            <param name="sender">The source of the event</param>
            <param name="messageInfo">Message information</param>
            <param name="errorMessage">Error message</param>
            <param name="message">Message, that caused failure</param>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageInfo">
            <summary>
            Information about a message
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageInfo._number">
            <summary>
            Message number
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageInfo._size">
            <summary>
            Message size (in bytes)
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageInfo.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the the class
            </summary>
            <param name="number">Message number</param>
            <param name="size">Message size (in bytes)</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageInfo.ToString">
            <summary>
            Converts the current object to a string
            </summary>
            <returns>The current object represented as a string</returns>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageInfo.Number">
            <summary>
            Message number
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageInfo.Size">
            <summary>
            Message size (in bytes)
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageInfoCollection">
            <summary>
            A collection of MessageInfo (<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>) objects
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>28.05.2010</modify>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageStatistics">
            <summary>
            Information about the messages at the server
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageStatistics._countMessages">
            <summary>
            Number of messages
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageStatistics._sizeMessages">
            <summary>
            Message size
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageStatistics.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageStatistics.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="countMessages">Number of messages</param>
            <param name="sizeMessages">Message size</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageStatistics.Reset">
            <summary>
            Resets statistics
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageStatistics.CountMessages">
            <summary>
            Number of messages
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageStatistics.SizeMessages">
            <summary>
            A size of of the messages contained in the mailbox
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageStreamReader">
            <summary>
             A stream reader which is used to read data 
             sended by the pop3 server
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageStreamReader._exReadAfterEndOfMessage">
            <summary>
            Constant string for exceptions that is thrown if a user tries to read something from a reader object after the end have been reached
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageStreamReader._connection">
            <summary>
            A source connection which provides data
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageStreamReader._endOfMessage">
            <summary>
            A flag which indicates end of the message. 
            If set message boundary was readed.
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageStreamReader.#ctor(Email.Net.Common.Connections.IConnection)">
            <summary>
            Creates a new instance o the class
            </summary>
            <param name="connection">A source connection</param>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageStreamReader.ReadLine">
            <summary>
            Reads a line from the stream source stream.
            </summary>
            <remarks>If the line starts with "." followed by a sequence 
            other than 0x0D 0x0A it will be removed from the result byte array.
            In other case the <see cref="P:Email.Net.Pop3.Pop3MessageStreamReader.EndOfMessage"/> flag will be set and null 
            value will be returned.</remarks>
            <returns>Readed bytes till the first end line subsequence or null.</returns>
            <exception cref="T:Email.Net.Common.Exceptions.EndOfMessageException">Occurs on attempt to read data 
            after the of message was reached.</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageStreamReader.EndOfMessage">
            <summary>
            A flag which indicates end of the message. 
            If set message boundary was readed.
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageUIDInfo">
            <summary>
            Message numbers information
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>12.06.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageUIDInfo._serialNumber">
            <summary>
            Serial number
            </summary>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageUIDInfo._uniqueNumber">
            <summary>
            Unique number
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfo.#ctor(System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the class Pop3MessageUIDInfo
            </summary>
            <param name="serialNumber">Serial number</param>
            <param name="uniqueNumber">Unique number</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageUIDInfo.SerialNumber">
            <summary>
            Serial number
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageUIDInfo.UniqueNumber">
            <summary>
            Unique number
            </summary>
        </member>
        <member name="T:Email.Net.Pop3.Pop3MessageUIDInfoCollection">
            <summary>
            Collection of MessageUIDInfo (<see cref="T:Email.Net.Pop3.Pop3MessageInfo"/>)
            </summary>
            <author>Aleksey Zhuravlev</author>
            <modify>28.05.2010</modify>
        </member>
        <member name="F:Email.Net.Pop3.Pop3MessageUIDInfoCollection._collection">
            <summary>
            List of message info
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.Init">
            <summary>
            Initializes the object creating an empty list of message info
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.#ctor">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Pop3.Pop3MessageInfoCollection"/> 
            with an empty collection
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.#ctor(System.Collections.Generic.IEnumerable{Email.Net.Pop3.Pop3MessageUIDInfo})">
            <summary>
            Initializes a new object of class <see cref="T:Email.Net.Pop3.Pop3MessageInfoCollection"/> 
            with the specified collection 
            <paramref name="source"/>
            </summary>
            <param name="source">Collection that will be copied into the being created object</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.Add(Email.Net.Pop3.Pop3MessageUIDInfo)">
            <summary>
            Adds a message into collection
            </summary>
            <param name="part">Message info to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.AddRange(System.Collections.Generic.IEnumerable{Email.Net.Pop3.Pop3MessageUIDInfo})">
            <summary>
            Adds a collection (a range of message info) into the given one
            </summary>
            <param name="parts">Collection to add</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Email.Net.Pop3.Pop3MessageUIDInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageUIDInfoCollection.Item(System.Int32)">
            <summary>
            Gets and sets a message by its index in the collection
            </summary>
            <param name="index">Index specifying the message</param>
            <returns>Specified message</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Raised when <paramref name="index"/> is outside the bounds of 
            the collection</exception>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="P:Email.Net.Pop3.Pop3MessageUIDInfoCollection.Count">
            <summary>
            Gets the count of items (message info) in the collection
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.AuthCommandResponse">
            <summary>
            Represents a response received from server for the sent authentication command
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.SmtpResponse">
            <summary>
            Represents the response on one command received from the smtp server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponse.InvalidResponseFormatMessage">
            <summary>
            A message is used in exception if invalid response recieved from a server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponse._responseLines">
            <summary>
            Lines of the response received from server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponse._code">
            <summary>
            A code of the response
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponse._type">
            <summary>
            A type of the response
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponse._generalMessage">
            <summary>
            A message supplied by the server with the response 
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponse.GetResponseText">
            <summary>
            Returns the server response as one string even if it contains more
            Lines of the response are separated by endline symbol
            </summary>
            <returns>Server response as one string</returns>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponse.#ctor(Email.Net.Common.Connections.IConnection)">
            <summary>
            Constructs a new object using provided connection object
            </summary>
            <param name="connection">Connection object to use</param>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponse.GetResponseTypeFromLine(System.String)">
            <summary>
            Determines the response type using provided response line
            </summary>
            <param name="responseLine">The response line received from server</param>
            <returns>Response type</returns>
            <exception cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException">The response line received from server has incorrect format</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponse.Code">
            <summary>
            A code of the response
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponse.Type">
            <summary>
            A type of the response
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponse.GeneralMessage">
            <summary>
            A message supplied by the server with the response 
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponse.Lines">
            <summary>
            Lines received from the server
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.AuthCommandResponse.#ctor(Email.Net.Common.Connections.IConnection,Email.Net.Smtp.EAuthCommandStage)">
            <summary>
            Initializes the new response object with connection and stage parameters
            </summary>
            <param name="connection">An <see cref="T:Email.Net.Common.Connections.IConnection"/> object to receive the response from</param>
            <param name="stage">Stage of authentication process</param>
            <exception cref="T:System.ArgumentNullException">connection is null</exception>
        </member>
        <member name="F:Email.Net.Smtp.AuthCommandResponse._stage">
            <summary>
            Returns the last state of the authentication process
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.AuthCommandResponse.Stage">
            <summary>
            Returns the last state of the authentication process
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.EAuthCommandStage">
            <summary>
            Represents state of authentication process
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.EAuthCommandStage.AUTHSended">
            <summary>
            A line with AUTH command was successfully sended
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.EAuthCommandStage.LoginSended">
            <summary>
            A line with login was successfully sended
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.EAuthCommandStage.CredentialsSended">
            <summary>
            A line with password or encrypted credentials was successfully sended
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.ESendResult">
            <summary>
            Represents results of a send operation
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.Ok">
            <summary>
            Operation completed successfully
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.OkWithInvalidEmails">
            <summary>
            Operation completed, but some destination addresses was forbidden by server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.AuthenticationFailed">
            <summary>
            Authentication failed
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.FromAddressFailed">
            <summary>
            Specified from address was forbidden by the server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.DataSendingFailed">
            <summary>
            Data sending process failed
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.StrangeServerResponse">
            <summary>
            Response recieved from the server has incorrect format
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESendResult.SslWasNotStarted">
            <summary>
            SSL was not started by the server
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.ESmtpClientState">
            <summary>
            Describes a state of smtp client
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpClientState.Awaiting">
            <summary>
            A client is awating for actions
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpClientState.Sending">
            <summary>
            A client is sending emails at the moment
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.ESmtpCommandResultCode">
            <summary>
            Represents result codes of smtp responses
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.None">
            <summary>
            No result code
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.SystemStatus_OrSystemHelpReply">
            <summary>
            Code 211
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.HelpMessage">
            <summary>
            Code 214
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.ServiceReady">
            <summary>
            Code 220
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.ServiceClosingTransmissionChannel">
            <summary>
            Code 221
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.AuthenticationSuccessful">
            <summary>
            Code 235
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.RequestedMailActionOkay_Completed">
            <summary>
            Code 250
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.UserNotLocal_WillForwardTo">
            <summary>
            Code 251
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.CannotVerifyUser_ButWillAcceptMessageAndAttemptDelivery">
            <summary>
            Code 252
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.WaitingForAuthentication">
            <summary>
            Code 334
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.StartMailInput">
            <summary>
            Code 354
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.ServiceNotAvailable_ClosingTransmissionChannel">
            <summary>
            Code 421
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.APasswordTransitionIsNeeded">
            <summary>
            Code 432
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.RequestedMailActionNotTaken_MailboxUnavailable">
            <summary>
            Code 450
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.RequestedActionAborted_ErrorInProcessing">
            <summary>
            Code 451
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.TemporaryAuthenticationFailure">
            <summary>
            Code 454
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.SyntaxError_CommandUnrecognized">
            <summary>
            Code 500
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.SyntaxErrorInParametersOrArguments">
            <summary>
            Code 501
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.CommandNotImplemented">
            <summary>
            Code 502
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.BadSequenceOfCommands">
            <summary>
            Code 503
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.CommandParameterNotImplemented">
            <summary>
            Code 504
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.AuthenticationRequired">
            <summary>
            Code 530
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.EncryptionRequiredForRequestedAuthenticationMechanism">
            <summary>
            Code 538
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.RequestedActionNotTaken_MailboxUnavailable">
            <summary>
            Code 550
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.UserNotLocal_PleaseTry">
            <summary>
            Code 551
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.RequestedMailActionAborted_ExceededStorageAllocation">
            <summary>
            Code 552
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.RequestedActionNotTaken_MailboxNameNotAllowed">
            <summary>
            Code 553
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpCommandResultCode.TransactionFailed">
            <summary>
            Code 554
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.ESmtpResponseType">
            <summary>
            Types of the smtp server responses
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpResponseType.PositiveCompletion">
            <summary>
            The last command completed successfuly
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpResponseType.PositiveIntermediate">
            <summary>
            The last command was successfully processed, 
            but the server is awaiting for contunuation
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpResponseType.NegativeTransient">
            <summary>
            The last command processed with errors by the server,
            and the server is awaiting for continuation
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ESmtpResponseType.NegativePermanent">
            <summary>
            The last command was processes with error by the server
            </summary>
        </member>
        <member name="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            <summary>
            Exception, which is trown when selected authentication method is not supported by the server
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException.#ctor">
            <summary>
            Creates new object of <seealso cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException"/>
            </summary>
        </member>
        <member name="M:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException.#ctor(System.String)">
            <summary>
            Creates new object of <seealso cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException"/>
            </summary>
            <param name="message">Text of the exception message</param>
        </member>
        <member name="M:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new object of <seealso cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException"/>
            </summary>
            <param name="message">Text of exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException">
            <summary>
            Exception, that is thrown when response recieved from server has invalid format
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException.#ctor(System.String)">
            <summary>
            Creates new object of <seealso cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException"/>
            </summary>
            <param name="message">Text of the exception message</param>
        </member>
        <member name="M:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException.#ctor(System.String,Email.Net.Smtp.SmtpResponse)">
            <summary>
            Creates new object of <seealso cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException"/>
            </summary>
            <param name="message">Text of the exception message</param>
            <param name="response">An object of <seealso cref="T:Email.Net.Smtp.SmtpResponse"/>, constructed from the server response</param>
        </member>
        <member name="M:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException.#ctor(System.String,Email.Net.Smtp.SmtpResponse,System.Exception)">
            <summary>
            Creates new object of <seealso cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException"/>
            </summary>
            <param name="message">Text of the exception message</param>
            <param name="response">An object of <seealso cref="T:Email.Net.Smtp.SmtpResponse"/>, constructed from the server response</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="F:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException._response">
            <summary>
            The partially parsed response that caused this exception
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException.Response">
            <summary>
            The partially parsed response that caused this exception
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.MailMessageRFCEncoder">
            <summary>
            Encoder of Message class using MIME standart
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.FirstLineLengthShouldBeLessThanMaxLineLengthMessage">
            <summary>
            Text for the exception that is thrown if firstLineLength parameter is bigger than maxLineLength
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.PlainTextContentTypeHeader">
            <summary>
            Text for a text/plain content type header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.MultipartAlternativeContentTypeHeader">
            <summary>
            Text for a multipart/alternative content type header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.MultipartContentTypeHeader">
            <summary>
            Text for a multipart/mixed content type header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.HtmlTextContentTypeHeader">
            <summary>
            Text for a text/html content type header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.MIMEHeader">
            <summary>
            Text for a MIME-Version header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.ApplicationContentTypeHeader">
            <summary>
            Text for an application/octet-stream content type header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.ContentDispositionHeader">
            <summary>
            Text for a Content-Disposition content type header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.ContentTransferEncodingBase64Header">
            <summary>
            Text for a Content-Transfer-Encoding header
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.MailMessageRFCEncoder.MaxMIMELineLength">
            <summary>
            Maximum line length according to the MIME
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.GetEncoded(Email.Net.Smtp.SmtpMessage,System.Text.Encoding)">
            <summary>
            Returns encoded message as iterator of strings
            </summary>
            <param name="message">Message to encode</param>
            <param name="encoding">Encoding of text part to use</param>
            <returns>Iterator through encoded strings, that are ready to sent to smtp server</returns>
            <exception cref="T:System.ArgumentNullException">Neither argument can be null</exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.EncodeMessageText(Email.Net.Common.MailMessage,System.Text.Encoding)">
            <summary>
            Encodes text part of the message.
            If the specified contenttype is HTML an alternative multipart encoding will be used, for the text/html part of the message will be used the Text field, for text/plain - the PlainText field.
            If the specified contenttype is PlainText, only the field Text will be used for the text/plain part.
            </summary>
            <param name="message">A message to encode</param>
            <param name="encoding">An encoding to use</param>
            <returns>Iterator for the strings of the encoded message</returns>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.GetEncoded(Email.Net.Smtp.SmtpMessage)">
            <summary>
            Returns encoded message as iterator of strings
            </summary>
            <param name="message">Message to encode</param>
            <returns>Iterator through encoded strings, that are ready to sent to smtp server</returns>
            <exception cref="T:System.ArgumentNullException">The message argument cannot be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.EncodeEmailAddressCollection(System.Collections.Generic.IEnumerable{Email.Net.Common.EmailAddress},System.Text.Encoding,System.Int32)">
            <summary>
            Encodes the collection of the email addresses according to RFC2822 
            for use in message headers like "To:", "CC:", etc.
            </summary>
            <param name="collection">A collection of the email addresses to encode</param>
            <param name="encoding">A character encoding to use</param>
            <param name="firstLineLength">The length of the first line of the encoded string</param>
            <returns>The encoded string</returns>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstLineLength parameter cannot be negative</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.EncodeEmailAddress(Email.Net.Common.EmailAddress,System.Text.Encoding,System.Int32)">
            <summary>
            Encodes one email address according to RFC2822 to use in the header 
            fields of the message and in the collection encoding
            </summary>
            <param name="address">An email address to encode</param>
            <param name="encoding">&gt;A character encoding to use</param>
            <param name="firstLineLength">The length of the first line of the encoded string</param>
            <returns>The encoded email address</returns>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">firstLineLength parameter cannot be negative</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.MimeEncodeHeader(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Encodes message header contained non-ASCII characters using MIME standart
            </summary>
            <param name="text">Header text to encode</param>
            <param name="maxLineLength">A maximum line length in encoded header</param>
            <param name="firstLineLength">A length of the first line in the encoded header</param>
            <param name="encoding">Encoding to use</param>
            <returns>Encoded header as string</returns>
            <exception cref="T:System.ArgumentNullException">Neither argument can be null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Both maxLineLength and firstLineLength cannot be negative</exception>
            <exception cref="T:System.ArgumentException">firstLineLength cannot be greater than maxLineLength</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.MimeBase64Encode(System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Encodes a text using base64 standard, and formats result line using 
            given parameters of the line lengths
            </summary>
            <param name="text">A text to encode</param>
            <param name="maxBase64LineLength">A maximum line length</param>
            <param name="firstLineLength">A length of the first line</param>
            <param name="encoding">A character encoding to use</param>
            <returns>Base64 encoded string</returns>
            <exception cref="T:System.ArgumentNullException">Neither argument can be null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Both maxBase64LineLength and firstLineLength cannot be negative</exception>
            <exception cref="T:System.ArgumentException">firstLineLength cannot be lower than maxBase64LineLength</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.Base64EncodeAttachment(Email.Net.Common.MessageParts.Attachment)">
            <summary>
            Encodes an attachment using the base64 algorithm
            </summary>
            <param name="attachment">An attachment to encode</param>
            <returns>Encoded attachment in the base64 strings form</returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">Specified file must exist and be readable</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.IsAsciiCharOnly(System.String)">
            <summary>
            Determines whether a string contains non-ASCII characters or not
            </summary>
            <param name="text">A string to check</param>
            <returns>
            true, if the provided string contains ASCII characters only, 
            otherwise false
            </returns>
            <exception cref="T:System.ArgumentNullException">Argument cannot be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.MailMessageRFCEncoder.StringJoin(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the provided strings inserting the provided delimiter between them
            </summary>
            <param name="strings">Strings to join</param>
            <param name="delimiter">A delimiter to use</param>
            <returns>Joined string</returns>
            <exception cref="T:System.ArgumentNullException">Neither argument can be null</exception>
        </member>
        <member name="T:Email.Net.Smtp.SendResult">
            <summary>
            Represents the result of sending messages to the smtp server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SendResult._invalidAddresses">
            <summary>
            A collection of invalid addresses that is user to store addresses which was rejected 
            by a smtp server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SendResult._result">
            <summary>
            Gets or sets the type of the result providing some information about 
            the last step during the sending process
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SendResult._lastResponse">
            <summary>
            Last received response from the smtp server
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SendResult.#ctor(Email.Net.Smtp.ESendResult,Email.Net.Smtp.SmtpResponse,System.Collections.Generic.IEnumerable{Email.Net.Common.EmailAddress})">
            <summary>
            Initializes a new object of <see cref="T:Email.Net.Smtp.SendResult"/>
            </summary>
            <param name="result">Type of the result</param>
            <param name="lastResponse">Last received response</param>
            <param name="invalidEmails">The addresses was considered by the server as invalid</param>
            <exception cref="T:System.ArgumentNullException">
            lastResponse is null
            or invalidEmails is null
            </exception>
        </member>
        <member name="M:Email.Net.Smtp.SendResult.#ctor(Email.Net.Smtp.ESendResult,Email.Net.Smtp.SmtpResponse)">
            <summary>
            Initializes new object of <see cref="T:Email.Net.Smtp.SendResult"/> 
            </summary>
            <param name="result">Type of result</param>
            <param name="lastResponse">Last received response</param>
            <exception cref="T:System.ArgumentNullException">lastResponse is null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SendResult.Result">
            <summary>
            Gets or sets the type of the result providing some information about 
            the last step during the sending process
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SendResult.IsSuccessful">
            <summary>
            Returns true if the messages was successfully sent, even if some of the emails 
            was considered invalid by the server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SendResult.InvalidAddresses">
            <summary>
            Returns the addresses was considered by the server as invalid for some reasons
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SendResult.LastResponse">
            <summary>
            Last received response from the smtp server
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.AUTHCramMD5Command">
            <summary>
            Represents authentication process using CRAM-MD5 authentication mechanism
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.ISmtpAction">
            <summary>
            Abstracts actions of smtp protocol
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ISmtpAction.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs the underlying action using provided connection
            </summary>
            <param name="connection">Connection to use for performing the action</param>
            <returns>Server response</returns>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHCramMD5Command._login">
            <summary>
            Login to use in the authentication process
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHCramMD5Command._password">
            <summary>
            Password to use in the authentication process
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHCramMD5Command.#ctor(System.String,System.String)">
            <summary>
            Creates a new action using provided login and password
            </summary>
            <param name="login">Login</param>
            <param name="password">Password</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHCramMD5Command.GetBase64CramMD5Credentials(System.String,System.String,System.String)">
            <summary>
            Implements CRAM-MD5 credentials encode algorithm
            </summary>
            <param name="challenge">Challenge string recieved from the server</param>
            <param name="login">User login</param>
            <param name="password">User password</param>
            <returns>Encoded CRAM-MD5 authentication response to server challenge</returns>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHCramMD5Command.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs authentication using CRAM-MD5 mechanism and provided login and password
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Response of the smtp server</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command">
            <summary>
            Represents authentication process using DIGEST-MD5 mechanism
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.NoRealmFieldMessage">
            <summary>
            This string is used for an exception message, if realm field is not discovered in the DIGEST-MD5 message received from a server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.NoOnceFieldMessage">
            <summary>
            This string is used for an exception message, if nonce field is not discovered in the DIGEST-MD5 message received from a server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command._user">
            <summary>
            Login to use in the authentication process
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command._password">
            <summary>
            Password to use in the authentication process
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.#ctor(System.String,System.String)">
            <summary>
            Initializes the new object with the provided parameters
            </summary>
            <param name="user">Login to use in the authentication process</param>
            <param name="password">Password to use in the authentication process</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.ParseChallenge(System.String)">
            <summary>
            Parses challenge received from the server
            </summary>
            <param name="challenge">Challenge string</param>
            <returns>Parsed challenge as a key-value pair</returns>
            <exception cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException">Response received from the server wasn't properly formatted</exception>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.ComputeResponse(System.String,System.String,Email.Net.Smtp.SmtpResponse)">
            <summary>
            Computes response for the received challenge
            </summary>
            <param name="username">Login</param>
            <param name="password">Password</param>
            <param name="challengeResponse">Received challenge response from the server</param>
            <returns>Response line for received challenge</returns>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.RandomString">
            <summary>
            Returns a random base64-encoded string of 12 characters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.Hexify(System.Byte[])">
            <summary>
            Returns hexademical representation of byte array
            </summary>
            <param name="bytes">Bytes to convert</param>
            <returns>Hexademical representation</returns>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHDigestMD5Command.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs authentication using DIGEST-MD5 mechanism and the provided login and password
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Recieved response</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.AUTHLoginCommand">
            <summary>
            Represents authentication action using LOGIN authentication mechanism
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHLoginCommand._login">
            <summary>
            Login to use during authentication process
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHLoginCommand._password">
            <summary>
            Password to use during authentication process
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHLoginCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new action using provided login and password
            </summary>
            <param name="login">Login</param>
            <param name="password">Password</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHLoginCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs authentication using LOGIN mechanism and provided login and password
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Response of the smtp server</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.AUTHPlainCommand">
            <summary>
            Represents authentication action using PLAIN authentication mechanism
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHPlainCommand._login">
            <summary>
            Login to use during authentication process
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.AUTHPlainCommand._password">
            <summary>
            Password to use during authentication process
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHPlainCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new action using provided login and password
            </summary>
            <param name="login">Login</param>
            <param name="password">Password</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.AUTHPlainCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Performs authentication using LOGIN mechanism and provided login and password
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Response of the smtp server</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.DATACommand">
            <summary>
            Represents DATA command of SMTP protocol
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.DATACommand.CommandPattern">
            <summary>
            A pattern of the data command
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.DATACommand._messageLines">
            <summary>
            Message lines
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.DATACommand.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new action object using provided collections of messages
            </summary>
            <param name="messageLines">Collection of messages to send</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.DATACommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends DATA command using SMTP syntax and returns server response
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.EHLOCommand">
            <summary>
            Represents EHLO command of SMTP protocol
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.EHLOCommand.CommandPattern">
            <summary>
            A pattern of the EHLO command
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.EHLOCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends EHLO command using SMTP syntax and returns server response
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Server response</returns>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.EHLOCommand.GetFQDN">
            <summary>
            Returns FQDN of host where code is executing
            </summary>
            <returns>Fully qualified domain name</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.HELOCommand">
            <summary>
            Represents HELO command of SMTP protocol for old servers
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.HELOCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends HELO command using SMTP syntax and returns server response
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.MAILCommand">
            <summary>
            Represents MAIL command of SMTP protocol for old servers
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.MAILCommand.CommandPattern">
            <summary>
            A pattern of the MAIL command
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.MAILCommand._addressFrom">
            <summary>
            Email address to use as a from address
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.MAILCommand.#ctor(Email.Net.Common.EmailAddress)">
            <summary>
            Instantiates new MAIL command using provided address, where emails are sent from
            </summary>
            <param name="addressFrom">Address</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.MAILCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends MAIL command using SMTP syntax and returns server response
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.QUITCommand">
            <summary>
            Represents QUIT command of SMTP protocol for old servers
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.QUITCommand.CommandPattern">
            <summary>
            A pattern of the QUIT command
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.QUITCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends MAIL command using SMTP syntax and returns server response
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Server response</returns>		
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.RCPTCommand">
            <summary>
            Represents RCPT command of SMTP protocol for old servers
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.RCPTCommand.CommandPattern">
            <summary>
            A pattern of the RCPT command
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.ServerActions.RCPTCommand._addressTo">
            <summary>
            Email address to use as a destination in MAIL command
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.RCPTCommand.#ctor(Email.Net.Common.EmailAddress)">
            <summary>
            Instantiates new RCPT command using provided address, emails should should be send to
            </summary>
            <param name="addressTo">Address to send email to</param>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.RCPTCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends RCPT command using SMTP syntax and returns server response
            </summary>
            <param name="connection">Connection object to use</param>
            <returns>Server response</returns>
        </member>
        <member name="T:Email.Net.Smtp.ServerActions.StartTlsCommand">
            <summary>
            Represents a STARTTLS command
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.ServerActions.StartTlsCommand.Interact(Email.Net.Common.Connections.IConnection)">
            <summary>
            Sends STARTTLS command using provided connection object
            </summary>
            <param name="connection">Connection object</param>
            <returns>Response received from the server</returns>
        </member>
        <member name="T:Email.Net.Smtp.SmtpClientEventHandler">
            <summary>
            Represents a method that will handle all <see cref="T:Email.Net.Smtp.SmtpClient"/> events
            </summary>
            <param name="sender">The source of the event</param>
        </member>
        <member name="T:Email.Net.Smtp.SmtpClient">
            <summary>
            Represents component for access smtp servers
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.ConnectionShouldBeOpenedMessage">
            <summary>
             This string is used for an exception message, if connection is closed
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.WrongAuthenticationMethodSelectedMessage">
            <summary>
             This string is used for an exception message, if the selected authentication method is not supported by the server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.OtherThreadIsActive">
            <summary>
             This string is used for an exception message, if user tries to execute syncornous operation in one object from separate threads
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.NeitherMessageCanBeNull">
            <summary>
             This string is used for an exception message, if one of the message collection elements is null
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.IncorrectPlainTextInitializationMessage">
            <summary>
             This string is used for an exception message, if PlainText field is not initialized for HTML message
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.OnlyPlainOrHtmlSupportedMessage">
            <summary>
             This string is used for an exception message, if contenttype other than HTML or PlainText chosen
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.FromFieldNotSpecifiedMessage">
            <summary>
             This string is used for an exception message, if Form field is not specified
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.NoTextSpecifiedMessage">
            <summary>
             This string is used for an exception message, if Text field is not specified
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.NoToFieldSpecifiedMessage">
            <summary>
             This string is used for an exception message, if To field is not specified
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient._configurationProvider">
            <summary>
            An object of <see cref="T:Email.Net.Common.Configurations.CodeConfigurationProvider"/> to use in the _smtpClient
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient._state">
            <summary>
            Gets the current state of the SmtpClientClient
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient._password">
            <summary>
            Password to authenticate on the server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient._username">
            <summary>
            Username to authenticate on the server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient._connectionFactory">
            <summary>
            Contains the object of <see cref="T:Email.Net.Common.Connections.ConnectionFactory"/>
            that provides connection objects
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.#ctor">
            <summary>
            Initializes the internal structures of the created object
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes the internal structures of the created object using the provided container
            </summary>
            <param name="container">A container object to use</param>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.#ctor(System.String,System.UInt16,System.String,System.String)">
            <summary>
            Initializes new <see cref="T:Email.Net.Smtp.SmtpClient"/> object with provided parameters
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for connection</param>
            <param name="smtpUser">Username to login to the SMTP server</param>
            <param name="smtpPassword">Password to login to the SMTP server</param>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.#ctor(System.String,System.UInt16,System.String,System.String,Email.Net.Common.Configurations.EInteractionType)">
            <summary>
            Initializes new <see cref="T:Email.Net.Smtp.SmtpClient"/> object with provided parameters
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for the connection</param>
            <param name="smtpUser">Username to login to SMTP server</param>
            <param name="smtpPassword">Password to login to SMTP server</param>
            <param name="interactionType">Specifies using SSL during the connection</param>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.#ctor(Email.Net.Common.Configurations.CodeConfigurationProvider,System.String,System.String)">
            <summary>
            Initializes new <see cref="T:Email.Net.Smtp.SmtpClient"/> object with provided parameters
            </summary>
            <param name="configurationProvider">Object that provides configuration parameters</param>
            <param name="smtpUser">Username to login to the SMTP server</param>
            <param name="smtpPassword">Password to login to SMTP the server</param>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.#ctor(System.String,System.UInt16,Email.Net.Common.Configurations.EInteractionType)">
            <summary>
            Initializes a new <see cref="T:Email.Net.Smtp.SmtpClient"/> object with provided parameters
            </summary>
            <param name="host">URL of host to connect to</param>
            <param name="port">TCP port for the connection</param>
            <param name="interactionType">Specifies using SSL during the connection</param>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.Init(System.String,System.UInt16,System.String,System.String,Email.Net.Common.Configurations.EInteractionType)">
            <summary>
            Initializes internal data structures, and properties of the object
            </summary>
            <param name="host">Host address to connect to</param>
            <param name="port">TCP port to connect to</param>
            <param name="smtpUser">Username to use in authentication on the server</param>
            <param name="smtpPassword">Password to use in authentication on the server</param>
            <param name="interactionType">Manner of using SSL during the interaction process</param>
            <exception cref="T:System.ArgumentNullException">Neither parameter can be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.SendOne(Email.Net.Smtp.SmtpMessage)">
            <summary>
            Sends a message using the configuration and credentials of the SmtpClient object
            </summary>
            <param name="message">Message to send</param>
            <returns>Object described result of sending process</returns>
            <exception cref="T:System.ArgumentNullException">
            message parameter must not be null
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Identifies some trouble during network interaction
            </exception>
            <exception cref="T:System.InvalidOperationException">
            SmtpClient doesn't allow sending emails in separate threads using one object
            </exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but <see cref="P:Email.Net.Common.MailMessage.PlainText"/> PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
            <example>
				The following example demonstrates how to send one message
				<code lang="C#" source="Email.Net.Example.CS\SmtpClientExample.cs" region="SendOneMessage"/>
			</example><example>
				The following example demonstrates how to send one message
				<code lang="VB.NET" source="Email.Net.Example.VB\SmtpClientExample.vb" region="SendOneMessage"/>
			</example>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.SendOne(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message using the configuration and credentials of the SmtpClient object
            </summary>
            <param name="addressFrom">Source e-mail address</param>
            <param name="addressTo">Destination e-mail address</param>
            <param name="messageSubject">Subject of the message</param>
            <param name="messageText">Text of the message</param>
            <returns>Object described result of sending process</returns>
            <exception cref="T:System.ArgumentNullException">
            message parameter must not be null
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Identifies some trouble during network interaction
            </exception>
            <exception cref="T:System.InvalidOperationException">
            SmtpClient doesn't allow sending emails in separate threads using one object
            </exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but <see cref="P:Email.Net.Common.MailMessage.PlainText"/> PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
            <example>
				This example shows how to send a message using a single line of code
				<code lang="C#" source="Email.Net.Example.CS\SmtpClientExample.cs" region="SendOneToOneSingleLine"/>
			</example><example>
				This example shows how to send a message using a single line of code
				<code lang="VB.NET" source="Email.Net.Example.VB\SmtpClientExample.vb" region="SendOneToOneSingleLine"/>
			</example>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.SendOne(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Sends a message using the configuration and credentials of the SmtpClient object
            </summary>
            <param name="addressFrom">Source e-mail address</param>
            <param name="addressTo">Destination e-mail addresses</param>
            <param name="messageSubject">Subject of the message</param>
            <param name="messageText">Text of the message</param>
            <returns>Object described result of sending process</returns>
            <exception cref="T:System.ArgumentNullException">
            message parameter must not be null
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Identifies some trouble during network interaction
            </exception>
            <exception cref="T:System.InvalidOperationException">
            SmtpClient doesn't allow sending emails in separate threads using one object
            </exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but <see cref="P:Email.Net.Common.MailMessage.PlainText"/> PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
            <example>
				This example shows how to send a message using a single line of code
				<code lang="C#" source="Email.Net.Example.CS\SmtpClientExample.cs" region="SendOneToManySingleLine"/>
			</example><example>
				This example shows how to send a message using a single line of code
				<code lang="VB.NET" source="Email.Net.Example.VB\SmtpClientExample.vb" region="SendOneToManySingleLine"/>
			</example>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.SendSome(System.Collections.Generic.IEnumerable{Email.Net.Smtp.SmtpMessage})">
            <summary>
            Sends provided messages using provided earlier configuration and credentials
            </summary>
            <param name="messages">Messages to send</param>
            <returns>Object described result of sending process</returns>
            <exception cref="T:System.ArgumentNullException">
            messages parameter must not be null
            </exception>
            <exception cref="T:System.Net.Sockets.SocketException">
            Identifies some trouble during network interaction
            </exception>
            <exception cref="T:System.InvalidOperationException">
            SmtpClient doesn't allow sending emails in separate threads using one object
            </exception>		
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but  <see cref="P:Email.Net.Common.MailMessage.PlainText"/> field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
            <example>
				The following exaple demostrates how to send some messages to the server
				<code lang="C#" source="Email.Net.Example.CS\SmtpClientExample.cs" region="SendSomeMessages"/>
			</example><example>
				The following exaple demostrates how to send some messages to the server
				<code lang="VB.NET" source="Email.Net.Example.VB\SmtpClientExample.vb" region="SendSomeMessages"/>
			</example>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.BeginSendOne(Email.Net.Smtp.SmtpMessage,System.AsyncCallback)">
            <summary>
            Starts an asyncronous sending of the provided message
            You should call <see cref="M:Email.Net.Smtp.SmtpClient.EndSendOne(System.IAsyncResult)"/>
            </summary>
            <param name="message">A message to send</param>
            <param name="callback">
            Callback delegate will be called when sending process finishes
            Can be null
            </param>
            <returns>
            Object to track process from the client code
            This object should be passed to <see cref="M:Email.Net.Smtp.SmtpClient.EndSendOne(System.IAsyncResult)"/> call
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Parameter message cannot be null
            </exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
            <example>
				This example shows how to send a message asyncronously
				<code lang="C#" source="Email.Net.Example.CS\SmtpClientExample.cs" region="SendOneAsync"/>
			</example><example>
				This example shows how to send a message asyncronously
				<code lang="VB.NET" source="Email.Net.Example.VB\SmtpClientExample.vb" region="SendOneAsync"/>
			</example>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.BeginSendSome(System.Collections.Generic.IEnumerable{Email.Net.Smtp.SmtpMessage},System.AsyncCallback)">
            <summary>
            Starts an asyncronous sending of provided messages
            You should call <see cref="M:Email.Net.Smtp.SmtpClient.EndSendSome(System.IAsyncResult)"/>
            </summary>
            <param name="messages">Messages to send</param>
            <param name="callback">
            Callback delegate will be called when sending process finishes
            Can be null
            </param>
            <returns>
            Object to track process from the client code
            This object should be passed to EndResult call
            </returns>
            <exception cref="T:System.ArgumentNullException">Parameters of this method cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">
            SmtpClient doesn't allow sending emails in separate threads using one object
            </exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
            <example>
				This example shows how to send a message asyncronously
				<code lang="C#" source="Email.Net.Example.CS\SmtpClientExample.cs" region="SendSomeAsync"/>
			</example><example>
				This example shows how to send a message asyncronously
				<code lang="VB.NET" source="Email.Net.Example.VB\SmtpClientExample.vb" region="SendSomeAsync"/>
			</example>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.EndSendOne(System.IAsyncResult)">
            <summary>
            Method must be called after process of sending finished
            If method is called during the sensing process it will block thread until send finishes
            </summary>
            <param name="asyncResult">Object you got from <see cref="M:Email.Net.Smtp.SmtpClient.BeginSendOne(Email.Net.Smtp.SmtpMessage,System.AsyncCallback)"/> </param>
            <returns>
            Result of send operation
            </returns>
            <exception cref="T:System.ArgumentNullException">Parameters of this method cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.EndSendSome(System.IAsyncResult)">
            <summary>
            Method must be called after process of sending finished
            If method is called during the sensing process it will block thread until send finishes
            </summary>
            <param name="asyncResult">Object you got from <see cref="M:Email.Net.Smtp.SmtpClient.BeginSendSome(System.Collections.Generic.IEnumerable{Email.Net.Smtp.SmtpMessage},System.AsyncCallback)"/></param>
            <returns>
            Result of send operation
            </returns>
            <exception cref="T:System.ArgumentNullException">Parameters of this method cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">HTML content type is specified, but PlainText field is not initialized</exception>
            <exception cref="T:System.NotSupportedException">Only PlainText and HTML content type is supported</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.PerformSendMailInteraction(System.Collections.Generic.IEnumerable{Email.Net.Smtp.SmtpMessage},Email.Net.Common.Connections.IConnection)">
            <summary>
            Smtp protocol realization for sending provided message using provided connection object
            </summary>
            <param name="messages">Messages to send</param>
            <param name="connection">Connection object to use</param>
            <exception cref="T:System.NotImplementedException">Exception is trown if user supplied parameters that cannot be used to interact with server</exception>
            <returns>Result object describing of sending messages</returns>
            <exception cref="T:System.InvalidOperationException">Connection should be opened before calling this method</exception>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.DoAction(Email.Net.Smtp.ISmtpAction,Email.Net.Common.Connections.IConnection)">
            <summary>
            Executes provided action using provided connections
            </summary>
            <param name="action">Action to execute</param>
            <param name="connection">Connection to use for execution</param>
            <returns>Response object described result of action execution</returns>
            <exception cref="T:Email.Net.Smtp.Exceptions.UnexpectedSMTPResponseException">
            Response received from the server wasn't properly formatted
            </exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.IsAuthMethosSupported(System.Collections.Generic.IEnumerable{Email.Net.Smtp.SmtpResponseLine},System.String)">
            <summary>
            Checks if the provided interaction method is supported by the server
            </summary>
            <param name="serverExtensions">A List of the recieved server extensions</param>
            <param name="authMethod">An authorization method to check</param>
            <returns>True, if the provided authentication method is supported. Otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.GetAuthenticationCommand(System.String,System.String,Email.Net.Common.Configurations.EAuthenticationType,System.Collections.Generic.IEnumerable{Email.Net.Smtp.SmtpResponseLine})">
            <summary>
            Selects appropriate authentication mechanism based on server EHLO response
            creates and returns corresponding <see cref="T:Email.Net.Smtp.ISmtpAction"/> object if Auto authentication type parameter provided
            if provided exact type of authentication - returns corresponding <see cref="T:Email.Net.Smtp.ISmtpAction"/> object
            </summary>
            <param name="user">Username to authenticate</param>
            <param name="password">Password</param>
            <param name="authenticationType">Authentication type. Auto - for auto select</param>
            <param name="serverExtensions">List of server extensions recieved from EHLO command</param>
            <returns>ISmtpAction object</returns>
            <exception cref="T:Email.Net.Common.Exceptions.AuthenticationMethodNotSupportedException">
            Selected authentication method does not supported by the sever, 
            or no suitable authentication method was detected
            </exception>
        </member>
        <member name="F:Email.Net.Smtp.SmtpClient.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Email.Net.Smtp.SmtpClient.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Email.Net.Smtp.SmtpClient.Connected">
            <summary>
            Occurs when the client is connected to the server
            </summary>
        </member>
        <member name="E:Email.Net.Smtp.SmtpClient.Authenticated">
            <summary>
            Occurs when the client is authenticated on the server
            </summary>
        </member>
        <member name="E:Email.Net.Smtp.SmtpClient.Completed">
            <summary>
            Occurs when one of the provided messages is sent
            </summary>
        </member>
        <member name="E:Email.Net.Smtp.SmtpClient.MessageSended">
            <summary>
            Occues when the whole sending process is completed
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.Host">
            <summary>
            An address of the server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.Port">
            <summary>
            A number of the TCP server port
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.Username">
            <summary>
            A username to authenticate on the server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.Password">
            <summary>
            A password to authenticate on the server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.ProxyType">
            <summary>
            Type of the proxy server to use
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.ProxyHost">
            <summary>
            A hostname of the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.ProxyPort">
            <summary>
            A TCP port of the proxy server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.ProxyUser">
            <summary>
            A username to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.ProxyPassword">
            <summary>
            A password to authenticate on the proxy server
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.AuthenticationType">
            <summary>
            A type of authentication to use
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.SSLInteractionType">
            <summary>
            Specifies using TLS/SSL during the connection
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.SendTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while sending packets to the server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.ReceiveTimeOut">
            <summary>
            Specifies time in milliseconds to wait a response while receiving packets from the server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpClient.State">
            <summary>
            Gets the current state of the <see cref="T:Email.Net.Smtp.SmtpClient"/>
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.SmtpClient.SendSomeDelegate">
            <summary>
            Represents the SendSome method to call it asynchronously
            </summary>
            <param name="messages">Messages to send</param>
        </member>
        <member name="T:Email.Net.Smtp.SmtpClient.SendOneDelegate">
            <summary>
            Represents the SendOne method to call it asynchronously
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="T:Email.Net.Smtp.SmtpMessage">
            <summary>
            Represents an email message, and provides basic fields and fuctionality
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpMessage.DefaultEncodingWebName">
            <summary>
            Specifies the default message encoding mode by its name
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpMessage._textEncoding">
            <summary>
            An encoding which will be used to send a message
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpMessage.Init">
            <summary>
            Initializes internal data structures
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpMessage.#ctor(Email.Net.Common.EmailAddress,Email.Net.Common.EmailAddress,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Email.Net.Smtp.SmtpMessage"/> object using the provided 
            source e-mail address, destination 
            e-mail address, subject and text of the message
            </summary>
            <param name="from">Source e-mail address</param>
            <param name="to">Destination e-mail address</param>
            <param name="subject">Subject of the message</param>
            <param name="messageText">Text of the message</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpMessage.#ctor(Email.Net.Common.EmailAddress,Email.Net.Common.Collections.EmailAddressCollection,System.String,System.String)">
            <summary>
            Instantiates a new <see cref="T:Email.Net.Smtp.SmtpMessage"/> object using the provided 
            source e-mail address, collection of destination e-mail addresses, 
            subject and text of the message
            </summary>
            <param name="from">Source e-mail address</param>
            <param name="to">Destination e-mail addresses collection</param>
            <param name="subject">Subject of the message</param>
            <param name="messageText">Text of the message</param>
            <exception cref="T:System.ArgumentNullException">Parameter cannot be null</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpMessage.#ctor(Email.Net.Common.MailMessage,System.Text.Encoding)">
            <summary>
             Creates a new instance of the <see cref="T:Email.Net.Smtp.SmtpMessage"/> using an 
             existing message as a template
            </summary>
            <param name="message">A source message</param>
            <param name="encoding">An encoding which will be used to encode message 
             on send</param>
            <exception cref="T:System.ArgumentNullException">Occurs when one of the method 
             parametes is not set</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpMessage.#ctor">
            <summary>
            Instantiates a new empty <see cref="T:Email.Net.Smtp.SmtpMessage"/> object
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpMessage.CheckCorrectness">
            <summary>
            Checks correctness of the message
            </summary>
            <returns>Result of the inspection</returns>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.Sender">
            <summary>
            Gets and sets the direct sender of the message
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ReplyTo">
            <summary>
            Gets and the e-mail addresses collection which the message is to reply to
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.Comments">
            <summary>
            Gets and sets the comments of the message
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.Keywords">
            <summary>
            Specifies collection of the keywords
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.TextEncoding">
            <summary>
            Gets and sets the encoding of the message. By default UTF-8 is used
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.InReplyTo">
            <summary>
            Gets and sets the parent message Id
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.References">
            <summary>
            Gets and sets the Id of the message which the given message refers to
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.Received">
            <summary>
            Gets information about sender’s server and time
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentDate">
            <summary>
            Gets and sets the parent message date
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentFrom">
            <summary>
            Gets and sets the parent message sender
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentSender">
            <summary>
            Gets and sets the direct sender of the parent message
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentTo">
            <summary>
            Gets and sets the parent message receiver
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentCarbonCopies">
            <summary>
            Gets and sets the parent message copy receivers
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentBlindedCarbonCopies">
            <summary>
            Gets and sets the parent message blinded copy receivers
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ResentMessageID">
            <summary>
            Gets and sets the parent message Id
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be null</exception>
        </member>
        <member name="P:Email.Net.Smtp.SmtpMessage.ExtraHeaders">
            <summary>
            Gets the dictionary of extra headers
            </summary>
        </member>
        <member name="T:Email.Net.Smtp.SmtpResponseLine">
            <summary>
            Represents line of the smtp server response 
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponseLine._code">
            <summary>
            SMTP code
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponseLine._comment">
            <summary>
            the comment supplied with server response
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponseLine._sourceResponseLine">
            <summary>
            Gets the full response line received from the server
            </summary>
        </member>
        <member name="F:Email.Net.Smtp.SmtpResponseLine._isLastLine">
            <summary>
            Returns true, if this line is the last in the response
            </summary>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponseLine.#ctor(System.String)">
            <summary>
            Initializes internal data structures using the response line given
            </summary>
            <param name="line">The line recieved from the server</param>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponseLine.InitFromResponseString(System.String)">
            <summary>
            Initializes internal data structures from the response string given
            </summary>
            <param name="responseString">String received as a response from the smtp server</param>
            <exception cref="T:System.FormatException">Response string is not properly formatted</exception>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponseLine.IsFormatCorrect(System.String)">
            <summary>
            Check the correctness of the given response string format
            </summary>
            <param name="responseString">String to check</param>
            <returns>True, if string format is correct, otherwise - false</returns>
        </member>
        <member name="M:Email.Net.Smtp.SmtpResponseLine.ToString">
            <summary>
            Returns string representation
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponseLine.Code">
            <summary>
            Gets SMTP code
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponseLine.Comment">
            <summary>
            Gets the comment supplied with server response
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponseLine.SourceResponseLine">
            <summary>
            Gets the full response line received from the server
            </summary>
        </member>
        <member name="P:Email.Net.Smtp.SmtpResponseLine.IsLastLine">
            <summary>
            Returns true, if this line is the last in the response
            </summary>
        </member>
    </members>
</doc>
